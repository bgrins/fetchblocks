var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_quickjs_browser = __commonJS({
  "quickjs-browser.js"(exports, module) {
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.quickjs = f();
      }
    })(function() {
      var define2, module2, exports2;
      return function() {
        function r(e, n, t) {
          function o(i2, f) {
            if (!n[i2]) {
              if (!e[i2]) {
                var c = typeof require == "function" && require;
                if (!f && c)
                  return c(i2, true);
                if (u)
                  return u(i2, true);
                var a = new Error("Cannot find module '" + i2 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p = n[i2] = { exports: {} };
              e[i2][0].call(p.exports, function(r2) {
                var n2 = e[i2][1][r2];
                return o(n2 || r2);
              }, p, p.exports, r, e, n, t);
            }
            return n[i2].exports;
          }
          for (var u = typeof require == "function" && require, i = 0; i < t.length; i++)
            o(t[i]);
          return o;
        }
        return r;
      }()({ 1: [function(require2, module3, exports3) {
        "use strict";
        const asn1 = exports3;
        asn1.bignum = require2("bn.js");
        asn1.define = require2("./asn1/api").define;
        asn1.base = require2("./asn1/base");
        asn1.constants = require2("./asn1/constants");
        asn1.decoders = require2("./asn1/decoders");
        asn1.encoders = require2("./asn1/encoders");
      }, { "./asn1/api": 2, "./asn1/base": 4, "./asn1/constants": 8, "./asn1/decoders": 10, "./asn1/encoders": 13, "bn.js": 15 }], 2: [function(require2, module3, exports3) {
        "use strict";
        const encoders = require2("./encoders");
        const decoders = require2("./decoders");
        const inherits = require2("inherits");
        const api = exports3;
        api.define = function define3(name, body) {
          return new Entity(name, body);
        };
        function Entity(name, body) {
          this.name = name;
          this.body = body;
          this.decoders = {};
          this.encoders = {};
        }
        Entity.prototype._createNamed = function createNamed(Base) {
          const name = this.name;
          function Generated(entity) {
            this._initNamed(entity, name);
          }
          inherits(Generated, Base);
          Generated.prototype._initNamed = function _initNamed(entity, name2) {
            Base.call(this, entity, name2);
          };
          return new Generated(this);
        };
        Entity.prototype._getDecoder = function _getDecoder(enc) {
          enc = enc || "der";
          if (!this.decoders.hasOwnProperty(enc))
            this.decoders[enc] = this._createNamed(decoders[enc]);
          return this.decoders[enc];
        };
        Entity.prototype.decode = function decode(data, enc, options) {
          return this._getDecoder(enc).decode(data, options);
        };
        Entity.prototype._getEncoder = function _getEncoder(enc) {
          enc = enc || "der";
          if (!this.encoders.hasOwnProperty(enc))
            this.encoders[enc] = this._createNamed(encoders[enc]);
          return this.encoders[enc];
        };
        Entity.prototype.encode = function encode(data, enc, reporter) {
          return this._getEncoder(enc).encode(data, reporter);
        };
      }, { "./decoders": 10, "./encoders": 13, "inherits": 133 }], 3: [function(require2, module3, exports3) {
        "use strict";
        const inherits = require2("inherits");
        const Reporter = require2("../base/reporter").Reporter;
        const Buffer2 = require2("safer-buffer").Buffer;
        function DecoderBuffer(base, options) {
          Reporter.call(this, options);
          if (!Buffer2.isBuffer(base)) {
            this.error("Input not Buffer");
            return;
          }
          this.base = base;
          this.offset = 0;
          this.length = base.length;
        }
        inherits(DecoderBuffer, Reporter);
        exports3.DecoderBuffer = DecoderBuffer;
        DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
          if (data instanceof DecoderBuffer) {
            return true;
          }
          const isCompatible = typeof data === "object" && Buffer2.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
          return isCompatible;
        };
        DecoderBuffer.prototype.save = function save() {
          return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
        };
        DecoderBuffer.prototype.restore = function restore(save) {
          const res = new DecoderBuffer(this.base);
          res.offset = save.offset;
          res.length = this.offset;
          this.offset = save.offset;
          Reporter.prototype.restore.call(this, save.reporter);
          return res;
        };
        DecoderBuffer.prototype.isEmpty = function isEmpty() {
          return this.offset === this.length;
        };
        DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
          if (this.offset + 1 <= this.length)
            return this.base.readUInt8(this.offset++, true);
          else
            return this.error(fail || "DecoderBuffer overrun");
        };
        DecoderBuffer.prototype.skip = function skip(bytes, fail) {
          if (!(this.offset + bytes <= this.length))
            return this.error(fail || "DecoderBuffer overrun");
          const res = new DecoderBuffer(this.base);
          res._reporterState = this._reporterState;
          res.offset = this.offset;
          res.length = this.offset + bytes;
          this.offset += bytes;
          return res;
        };
        DecoderBuffer.prototype.raw = function raw(save) {
          return this.base.slice(save ? save.offset : this.offset, this.length);
        };
        function EncoderBuffer(value, reporter) {
          if (Array.isArray(value)) {
            this.length = 0;
            this.value = value.map(function(item) {
              if (!EncoderBuffer.isEncoderBuffer(item))
                item = new EncoderBuffer(item, reporter);
              this.length += item.length;
              return item;
            }, this);
          } else if (typeof value === "number") {
            if (!(0 <= value && value <= 255))
              return reporter.error("non-byte EncoderBuffer value");
            this.value = value;
            this.length = 1;
          } else if (typeof value === "string") {
            this.value = value;
            this.length = Buffer2.byteLength(value);
          } else if (Buffer2.isBuffer(value)) {
            this.value = value;
            this.length = value.length;
          } else {
            return reporter.error("Unsupported type: " + typeof value);
          }
        }
        exports3.EncoderBuffer = EncoderBuffer;
        EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
          if (data instanceof EncoderBuffer) {
            return true;
          }
          const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
          return isCompatible;
        };
        EncoderBuffer.prototype.join = function join(out, offset) {
          if (!out)
            out = Buffer2.alloc(this.length);
          if (!offset)
            offset = 0;
          if (this.length === 0)
            return out;
          if (Array.isArray(this.value)) {
            this.value.forEach(function(item) {
              item.join(out, offset);
              offset += item.length;
            });
          } else {
            if (typeof this.value === "number")
              out[offset] = this.value;
            else if (typeof this.value === "string")
              out.write(this.value, offset);
            else if (Buffer2.isBuffer(this.value))
              this.value.copy(out, offset);
            offset += this.length;
          }
          return out;
        };
      }, { "../base/reporter": 6, "inherits": 133, "safer-buffer": 189 }], 4: [function(require2, module3, exports3) {
        "use strict";
        const base = exports3;
        base.Reporter = require2("./reporter").Reporter;
        base.DecoderBuffer = require2("./buffer").DecoderBuffer;
        base.EncoderBuffer = require2("./buffer").EncoderBuffer;
        base.Node = require2("./node");
      }, { "./buffer": 3, "./node": 5, "./reporter": 6 }], 5: [function(require2, module3, exports3) {
        "use strict";
        const Reporter = require2("../base/reporter").Reporter;
        const EncoderBuffer = require2("../base/buffer").EncoderBuffer;
        const DecoderBuffer = require2("../base/buffer").DecoderBuffer;
        const assert = require2("minimalistic-assert");
        const tags = [
          "seq",
          "seqof",
          "set",
          "setof",
          "objid",
          "bool",
          "gentime",
          "utctime",
          "null_",
          "enum",
          "int",
          "objDesc",
          "bitstr",
          "bmpstr",
          "charstr",
          "genstr",
          "graphstr",
          "ia5str",
          "iso646str",
          "numstr",
          "octstr",
          "printstr",
          "t61str",
          "unistr",
          "utf8str",
          "videostr"
        ];
        const methods = [
          "key",
          "obj",
          "use",
          "optional",
          "explicit",
          "implicit",
          "def",
          "choice",
          "any",
          "contains"
        ].concat(tags);
        const overrided = [
          "_peekTag",
          "_decodeTag",
          "_use",
          "_decodeStr",
          "_decodeObjid",
          "_decodeTime",
          "_decodeNull",
          "_decodeInt",
          "_decodeBool",
          "_decodeList",
          "_encodeComposite",
          "_encodeStr",
          "_encodeObjid",
          "_encodeTime",
          "_encodeNull",
          "_encodeInt",
          "_encodeBool"
        ];
        function Node(enc, parent, name) {
          const state = {};
          this._baseState = state;
          state.name = name;
          state.enc = enc;
          state.parent = parent || null;
          state.children = null;
          state.tag = null;
          state.args = null;
          state.reverseArgs = null;
          state.choice = null;
          state.optional = false;
          state.any = false;
          state.obj = false;
          state.use = null;
          state.useDecoder = null;
          state.key = null;
          state["default"] = null;
          state.explicit = null;
          state.implicit = null;
          state.contains = null;
          if (!state.parent) {
            state.children = [];
            this._wrap();
          }
        }
        module3.exports = Node;
        const stateProps = [
          "enc",
          "parent",
          "children",
          "tag",
          "args",
          "reverseArgs",
          "choice",
          "optional",
          "any",
          "obj",
          "use",
          "alteredUse",
          "key",
          "default",
          "explicit",
          "implicit",
          "contains"
        ];
        Node.prototype.clone = function clone() {
          const state = this._baseState;
          const cstate = {};
          stateProps.forEach(function(prop) {
            cstate[prop] = state[prop];
          });
          const res = new this.constructor(cstate.parent);
          res._baseState = cstate;
          return res;
        };
        Node.prototype._wrap = function wrap() {
          const state = this._baseState;
          methods.forEach(function(method) {
            this[method] = function _wrappedMethod() {
              const clone = new this.constructor(this);
              state.children.push(clone);
              return clone[method].apply(clone, arguments);
            };
          }, this);
        };
        Node.prototype._init = function init(body) {
          const state = this._baseState;
          assert(state.parent === null);
          body.call(this);
          state.children = state.children.filter(function(child) {
            return child._baseState.parent === this;
          }, this);
          assert.equal(state.children.length, 1, "Root node can have only one child");
        };
        Node.prototype._useArgs = function useArgs(args) {
          const state = this._baseState;
          const children = args.filter(function(arg) {
            return arg instanceof this.constructor;
          }, this);
          args = args.filter(function(arg) {
            return !(arg instanceof this.constructor);
          }, this);
          if (children.length !== 0) {
            assert(state.children === null);
            state.children = children;
            children.forEach(function(child) {
              child._baseState.parent = this;
            }, this);
          }
          if (args.length !== 0) {
            assert(state.args === null);
            state.args = args;
            state.reverseArgs = args.map(function(arg) {
              if (typeof arg !== "object" || arg.constructor !== Object)
                return arg;
              const res = {};
              Object.keys(arg).forEach(function(key) {
                if (key == (key | 0))
                  key |= 0;
                const value = arg[key];
                res[value] = key;
              });
              return res;
            });
          }
        };
        overrided.forEach(function(method) {
          Node.prototype[method] = function _overrided() {
            const state = this._baseState;
            throw new Error(method + " not implemented for encoding: " + state.enc);
          };
        });
        tags.forEach(function(tag) {
          Node.prototype[tag] = function _tagMethod() {
            const state = this._baseState;
            const args = Array.prototype.slice.call(arguments);
            assert(state.tag === null);
            state.tag = tag;
            this._useArgs(args);
            return this;
          };
        });
        Node.prototype.use = function use(item) {
          assert(item);
          const state = this._baseState;
          assert(state.use === null);
          state.use = item;
          return this;
        };
        Node.prototype.optional = function optional() {
          const state = this._baseState;
          state.optional = true;
          return this;
        };
        Node.prototype.def = function def(val) {
          const state = this._baseState;
          assert(state["default"] === null);
          state["default"] = val;
          state.optional = true;
          return this;
        };
        Node.prototype.explicit = function explicit(num) {
          const state = this._baseState;
          assert(state.explicit === null && state.implicit === null);
          state.explicit = num;
          return this;
        };
        Node.prototype.implicit = function implicit(num) {
          const state = this._baseState;
          assert(state.explicit === null && state.implicit === null);
          state.implicit = num;
          return this;
        };
        Node.prototype.obj = function obj() {
          const state = this._baseState;
          const args = Array.prototype.slice.call(arguments);
          state.obj = true;
          if (args.length !== 0)
            this._useArgs(args);
          return this;
        };
        Node.prototype.key = function key(newKey) {
          const state = this._baseState;
          assert(state.key === null);
          state.key = newKey;
          return this;
        };
        Node.prototype.any = function any() {
          const state = this._baseState;
          state.any = true;
          return this;
        };
        Node.prototype.choice = function choice(obj) {
          const state = this._baseState;
          assert(state.choice === null);
          state.choice = obj;
          this._useArgs(Object.keys(obj).map(function(key) {
            return obj[key];
          }));
          return this;
        };
        Node.prototype.contains = function contains(item) {
          const state = this._baseState;
          assert(state.use === null);
          state.contains = item;
          return this;
        };
        Node.prototype._decode = function decode(input, options) {
          const state = this._baseState;
          if (state.parent === null)
            return input.wrapResult(state.children[0]._decode(input, options));
          let result = state["default"];
          let present = true;
          let prevKey = null;
          if (state.key !== null)
            prevKey = input.enterKey(state.key);
          if (state.optional) {
            let tag = null;
            if (state.explicit !== null)
              tag = state.explicit;
            else if (state.implicit !== null)
              tag = state.implicit;
            else if (state.tag !== null)
              tag = state.tag;
            if (tag === null && !state.any) {
              const save = input.save();
              try {
                if (state.choice === null)
                  this._decodeGeneric(state.tag, input, options);
                else
                  this._decodeChoice(input, options);
                present = true;
              } catch (e) {
                present = false;
              }
              input.restore(save);
            } else {
              present = this._peekTag(input, tag, state.any);
              if (input.isError(present))
                return present;
            }
          }
          let prevObj;
          if (state.obj && present)
            prevObj = input.enterObject();
          if (present) {
            if (state.explicit !== null) {
              const explicit = this._decodeTag(input, state.explicit);
              if (input.isError(explicit))
                return explicit;
              input = explicit;
            }
            const start = input.offset;
            if (state.use === null && state.choice === null) {
              let save;
              if (state.any)
                save = input.save();
              const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
              if (input.isError(body))
                return body;
              if (state.any)
                result = input.raw(save);
              else
                input = body;
            }
            if (options && options.track && state.tag !== null)
              options.track(input.path(), start, input.length, "tagged");
            if (options && options.track && state.tag !== null)
              options.track(input.path(), input.offset, input.length, "content");
            if (state.any) {
            } else if (state.choice === null) {
              result = this._decodeGeneric(state.tag, input, options);
            } else {
              result = this._decodeChoice(input, options);
            }
            if (input.isError(result))
              return result;
            if (!state.any && state.choice === null && state.children !== null) {
              state.children.forEach(function decodeChildren(child) {
                child._decode(input, options);
              });
            }
            if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
              const data = new DecoderBuffer(result);
              result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
            }
          }
          if (state.obj && present)
            result = input.leaveObject(prevObj);
          if (state.key !== null && (result !== null || present === true))
            input.leaveKey(prevKey, state.key, result);
          else if (prevKey !== null)
            input.exitKey(prevKey);
          return result;
        };
        Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
          const state = this._baseState;
          if (tag === "seq" || tag === "set")
            return null;
          if (tag === "seqof" || tag === "setof")
            return this._decodeList(input, tag, state.args[0], options);
          else if (/str$/.test(tag))
            return this._decodeStr(input, tag, options);
          else if (tag === "objid" && state.args)
            return this._decodeObjid(input, state.args[0], state.args[1], options);
          else if (tag === "objid")
            return this._decodeObjid(input, null, null, options);
          else if (tag === "gentime" || tag === "utctime")
            return this._decodeTime(input, tag, options);
          else if (tag === "null_")
            return this._decodeNull(input, options);
          else if (tag === "bool")
            return this._decodeBool(input, options);
          else if (tag === "objDesc")
            return this._decodeStr(input, tag, options);
          else if (tag === "int" || tag === "enum")
            return this._decodeInt(input, state.args && state.args[0], options);
          if (state.use !== null) {
            return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
          } else {
            return input.error("unknown tag: " + tag);
          }
        };
        Node.prototype._getUse = function _getUse(entity, obj) {
          const state = this._baseState;
          state.useDecoder = this._use(entity, obj);
          assert(state.useDecoder._baseState.parent === null);
          state.useDecoder = state.useDecoder._baseState.children[0];
          if (state.implicit !== state.useDecoder._baseState.implicit) {
            state.useDecoder = state.useDecoder.clone();
            state.useDecoder._baseState.implicit = state.implicit;
          }
          return state.useDecoder;
        };
        Node.prototype._decodeChoice = function decodeChoice(input, options) {
          const state = this._baseState;
          let result = null;
          let match = false;
          Object.keys(state.choice).some(function(key) {
            const save = input.save();
            const node = state.choice[key];
            try {
              const value = node._decode(input, options);
              if (input.isError(value))
                return false;
              result = { type: key, value };
              match = true;
            } catch (e) {
              input.restore(save);
              return false;
            }
            return true;
          }, this);
          if (!match)
            return input.error("Choice not matched");
          return result;
        };
        Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
          return new EncoderBuffer(data, this.reporter);
        };
        Node.prototype._encode = function encode(data, reporter, parent) {
          const state = this._baseState;
          if (state["default"] !== null && state["default"] === data)
            return;
          const result = this._encodeValue(data, reporter, parent);
          if (result === void 0)
            return;
          if (this._skipDefault(result, reporter, parent))
            return;
          return result;
        };
        Node.prototype._encodeValue = function encode(data, reporter, parent) {
          const state = this._baseState;
          if (state.parent === null)
            return state.children[0]._encode(data, reporter || new Reporter());
          let result = null;
          this.reporter = reporter;
          if (state.optional && data === void 0) {
            if (state["default"] !== null)
              data = state["default"];
            else
              return;
          }
          let content = null;
          let primitive = false;
          if (state.any) {
            result = this._createEncoderBuffer(data);
          } else if (state.choice) {
            result = this._encodeChoice(data, reporter);
          } else if (state.contains) {
            content = this._getUse(state.contains, parent)._encode(data, reporter);
            primitive = true;
          } else if (state.children) {
            content = state.children.map(function(child) {
              if (child._baseState.tag === "null_")
                return child._encode(null, reporter, data);
              if (child._baseState.key === null)
                return reporter.error("Child should have a key");
              const prevKey = reporter.enterKey(child._baseState.key);
              if (typeof data !== "object")
                return reporter.error("Child expected, but input is not object");
              const res = child._encode(data[child._baseState.key], reporter, data);
              reporter.leaveKey(prevKey);
              return res;
            }, this).filter(function(child) {
              return child;
            });
            content = this._createEncoderBuffer(content);
          } else {
            if (state.tag === "seqof" || state.tag === "setof") {
              if (!(state.args && state.args.length === 1))
                return reporter.error("Too many args for : " + state.tag);
              if (!Array.isArray(data))
                return reporter.error("seqof/setof, but data is not Array");
              const child = this.clone();
              child._baseState.implicit = null;
              content = this._createEncoderBuffer(data.map(function(item) {
                const state2 = this._baseState;
                return this._getUse(state2.args[0], data)._encode(item, reporter);
              }, child));
            } else if (state.use !== null) {
              result = this._getUse(state.use, parent)._encode(data, reporter);
            } else {
              content = this._encodePrimitive(state.tag, data);
              primitive = true;
            }
          }
          if (!state.any && state.choice === null) {
            const tag = state.implicit !== null ? state.implicit : state.tag;
            const cls = state.implicit === null ? "universal" : "context";
            if (tag === null) {
              if (state.use === null)
                reporter.error("Tag could be omitted only for .use()");
            } else {
              if (state.use === null)
                result = this._encodeComposite(tag, primitive, cls, content);
            }
          }
          if (state.explicit !== null)
            result = this._encodeComposite(state.explicit, false, "context", result);
          return result;
        };
        Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
          const state = this._baseState;
          const node = state.choice[data.type];
          if (!node) {
            assert(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
          }
          return node._encode(data.value, reporter);
        };
        Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
          const state = this._baseState;
          if (/str$/.test(tag))
            return this._encodeStr(data, tag);
          else if (tag === "objid" && state.args)
            return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
          else if (tag === "objid")
            return this._encodeObjid(data, null, null);
          else if (tag === "gentime" || tag === "utctime")
            return this._encodeTime(data, tag);
          else if (tag === "null_")
            return this._encodeNull();
          else if (tag === "int" || tag === "enum")
            return this._encodeInt(data, state.args && state.reverseArgs[0]);
          else if (tag === "bool")
            return this._encodeBool(data);
          else if (tag === "objDesc")
            return this._encodeStr(data, tag);
          else
            throw new Error("Unsupported tag: " + tag);
        };
        Node.prototype._isNumstr = function isNumstr(str) {
          return /^[0-9 ]*$/.test(str);
        };
        Node.prototype._isPrintstr = function isPrintstr(str) {
          return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
        };
      }, { "../base/buffer": 3, "../base/reporter": 6, "minimalistic-assert": 137 }], 6: [function(require2, module3, exports3) {
        "use strict";
        const inherits = require2("inherits");
        function Reporter(options) {
          this._reporterState = {
            obj: null,
            path: [],
            options: options || {},
            errors: []
          };
        }
        exports3.Reporter = Reporter;
        Reporter.prototype.isError = function isError(obj) {
          return obj instanceof ReporterError;
        };
        Reporter.prototype.save = function save() {
          const state = this._reporterState;
          return { obj: state.obj, pathLen: state.path.length };
        };
        Reporter.prototype.restore = function restore(data) {
          const state = this._reporterState;
          state.obj = data.obj;
          state.path = state.path.slice(0, data.pathLen);
        };
        Reporter.prototype.enterKey = function enterKey(key) {
          return this._reporterState.path.push(key);
        };
        Reporter.prototype.exitKey = function exitKey(index) {
          const state = this._reporterState;
          state.path = state.path.slice(0, index - 1);
        };
        Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
          const state = this._reporterState;
          this.exitKey(index);
          if (state.obj !== null)
            state.obj[key] = value;
        };
        Reporter.prototype.path = function path() {
          return this._reporterState.path.join("/");
        };
        Reporter.prototype.enterObject = function enterObject() {
          const state = this._reporterState;
          const prev = state.obj;
          state.obj = {};
          return prev;
        };
        Reporter.prototype.leaveObject = function leaveObject(prev) {
          const state = this._reporterState;
          const now = state.obj;
          state.obj = prev;
          return now;
        };
        Reporter.prototype.error = function error(msg) {
          let err;
          const state = this._reporterState;
          const inherited = msg instanceof ReporterError;
          if (inherited) {
            err = msg;
          } else {
            err = new ReporterError(state.path.map(function(elem) {
              return "[" + JSON.stringify(elem) + "]";
            }).join(""), msg.message || msg, msg.stack);
          }
          if (!state.options.partial)
            throw err;
          if (!inherited)
            state.errors.push(err);
          return err;
        };
        Reporter.prototype.wrapResult = function wrapResult(result) {
          const state = this._reporterState;
          if (!state.options.partial)
            return result;
          return {
            result: this.isError(result) ? null : result,
            errors: state.errors
          };
        };
        function ReporterError(path, msg) {
          this.path = path;
          this.rethrow(msg);
        }
        inherits(ReporterError, Error);
        ReporterError.prototype.rethrow = function rethrow(msg) {
          this.message = msg + " at: " + (this.path || "(shallow)");
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, ReporterError);
          if (!this.stack) {
            try {
              throw new Error(this.message);
            } catch (e) {
              this.stack = e.stack;
            }
          }
          return this;
        };
      }, { "inherits": 133 }], 7: [function(require2, module3, exports3) {
        "use strict";
        function reverse(map) {
          const res = {};
          Object.keys(map).forEach(function(key) {
            if ((key | 0) == key)
              key = key | 0;
            const value = map[key];
            res[value] = key;
          });
          return res;
        }
        exports3.tagClass = {
          0: "universal",
          1: "application",
          2: "context",
          3: "private"
        };
        exports3.tagClassByName = reverse(exports3.tagClass);
        exports3.tag = {
          0: "end",
          1: "bool",
          2: "int",
          3: "bitstr",
          4: "octstr",
          5: "null_",
          6: "objid",
          7: "objDesc",
          8: "external",
          9: "real",
          10: "enum",
          11: "embed",
          12: "utf8str",
          13: "relativeOid",
          16: "seq",
          17: "set",
          18: "numstr",
          19: "printstr",
          20: "t61str",
          21: "videostr",
          22: "ia5str",
          23: "utctime",
          24: "gentime",
          25: "graphstr",
          26: "iso646str",
          27: "genstr",
          28: "unistr",
          29: "charstr",
          30: "bmpstr"
        };
        exports3.tagByName = reverse(exports3.tag);
      }, {}], 8: [function(require2, module3, exports3) {
        "use strict";
        const constants = exports3;
        constants._reverse = function reverse(map) {
          const res = {};
          Object.keys(map).forEach(function(key) {
            if ((key | 0) == key)
              key = key | 0;
            const value = map[key];
            res[value] = key;
          });
          return res;
        };
        constants.der = require2("./der");
      }, { "./der": 7 }], 9: [function(require2, module3, exports3) {
        "use strict";
        const inherits = require2("inherits");
        const bignum = require2("bn.js");
        const DecoderBuffer = require2("../base/buffer").DecoderBuffer;
        const Node = require2("../base/node");
        const der = require2("../constants/der");
        function DERDecoder(entity) {
          this.enc = "der";
          this.name = entity.name;
          this.entity = entity;
          this.tree = new DERNode();
          this.tree._init(entity.body);
        }
        module3.exports = DERDecoder;
        DERDecoder.prototype.decode = function decode(data, options) {
          if (!DecoderBuffer.isDecoderBuffer(data)) {
            data = new DecoderBuffer(data, options);
          }
          return this.tree._decode(data, options);
        };
        function DERNode(parent) {
          Node.call(this, "der", parent);
        }
        inherits(DERNode, Node);
        DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
          if (buffer.isEmpty())
            return false;
          const state = buffer.save();
          const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
          if (buffer.isError(decodedTag))
            return decodedTag;
          buffer.restore(state);
          return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
        };
        DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
          const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
          if (buffer.isError(decodedTag))
            return decodedTag;
          let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
          if (buffer.isError(len))
            return len;
          if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
            return buffer.error('Failed to match tag: "' + tag + '"');
          }
          if (decodedTag.primitive || len !== null)
            return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
          const state = buffer.save();
          const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
          if (buffer.isError(res))
            return res;
          len = buffer.offset - state.offset;
          buffer.restore(state);
          return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
        };
        DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
          for (; ; ) {
            const tag = derDecodeTag(buffer, fail);
            if (buffer.isError(tag))
              return tag;
            const len = derDecodeLen(buffer, tag.primitive, fail);
            if (buffer.isError(len))
              return len;
            let res;
            if (tag.primitive || len !== null)
              res = buffer.skip(len);
            else
              res = this._skipUntilEnd(buffer, fail);
            if (buffer.isError(res))
              return res;
            if (tag.tagStr === "end")
              break;
          }
        };
        DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
          const result = [];
          while (!buffer.isEmpty()) {
            const possibleEnd = this._peekTag(buffer, "end");
            if (buffer.isError(possibleEnd))
              return possibleEnd;
            const res = decoder.decode(buffer, "der", options);
            if (buffer.isError(res) && possibleEnd)
              break;
            result.push(res);
          }
          return result;
        };
        DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
          if (tag === "bitstr") {
            const unused = buffer.readUInt8();
            if (buffer.isError(unused))
              return unused;
            return { unused, data: buffer.raw() };
          } else if (tag === "bmpstr") {
            const raw = buffer.raw();
            if (raw.length % 2 === 1)
              return buffer.error("Decoding of string type: bmpstr length mismatch");
            let str = "";
            for (let i = 0; i < raw.length / 2; i++) {
              str += String.fromCharCode(raw.readUInt16BE(i * 2));
            }
            return str;
          } else if (tag === "numstr") {
            const numstr = buffer.raw().toString("ascii");
            if (!this._isNumstr(numstr)) {
              return buffer.error("Decoding of string type: numstr unsupported characters");
            }
            return numstr;
          } else if (tag === "octstr") {
            return buffer.raw();
          } else if (tag === "objDesc") {
            return buffer.raw();
          } else if (tag === "printstr") {
            const printstr = buffer.raw().toString("ascii");
            if (!this._isPrintstr(printstr)) {
              return buffer.error("Decoding of string type: printstr unsupported characters");
            }
            return printstr;
          } else if (/str$/.test(tag)) {
            return buffer.raw().toString();
          } else {
            return buffer.error("Decoding of string type: " + tag + " unsupported");
          }
        };
        DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
          let result;
          const identifiers = [];
          let ident = 0;
          let subident = 0;
          while (!buffer.isEmpty()) {
            subident = buffer.readUInt8();
            ident <<= 7;
            ident |= subident & 127;
            if ((subident & 128) === 0) {
              identifiers.push(ident);
              ident = 0;
            }
          }
          if (subident & 128)
            identifiers.push(ident);
          const first = identifiers[0] / 40 | 0;
          const second = identifiers[0] % 40;
          if (relative)
            result = identifiers;
          else
            result = [first, second].concat(identifiers.slice(1));
          if (values) {
            let tmp = values[result.join(" ")];
            if (tmp === void 0)
              tmp = values[result.join(".")];
            if (tmp !== void 0)
              result = tmp;
          }
          return result;
        };
        DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
          const str = buffer.raw().toString();
          let year;
          let mon;
          let day;
          let hour;
          let min;
          let sec;
          if (tag === "gentime") {
            year = str.slice(0, 4) | 0;
            mon = str.slice(4, 6) | 0;
            day = str.slice(6, 8) | 0;
            hour = str.slice(8, 10) | 0;
            min = str.slice(10, 12) | 0;
            sec = str.slice(12, 14) | 0;
          } else if (tag === "utctime") {
            year = str.slice(0, 2) | 0;
            mon = str.slice(2, 4) | 0;
            day = str.slice(4, 6) | 0;
            hour = str.slice(6, 8) | 0;
            min = str.slice(8, 10) | 0;
            sec = str.slice(10, 12) | 0;
            if (year < 70)
              year = 2e3 + year;
            else
              year = 1900 + year;
          } else {
            return buffer.error("Decoding " + tag + " time is not supported yet");
          }
          return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
        };
        DERNode.prototype._decodeNull = function decodeNull() {
          return null;
        };
        DERNode.prototype._decodeBool = function decodeBool(buffer) {
          const res = buffer.readUInt8();
          if (buffer.isError(res))
            return res;
          else
            return res !== 0;
        };
        DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
          const raw = buffer.raw();
          let res = new bignum(raw);
          if (values)
            res = values[res.toString(10)] || res;
          return res;
        };
        DERNode.prototype._use = function use(entity, obj) {
          if (typeof entity === "function")
            entity = entity(obj);
          return entity._getDecoder("der").tree;
        };
        function derDecodeTag(buf, fail) {
          let tag = buf.readUInt8(fail);
          if (buf.isError(tag))
            return tag;
          const cls = der.tagClass[tag >> 6];
          const primitive = (tag & 32) === 0;
          if ((tag & 31) === 31) {
            let oct = tag;
            tag = 0;
            while ((oct & 128) === 128) {
              oct = buf.readUInt8(fail);
              if (buf.isError(oct))
                return oct;
              tag <<= 7;
              tag |= oct & 127;
            }
          } else {
            tag &= 31;
          }
          const tagStr = der.tag[tag];
          return {
            cls,
            primitive,
            tag,
            tagStr
          };
        }
        function derDecodeLen(buf, primitive, fail) {
          let len = buf.readUInt8(fail);
          if (buf.isError(len))
            return len;
          if (!primitive && len === 128)
            return null;
          if ((len & 128) === 0) {
            return len;
          }
          const num = len & 127;
          if (num > 4)
            return buf.error("length octect is too long");
          len = 0;
          for (let i = 0; i < num; i++) {
            len <<= 8;
            const j = buf.readUInt8(fail);
            if (buf.isError(j))
              return j;
            len |= j;
          }
          return len;
        }
      }, { "../base/buffer": 3, "../base/node": 5, "../constants/der": 7, "bn.js": 15, "inherits": 133 }], 10: [function(require2, module3, exports3) {
        "use strict";
        const decoders = exports3;
        decoders.der = require2("./der");
        decoders.pem = require2("./pem");
      }, { "./der": 9, "./pem": 11 }], 11: [function(require2, module3, exports3) {
        "use strict";
        const inherits = require2("inherits");
        const Buffer2 = require2("safer-buffer").Buffer;
        const DERDecoder = require2("./der");
        function PEMDecoder(entity) {
          DERDecoder.call(this, entity);
          this.enc = "pem";
        }
        inherits(PEMDecoder, DERDecoder);
        module3.exports = PEMDecoder;
        PEMDecoder.prototype.decode = function decode(data, options) {
          const lines = data.toString().split(/[\r\n]+/g);
          const label = options.label.toUpperCase();
          const re = /^-----(BEGIN|END) ([^-]+)-----$/;
          let start = -1;
          let end = -1;
          for (let i = 0; i < lines.length; i++) {
            const match = lines[i].match(re);
            if (match === null)
              continue;
            if (match[2] !== label)
              continue;
            if (start === -1) {
              if (match[1] !== "BEGIN")
                break;
              start = i;
            } else {
              if (match[1] !== "END")
                break;
              end = i;
              break;
            }
          }
          if (start === -1 || end === -1)
            throw new Error("PEM section not found for: " + label);
          const base64 = lines.slice(start + 1, end).join("");
          base64.replace(/[^a-z0-9+/=]+/gi, "");
          const input = Buffer2.from(base64, "base64");
          return DERDecoder.prototype.decode.call(this, input, options);
        };
      }, { "./der": 9, "inherits": 133, "safer-buffer": 189 }], 12: [function(require2, module3, exports3) {
        "use strict";
        const inherits = require2("inherits");
        const Buffer2 = require2("safer-buffer").Buffer;
        const Node = require2("../base/node");
        const der = require2("../constants/der");
        function DEREncoder(entity) {
          this.enc = "der";
          this.name = entity.name;
          this.entity = entity;
          this.tree = new DERNode();
          this.tree._init(entity.body);
        }
        module3.exports = DEREncoder;
        DEREncoder.prototype.encode = function encode(data, reporter) {
          return this.tree._encode(data, reporter).join();
        };
        function DERNode(parent) {
          Node.call(this, "der", parent);
        }
        inherits(DERNode, Node);
        DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
          const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
          if (content.length < 128) {
            const header2 = Buffer2.alloc(2);
            header2[0] = encodedTag;
            header2[1] = content.length;
            return this._createEncoderBuffer([header2, content]);
          }
          let lenOctets = 1;
          for (let i = content.length; i >= 256; i >>= 8)
            lenOctets++;
          const header = Buffer2.alloc(1 + 1 + lenOctets);
          header[0] = encodedTag;
          header[1] = 128 | lenOctets;
          for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
            header[i] = j & 255;
          return this._createEncoderBuffer([header, content]);
        };
        DERNode.prototype._encodeStr = function encodeStr(str, tag) {
          if (tag === "bitstr") {
            return this._createEncoderBuffer([str.unused | 0, str.data]);
          } else if (tag === "bmpstr") {
            const buf = Buffer2.alloc(str.length * 2);
            for (let i = 0; i < str.length; i++) {
              buf.writeUInt16BE(str.charCodeAt(i), i * 2);
            }
            return this._createEncoderBuffer(buf);
          } else if (tag === "numstr") {
            if (!this._isNumstr(str)) {
              return this.reporter.error("Encoding of string type: numstr supports only digits and space");
            }
            return this._createEncoderBuffer(str);
          } else if (tag === "printstr") {
            if (!this._isPrintstr(str)) {
              return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
            }
            return this._createEncoderBuffer(str);
          } else if (/str$/.test(tag)) {
            return this._createEncoderBuffer(str);
          } else if (tag === "objDesc") {
            return this._createEncoderBuffer(str);
          } else {
            return this.reporter.error("Encoding of string type: " + tag + " unsupported");
          }
        };
        DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
          if (typeof id === "string") {
            if (!values)
              return this.reporter.error("string objid given, but no values map found");
            if (!values.hasOwnProperty(id))
              return this.reporter.error("objid not found in values map");
            id = values[id].split(/[\s.]+/g);
            for (let i = 0; i < id.length; i++)
              id[i] |= 0;
          } else if (Array.isArray(id)) {
            id = id.slice();
            for (let i = 0; i < id.length; i++)
              id[i] |= 0;
          }
          if (!Array.isArray(id)) {
            return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
          }
          if (!relative) {
            if (id[1] >= 40)
              return this.reporter.error("Second objid identifier OOB");
            id.splice(0, 2, id[0] * 40 + id[1]);
          }
          let size = 0;
          for (let i = 0; i < id.length; i++) {
            let ident = id[i];
            for (size++; ident >= 128; ident >>= 7)
              size++;
          }
          const objid = Buffer2.alloc(size);
          let offset = objid.length - 1;
          for (let i = id.length - 1; i >= 0; i--) {
            let ident = id[i];
            objid[offset--] = ident & 127;
            while ((ident >>= 7) > 0)
              objid[offset--] = 128 | ident & 127;
          }
          return this._createEncoderBuffer(objid);
        };
        function two(num) {
          if (num < 10)
            return "0" + num;
          else
            return num;
        }
        DERNode.prototype._encodeTime = function encodeTime(time, tag) {
          let str;
          const date = new Date(time);
          if (tag === "gentime") {
            str = [
              two(date.getUTCFullYear()),
              two(date.getUTCMonth() + 1),
              two(date.getUTCDate()),
              two(date.getUTCHours()),
              two(date.getUTCMinutes()),
              two(date.getUTCSeconds()),
              "Z"
            ].join("");
          } else if (tag === "utctime") {
            str = [
              two(date.getUTCFullYear() % 100),
              two(date.getUTCMonth() + 1),
              two(date.getUTCDate()),
              two(date.getUTCHours()),
              two(date.getUTCMinutes()),
              two(date.getUTCSeconds()),
              "Z"
            ].join("");
          } else {
            this.reporter.error("Encoding " + tag + " time is not supported yet");
          }
          return this._encodeStr(str, "octstr");
        };
        DERNode.prototype._encodeNull = function encodeNull() {
          return this._createEncoderBuffer("");
        };
        DERNode.prototype._encodeInt = function encodeInt(num, values) {
          if (typeof num === "string") {
            if (!values)
              return this.reporter.error("String int or enum given, but no values map");
            if (!values.hasOwnProperty(num)) {
              return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
            }
            num = values[num];
          }
          if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
            const numArray = num.toArray();
            if (!num.sign && numArray[0] & 128) {
              numArray.unshift(0);
            }
            num = Buffer2.from(numArray);
          }
          if (Buffer2.isBuffer(num)) {
            let size2 = num.length;
            if (num.length === 0)
              size2++;
            const out2 = Buffer2.alloc(size2);
            num.copy(out2);
            if (num.length === 0)
              out2[0] = 0;
            return this._createEncoderBuffer(out2);
          }
          if (num < 128)
            return this._createEncoderBuffer(num);
          if (num < 256)
            return this._createEncoderBuffer([0, num]);
          let size = 1;
          for (let i = num; i >= 256; i >>= 8)
            size++;
          const out = new Array(size);
          for (let i = out.length - 1; i >= 0; i--) {
            out[i] = num & 255;
            num >>= 8;
          }
          if (out[0] & 128) {
            out.unshift(0);
          }
          return this._createEncoderBuffer(Buffer2.from(out));
        };
        DERNode.prototype._encodeBool = function encodeBool(value) {
          return this._createEncoderBuffer(value ? 255 : 0);
        };
        DERNode.prototype._use = function use(entity, obj) {
          if (typeof entity === "function")
            entity = entity(obj);
          return entity._getEncoder("der").tree;
        };
        DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
          const state = this._baseState;
          let i;
          if (state["default"] === null)
            return false;
          const data = dataBuffer.join();
          if (state.defaultBuffer === void 0)
            state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
          if (data.length !== state.defaultBuffer.length)
            return false;
          for (i = 0; i < data.length; i++)
            if (data[i] !== state.defaultBuffer[i])
              return false;
          return true;
        };
        function encodeTag(tag, primitive, cls, reporter) {
          let res;
          if (tag === "seqof")
            tag = "seq";
          else if (tag === "setof")
            tag = "set";
          if (der.tagByName.hasOwnProperty(tag))
            res = der.tagByName[tag];
          else if (typeof tag === "number" && (tag | 0) === tag)
            res = tag;
          else
            return reporter.error("Unknown tag: " + tag);
          if (res >= 31)
            return reporter.error("Multi-octet tag encoding unsupported");
          if (!primitive)
            res |= 32;
          res |= der.tagClassByName[cls || "universal"] << 6;
          return res;
        }
      }, { "../base/node": 5, "../constants/der": 7, "inherits": 133, "safer-buffer": 189 }], 13: [function(require2, module3, exports3) {
        "use strict";
        const encoders = exports3;
        encoders.der = require2("./der");
        encoders.pem = require2("./pem");
      }, { "./der": 12, "./pem": 14 }], 14: [function(require2, module3, exports3) {
        "use strict";
        const inherits = require2("inherits");
        const DEREncoder = require2("./der");
        function PEMEncoder(entity) {
          DEREncoder.call(this, entity);
          this.enc = "pem";
        }
        inherits(PEMEncoder, DEREncoder);
        module3.exports = PEMEncoder;
        PEMEncoder.prototype.encode = function encode(data, options) {
          const buf = DEREncoder.prototype.encode.call(this, data);
          const p = buf.toString("base64");
          const out = ["-----BEGIN " + options.label + "-----"];
          for (let i = 0; i < p.length; i += 64)
            out.push(p.slice(i, i + 64));
          out.push("-----END " + options.label + "-----");
          return out.join("\n");
        };
      }, { "./der": 12, "inherits": 133 }], 15: [function(require2, module3, exports3) {
        (function(module4, exports4) {
          "use strict";
          function assert(val, msg) {
            if (!val)
              throw new Error(msg || "Assertion failed");
          }
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }
            this.negative = 0;
            this.words = null;
            this.length = 0;
            this.red = null;
            if (number !== null) {
              if (base === "le" || base === "be") {
                endian = base;
                base = 10;
              }
              this._init(number || 0, base || 10, endian || "be");
            }
          }
          if (typeof module4 === "object") {
            module4.exports = BN;
          } else {
            exports4.BN = BN;
          }
          BN.BN = BN;
          BN.wordSize = 26;
          var Buffer2;
          try {
            if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
              Buffer2 = window.Buffer;
            } else {
              Buffer2 = require2("buffer").Buffer;
            }
          } catch (e) {
          }
          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }
            return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };
          BN.max = function max(left, right) {
            if (left.cmp(right) > 0)
              return left;
            return right;
          };
          BN.min = function min(left, right) {
            if (left.cmp(right) < 0)
              return left;
            return right;
          };
          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === "number") {
              return this._initNumber(number, base, endian);
            }
            if (typeof number === "object") {
              return this._initArray(number, base, endian);
            }
            if (base === "hex") {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);
            number = number.toString().replace(/\s+/g, "");
            var start = 0;
            if (number[0] === "-") {
              start++;
              this.negative = 1;
            }
            if (start < number.length) {
              if (base === 16) {
                this._parseHex(number, start, endian);
              } else {
                this._parseBase(number, base, start);
                if (endian === "le") {
                  this._initArray(this.toArray(), base, endian);
                }
              }
            }
          };
          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 67108864) {
              this.words = [number & 67108863];
              this.length = 1;
            } else if (number < 4503599627370496) {
              this.words = [
                number & 67108863,
                number / 67108864 & 67108863
              ];
              this.length = 2;
            } else {
              assert(number < 9007199254740992);
              this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
              ];
              this.length = 3;
            }
            if (endian !== "le")
              return;
            this._initArray(this.toArray(), base, endian);
          };
          BN.prototype._initArray = function _initArray(number, base, endian) {
            assert(typeof number.length === "number");
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }
            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }
            var j, w;
            var off = 0;
            if (endian === "be") {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                this.words[j] |= w << off & 67108863;
                this.words[j + 1] = w >>> 26 - off & 67108863;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === "le") {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                this.words[j] |= w << off & 67108863;
                this.words[j + 1] = w >>> 26 - off & 67108863;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };
          function parseHex4Bits(string, index) {
            var c = string.charCodeAt(index);
            if (c >= 65 && c <= 70) {
              return c - 55;
            } else if (c >= 97 && c <= 102) {
              return c - 87;
            } else {
              return c - 48 & 15;
            }
          }
          function parseHexByte(string, lowerBound, index) {
            var r = parseHex4Bits(string, index);
            if (index - 1 >= lowerBound) {
              r |= parseHex4Bits(string, index - 1) << 4;
            }
            return r;
          }
          BN.prototype._parseHex = function _parseHex(number, start, endian) {
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }
            var off = 0;
            var j = 0;
            var w;
            if (endian === "be") {
              for (i = number.length - 1; i >= start; i -= 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            } else {
              var parseLength = number.length - start;
              for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            }
            this.strip();
          };
          function parseBase(str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;
              r *= mul;
              if (c >= 49) {
                r += c - 49 + 10;
              } else if (c >= 17) {
                r += c - 17 + 10;
              } else {
                r += c;
              }
            }
            return r;
          }
          BN.prototype._parseBase = function _parseBase(number, base, start) {
            this.words = [0];
            this.length = 1;
            for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = limbPow / base | 0;
            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;
            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);
              this.imuln(limbPow);
              if (this.words[0] + word < 67108864) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);
              for (i = 0; i < mod; i++) {
                pow *= base;
              }
              this.imuln(pow);
              if (this.words[0] + word < 67108864) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            this.strip();
          };
          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };
          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };
          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };
          BN.prototype._normSign = function _normSign() {
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };
          BN.prototype.inspect = function inspect() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
          };
          var zeros = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000"
          ];
          var groupSizes = [
            0,
            0,
            25,
            16,
            12,
            11,
            10,
            9,
            8,
            8,
            7,
            7,
            7,
            7,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ];
          var groupBases = [
            0,
            0,
            33554432,
            43046721,
            16777216,
            48828125,
            60466176,
            40353607,
            16777216,
            43046721,
            1e7,
            19487171,
            35831808,
            62748517,
            7529536,
            11390625,
            16777216,
            24137569,
            34012224,
            47045881,
            64e6,
            4084101,
            5153632,
            6436343,
            7962624,
            9765625,
            11881376,
            14348907,
            17210368,
            20511149,
            243e5,
            28629151,
            33554432,
            39135393,
            45435424,
            52521875,
            60466176
          ];
          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;
            var out;
            if (base === 16 || base === "hex") {
              out = "";
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = "0" + out;
              }
              if (this.negative !== 0) {
                out = "-" + out;
              }
              return out;
            }
            if (base === (base | 0) && base >= 2 && base <= 36) {
              var groupSize = groupSizes[base];
              var groupBase = groupBases[base];
              out = "";
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = "0" + out;
              }
              while (out.length % padding !== 0) {
                out = "0" + out;
              }
              if (this.negative !== 0) {
                out = "-" + out;
              }
              return out;
            }
            assert(false, "Base should be between 2 and 36");
          };
          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 67108864;
            } else if (this.length === 3 && this.words[2] === 1) {
              ret += 4503599627370496 + this.words[1] * 67108864;
            } else if (this.length > 2) {
              assert(false, "Number can only safely store up to 53 bits");
            }
            return this.negative !== 0 ? -ret : ret;
          };
          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };
          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert(typeof Buffer2 !== "undefined");
            return this.toArrayLike(Buffer2, endian, length);
          };
          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };
          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, "byte array longer than desired length");
            assert(reqLength > 0, "Requested array length <= 0");
            this.strip();
            var littleEndian = endian === "le";
            var res = new ArrayType(reqLength);
            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
              }
              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }
            return res;
          };
          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 4096) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 64) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 2) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }
          BN.prototype._zeroBits = function _zeroBits(w) {
            if (w === 0)
              return 26;
            var t = w;
            var r = 0;
            if ((t & 8191) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 127) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 15) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 1) === 0) {
              r++;
            }
            return r;
          };
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };
          function toBitArray(num) {
            var w = new Array(num.bitLength());
            for (var bit = 0; bit < w.length; bit++) {
              var off = bit / 26 | 0;
              var wbit = bit % 26;
              w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
            }
            return w;
          }
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero())
              return 0;
            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26)
                break;
            }
            return r;
          };
          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };
          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };
          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };
          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };
          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }
            return this;
          };
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }
            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }
            return this.strip();
          };
          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };
          BN.prototype.or = function or(num) {
            if (this.length > num.length)
              return this.clone().ior(num);
            return num.clone().ior(this);
          };
          BN.prototype.uor = function uor(num) {
            if (this.length > num.length)
              return this.clone().iuor(num);
            return num.clone().iuor(this);
          };
          BN.prototype.iuand = function iuand(num) {
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }
            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }
            this.length = b.length;
            return this.strip();
          };
          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };
          BN.prototype.and = function and(num) {
            if (this.length > num.length)
              return this.clone().iand(num);
            return num.clone().iand(this);
          };
          BN.prototype.uand = function uand(num) {
            if (this.length > num.length)
              return this.clone().iuand(num);
            return num.clone().iuand(this);
          };
          BN.prototype.iuxor = function iuxor(num) {
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }
            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            this.length = a.length;
            return this.strip();
          };
          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length)
              return this.clone().ixor(num);
            return num.clone().ixor(this);
          };
          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length)
              return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === "number" && width >= 0);
            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;
            this._expand(bytesNeeded);
            if (bitsLeft > 0) {
              bytesNeeded--;
            }
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 67108863;
            }
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
            }
            return this.strip();
          };
          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === "number" && bit >= 0);
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            this._expand(off + 1);
            if (val) {
              this.words[off] = this.words[off] | 1 << wbit;
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }
            return this.strip();
          };
          BN.prototype.iadd = function iadd(num) {
            var r;
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 67108863;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 67108863;
              carry = r >>> 26;
            }
            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            return this;
          };
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }
            if (this.length > num.length)
              return this.clone().iadd(num);
            return num.clone().iadd(this);
          };
          BN.prototype.isub = function isub(num) {
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }
            var cmp = this.cmp(num);
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 67108863;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 67108863;
            }
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            this.length = Math.max(this.length, i);
            if (a !== this) {
              this.negative = 1;
            }
            return this.strip();
          };
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };
          function smallMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            var len = self2.length + num.length | 0;
            out.length = len;
            len = len - 1 | 0;
            var a = self2.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;
            var lo = r & 67108863;
            var carry = r / 67108864 | 0;
            out.words[0] = lo;
            for (var k = 1; k < len; k++) {
              var ncarry = carry >>> 26;
              var rword = carry & 67108863;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                var i = k - j | 0;
                a = self2.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }
            return out.strip();
          }
          var comb10MulTo = function comb10MulTo2(self2, num, out) {
            var a = self2.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 8191;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 8191;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 8191;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 8191;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 8191;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 8191;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 8191;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 8191;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 8191;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 8191;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 8191;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 8191;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 8191;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 8191;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 8191;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 8191;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 8191;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 8191;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 8191;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 8191;
            var bh9 = b9 >>> 13;
            out.negative = self2.negative ^ num.negative;
            out.length = 19;
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = mid + Math.imul(ah0, bl0) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
            w0 &= 67108863;
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = mid + Math.imul(ah1, bl0) | 0;
            hi = Math.imul(ah1, bh0);
            lo = lo + Math.imul(al0, bl1) | 0;
            mid = mid + Math.imul(al0, bh1) | 0;
            mid = mid + Math.imul(ah0, bl1) | 0;
            hi = hi + Math.imul(ah0, bh1) | 0;
            var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
            w1 &= 67108863;
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = mid + Math.imul(ah2, bl0) | 0;
            hi = Math.imul(ah2, bh0);
            lo = lo + Math.imul(al1, bl1) | 0;
            mid = mid + Math.imul(al1, bh1) | 0;
            mid = mid + Math.imul(ah1, bl1) | 0;
            hi = hi + Math.imul(ah1, bh1) | 0;
            lo = lo + Math.imul(al0, bl2) | 0;
            mid = mid + Math.imul(al0, bh2) | 0;
            mid = mid + Math.imul(ah0, bl2) | 0;
            hi = hi + Math.imul(ah0, bh2) | 0;
            var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
            w2 &= 67108863;
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = mid + Math.imul(ah3, bl0) | 0;
            hi = Math.imul(ah3, bh0);
            lo = lo + Math.imul(al2, bl1) | 0;
            mid = mid + Math.imul(al2, bh1) | 0;
            mid = mid + Math.imul(ah2, bl1) | 0;
            hi = hi + Math.imul(ah2, bh1) | 0;
            lo = lo + Math.imul(al1, bl2) | 0;
            mid = mid + Math.imul(al1, bh2) | 0;
            mid = mid + Math.imul(ah1, bl2) | 0;
            hi = hi + Math.imul(ah1, bh2) | 0;
            lo = lo + Math.imul(al0, bl3) | 0;
            mid = mid + Math.imul(al0, bh3) | 0;
            mid = mid + Math.imul(ah0, bl3) | 0;
            hi = hi + Math.imul(ah0, bh3) | 0;
            var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
            w3 &= 67108863;
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = mid + Math.imul(ah4, bl0) | 0;
            hi = Math.imul(ah4, bh0);
            lo = lo + Math.imul(al3, bl1) | 0;
            mid = mid + Math.imul(al3, bh1) | 0;
            mid = mid + Math.imul(ah3, bl1) | 0;
            hi = hi + Math.imul(ah3, bh1) | 0;
            lo = lo + Math.imul(al2, bl2) | 0;
            mid = mid + Math.imul(al2, bh2) | 0;
            mid = mid + Math.imul(ah2, bl2) | 0;
            hi = hi + Math.imul(ah2, bh2) | 0;
            lo = lo + Math.imul(al1, bl3) | 0;
            mid = mid + Math.imul(al1, bh3) | 0;
            mid = mid + Math.imul(ah1, bl3) | 0;
            hi = hi + Math.imul(ah1, bh3) | 0;
            lo = lo + Math.imul(al0, bl4) | 0;
            mid = mid + Math.imul(al0, bh4) | 0;
            mid = mid + Math.imul(ah0, bl4) | 0;
            hi = hi + Math.imul(ah0, bh4) | 0;
            var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
            w4 &= 67108863;
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = mid + Math.imul(ah5, bl0) | 0;
            hi = Math.imul(ah5, bh0);
            lo = lo + Math.imul(al4, bl1) | 0;
            mid = mid + Math.imul(al4, bh1) | 0;
            mid = mid + Math.imul(ah4, bl1) | 0;
            hi = hi + Math.imul(ah4, bh1) | 0;
            lo = lo + Math.imul(al3, bl2) | 0;
            mid = mid + Math.imul(al3, bh2) | 0;
            mid = mid + Math.imul(ah3, bl2) | 0;
            hi = hi + Math.imul(ah3, bh2) | 0;
            lo = lo + Math.imul(al2, bl3) | 0;
            mid = mid + Math.imul(al2, bh3) | 0;
            mid = mid + Math.imul(ah2, bl3) | 0;
            hi = hi + Math.imul(ah2, bh3) | 0;
            lo = lo + Math.imul(al1, bl4) | 0;
            mid = mid + Math.imul(al1, bh4) | 0;
            mid = mid + Math.imul(ah1, bl4) | 0;
            hi = hi + Math.imul(ah1, bh4) | 0;
            lo = lo + Math.imul(al0, bl5) | 0;
            mid = mid + Math.imul(al0, bh5) | 0;
            mid = mid + Math.imul(ah0, bl5) | 0;
            hi = hi + Math.imul(ah0, bh5) | 0;
            var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
            w5 &= 67108863;
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = mid + Math.imul(ah6, bl0) | 0;
            hi = Math.imul(ah6, bh0);
            lo = lo + Math.imul(al5, bl1) | 0;
            mid = mid + Math.imul(al5, bh1) | 0;
            mid = mid + Math.imul(ah5, bl1) | 0;
            hi = hi + Math.imul(ah5, bh1) | 0;
            lo = lo + Math.imul(al4, bl2) | 0;
            mid = mid + Math.imul(al4, bh2) | 0;
            mid = mid + Math.imul(ah4, bl2) | 0;
            hi = hi + Math.imul(ah4, bh2) | 0;
            lo = lo + Math.imul(al3, bl3) | 0;
            mid = mid + Math.imul(al3, bh3) | 0;
            mid = mid + Math.imul(ah3, bl3) | 0;
            hi = hi + Math.imul(ah3, bh3) | 0;
            lo = lo + Math.imul(al2, bl4) | 0;
            mid = mid + Math.imul(al2, bh4) | 0;
            mid = mid + Math.imul(ah2, bl4) | 0;
            hi = hi + Math.imul(ah2, bh4) | 0;
            lo = lo + Math.imul(al1, bl5) | 0;
            mid = mid + Math.imul(al1, bh5) | 0;
            mid = mid + Math.imul(ah1, bl5) | 0;
            hi = hi + Math.imul(ah1, bh5) | 0;
            lo = lo + Math.imul(al0, bl6) | 0;
            mid = mid + Math.imul(al0, bh6) | 0;
            mid = mid + Math.imul(ah0, bl6) | 0;
            hi = hi + Math.imul(ah0, bh6) | 0;
            var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
            w6 &= 67108863;
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = mid + Math.imul(ah7, bl0) | 0;
            hi = Math.imul(ah7, bh0);
            lo = lo + Math.imul(al6, bl1) | 0;
            mid = mid + Math.imul(al6, bh1) | 0;
            mid = mid + Math.imul(ah6, bl1) | 0;
            hi = hi + Math.imul(ah6, bh1) | 0;
            lo = lo + Math.imul(al5, bl2) | 0;
            mid = mid + Math.imul(al5, bh2) | 0;
            mid = mid + Math.imul(ah5, bl2) | 0;
            hi = hi + Math.imul(ah5, bh2) | 0;
            lo = lo + Math.imul(al4, bl3) | 0;
            mid = mid + Math.imul(al4, bh3) | 0;
            mid = mid + Math.imul(ah4, bl3) | 0;
            hi = hi + Math.imul(ah4, bh3) | 0;
            lo = lo + Math.imul(al3, bl4) | 0;
            mid = mid + Math.imul(al3, bh4) | 0;
            mid = mid + Math.imul(ah3, bl4) | 0;
            hi = hi + Math.imul(ah3, bh4) | 0;
            lo = lo + Math.imul(al2, bl5) | 0;
            mid = mid + Math.imul(al2, bh5) | 0;
            mid = mid + Math.imul(ah2, bl5) | 0;
            hi = hi + Math.imul(ah2, bh5) | 0;
            lo = lo + Math.imul(al1, bl6) | 0;
            mid = mid + Math.imul(al1, bh6) | 0;
            mid = mid + Math.imul(ah1, bl6) | 0;
            hi = hi + Math.imul(ah1, bh6) | 0;
            lo = lo + Math.imul(al0, bl7) | 0;
            mid = mid + Math.imul(al0, bh7) | 0;
            mid = mid + Math.imul(ah0, bl7) | 0;
            hi = hi + Math.imul(ah0, bh7) | 0;
            var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
            w7 &= 67108863;
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = mid + Math.imul(ah8, bl0) | 0;
            hi = Math.imul(ah8, bh0);
            lo = lo + Math.imul(al7, bl1) | 0;
            mid = mid + Math.imul(al7, bh1) | 0;
            mid = mid + Math.imul(ah7, bl1) | 0;
            hi = hi + Math.imul(ah7, bh1) | 0;
            lo = lo + Math.imul(al6, bl2) | 0;
            mid = mid + Math.imul(al6, bh2) | 0;
            mid = mid + Math.imul(ah6, bl2) | 0;
            hi = hi + Math.imul(ah6, bh2) | 0;
            lo = lo + Math.imul(al5, bl3) | 0;
            mid = mid + Math.imul(al5, bh3) | 0;
            mid = mid + Math.imul(ah5, bl3) | 0;
            hi = hi + Math.imul(ah5, bh3) | 0;
            lo = lo + Math.imul(al4, bl4) | 0;
            mid = mid + Math.imul(al4, bh4) | 0;
            mid = mid + Math.imul(ah4, bl4) | 0;
            hi = hi + Math.imul(ah4, bh4) | 0;
            lo = lo + Math.imul(al3, bl5) | 0;
            mid = mid + Math.imul(al3, bh5) | 0;
            mid = mid + Math.imul(ah3, bl5) | 0;
            hi = hi + Math.imul(ah3, bh5) | 0;
            lo = lo + Math.imul(al2, bl6) | 0;
            mid = mid + Math.imul(al2, bh6) | 0;
            mid = mid + Math.imul(ah2, bl6) | 0;
            hi = hi + Math.imul(ah2, bh6) | 0;
            lo = lo + Math.imul(al1, bl7) | 0;
            mid = mid + Math.imul(al1, bh7) | 0;
            mid = mid + Math.imul(ah1, bl7) | 0;
            hi = hi + Math.imul(ah1, bh7) | 0;
            lo = lo + Math.imul(al0, bl8) | 0;
            mid = mid + Math.imul(al0, bh8) | 0;
            mid = mid + Math.imul(ah0, bl8) | 0;
            hi = hi + Math.imul(ah0, bh8) | 0;
            var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
            w8 &= 67108863;
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = mid + Math.imul(ah9, bl0) | 0;
            hi = Math.imul(ah9, bh0);
            lo = lo + Math.imul(al8, bl1) | 0;
            mid = mid + Math.imul(al8, bh1) | 0;
            mid = mid + Math.imul(ah8, bl1) | 0;
            hi = hi + Math.imul(ah8, bh1) | 0;
            lo = lo + Math.imul(al7, bl2) | 0;
            mid = mid + Math.imul(al7, bh2) | 0;
            mid = mid + Math.imul(ah7, bl2) | 0;
            hi = hi + Math.imul(ah7, bh2) | 0;
            lo = lo + Math.imul(al6, bl3) | 0;
            mid = mid + Math.imul(al6, bh3) | 0;
            mid = mid + Math.imul(ah6, bl3) | 0;
            hi = hi + Math.imul(ah6, bh3) | 0;
            lo = lo + Math.imul(al5, bl4) | 0;
            mid = mid + Math.imul(al5, bh4) | 0;
            mid = mid + Math.imul(ah5, bl4) | 0;
            hi = hi + Math.imul(ah5, bh4) | 0;
            lo = lo + Math.imul(al4, bl5) | 0;
            mid = mid + Math.imul(al4, bh5) | 0;
            mid = mid + Math.imul(ah4, bl5) | 0;
            hi = hi + Math.imul(ah4, bh5) | 0;
            lo = lo + Math.imul(al3, bl6) | 0;
            mid = mid + Math.imul(al3, bh6) | 0;
            mid = mid + Math.imul(ah3, bl6) | 0;
            hi = hi + Math.imul(ah3, bh6) | 0;
            lo = lo + Math.imul(al2, bl7) | 0;
            mid = mid + Math.imul(al2, bh7) | 0;
            mid = mid + Math.imul(ah2, bl7) | 0;
            hi = hi + Math.imul(ah2, bh7) | 0;
            lo = lo + Math.imul(al1, bl8) | 0;
            mid = mid + Math.imul(al1, bh8) | 0;
            mid = mid + Math.imul(ah1, bl8) | 0;
            hi = hi + Math.imul(ah1, bh8) | 0;
            lo = lo + Math.imul(al0, bl9) | 0;
            mid = mid + Math.imul(al0, bh9) | 0;
            mid = mid + Math.imul(ah0, bl9) | 0;
            hi = hi + Math.imul(ah0, bh9) | 0;
            var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
            w9 &= 67108863;
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = mid + Math.imul(ah9, bl1) | 0;
            hi = Math.imul(ah9, bh1);
            lo = lo + Math.imul(al8, bl2) | 0;
            mid = mid + Math.imul(al8, bh2) | 0;
            mid = mid + Math.imul(ah8, bl2) | 0;
            hi = hi + Math.imul(ah8, bh2) | 0;
            lo = lo + Math.imul(al7, bl3) | 0;
            mid = mid + Math.imul(al7, bh3) | 0;
            mid = mid + Math.imul(ah7, bl3) | 0;
            hi = hi + Math.imul(ah7, bh3) | 0;
            lo = lo + Math.imul(al6, bl4) | 0;
            mid = mid + Math.imul(al6, bh4) | 0;
            mid = mid + Math.imul(ah6, bl4) | 0;
            hi = hi + Math.imul(ah6, bh4) | 0;
            lo = lo + Math.imul(al5, bl5) | 0;
            mid = mid + Math.imul(al5, bh5) | 0;
            mid = mid + Math.imul(ah5, bl5) | 0;
            hi = hi + Math.imul(ah5, bh5) | 0;
            lo = lo + Math.imul(al4, bl6) | 0;
            mid = mid + Math.imul(al4, bh6) | 0;
            mid = mid + Math.imul(ah4, bl6) | 0;
            hi = hi + Math.imul(ah4, bh6) | 0;
            lo = lo + Math.imul(al3, bl7) | 0;
            mid = mid + Math.imul(al3, bh7) | 0;
            mid = mid + Math.imul(ah3, bl7) | 0;
            hi = hi + Math.imul(ah3, bh7) | 0;
            lo = lo + Math.imul(al2, bl8) | 0;
            mid = mid + Math.imul(al2, bh8) | 0;
            mid = mid + Math.imul(ah2, bl8) | 0;
            hi = hi + Math.imul(ah2, bh8) | 0;
            lo = lo + Math.imul(al1, bl9) | 0;
            mid = mid + Math.imul(al1, bh9) | 0;
            mid = mid + Math.imul(ah1, bl9) | 0;
            hi = hi + Math.imul(ah1, bh9) | 0;
            var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
            w10 &= 67108863;
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = mid + Math.imul(ah9, bl2) | 0;
            hi = Math.imul(ah9, bh2);
            lo = lo + Math.imul(al8, bl3) | 0;
            mid = mid + Math.imul(al8, bh3) | 0;
            mid = mid + Math.imul(ah8, bl3) | 0;
            hi = hi + Math.imul(ah8, bh3) | 0;
            lo = lo + Math.imul(al7, bl4) | 0;
            mid = mid + Math.imul(al7, bh4) | 0;
            mid = mid + Math.imul(ah7, bl4) | 0;
            hi = hi + Math.imul(ah7, bh4) | 0;
            lo = lo + Math.imul(al6, bl5) | 0;
            mid = mid + Math.imul(al6, bh5) | 0;
            mid = mid + Math.imul(ah6, bl5) | 0;
            hi = hi + Math.imul(ah6, bh5) | 0;
            lo = lo + Math.imul(al5, bl6) | 0;
            mid = mid + Math.imul(al5, bh6) | 0;
            mid = mid + Math.imul(ah5, bl6) | 0;
            hi = hi + Math.imul(ah5, bh6) | 0;
            lo = lo + Math.imul(al4, bl7) | 0;
            mid = mid + Math.imul(al4, bh7) | 0;
            mid = mid + Math.imul(ah4, bl7) | 0;
            hi = hi + Math.imul(ah4, bh7) | 0;
            lo = lo + Math.imul(al3, bl8) | 0;
            mid = mid + Math.imul(al3, bh8) | 0;
            mid = mid + Math.imul(ah3, bl8) | 0;
            hi = hi + Math.imul(ah3, bh8) | 0;
            lo = lo + Math.imul(al2, bl9) | 0;
            mid = mid + Math.imul(al2, bh9) | 0;
            mid = mid + Math.imul(ah2, bl9) | 0;
            hi = hi + Math.imul(ah2, bh9) | 0;
            var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
            w11 &= 67108863;
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = mid + Math.imul(ah9, bl3) | 0;
            hi = Math.imul(ah9, bh3);
            lo = lo + Math.imul(al8, bl4) | 0;
            mid = mid + Math.imul(al8, bh4) | 0;
            mid = mid + Math.imul(ah8, bl4) | 0;
            hi = hi + Math.imul(ah8, bh4) | 0;
            lo = lo + Math.imul(al7, bl5) | 0;
            mid = mid + Math.imul(al7, bh5) | 0;
            mid = mid + Math.imul(ah7, bl5) | 0;
            hi = hi + Math.imul(ah7, bh5) | 0;
            lo = lo + Math.imul(al6, bl6) | 0;
            mid = mid + Math.imul(al6, bh6) | 0;
            mid = mid + Math.imul(ah6, bl6) | 0;
            hi = hi + Math.imul(ah6, bh6) | 0;
            lo = lo + Math.imul(al5, bl7) | 0;
            mid = mid + Math.imul(al5, bh7) | 0;
            mid = mid + Math.imul(ah5, bl7) | 0;
            hi = hi + Math.imul(ah5, bh7) | 0;
            lo = lo + Math.imul(al4, bl8) | 0;
            mid = mid + Math.imul(al4, bh8) | 0;
            mid = mid + Math.imul(ah4, bl8) | 0;
            hi = hi + Math.imul(ah4, bh8) | 0;
            lo = lo + Math.imul(al3, bl9) | 0;
            mid = mid + Math.imul(al3, bh9) | 0;
            mid = mid + Math.imul(ah3, bl9) | 0;
            hi = hi + Math.imul(ah3, bh9) | 0;
            var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
            w12 &= 67108863;
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = mid + Math.imul(ah9, bl4) | 0;
            hi = Math.imul(ah9, bh4);
            lo = lo + Math.imul(al8, bl5) | 0;
            mid = mid + Math.imul(al8, bh5) | 0;
            mid = mid + Math.imul(ah8, bl5) | 0;
            hi = hi + Math.imul(ah8, bh5) | 0;
            lo = lo + Math.imul(al7, bl6) | 0;
            mid = mid + Math.imul(al7, bh6) | 0;
            mid = mid + Math.imul(ah7, bl6) | 0;
            hi = hi + Math.imul(ah7, bh6) | 0;
            lo = lo + Math.imul(al6, bl7) | 0;
            mid = mid + Math.imul(al6, bh7) | 0;
            mid = mid + Math.imul(ah6, bl7) | 0;
            hi = hi + Math.imul(ah6, bh7) | 0;
            lo = lo + Math.imul(al5, bl8) | 0;
            mid = mid + Math.imul(al5, bh8) | 0;
            mid = mid + Math.imul(ah5, bl8) | 0;
            hi = hi + Math.imul(ah5, bh8) | 0;
            lo = lo + Math.imul(al4, bl9) | 0;
            mid = mid + Math.imul(al4, bh9) | 0;
            mid = mid + Math.imul(ah4, bl9) | 0;
            hi = hi + Math.imul(ah4, bh9) | 0;
            var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
            w13 &= 67108863;
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = mid + Math.imul(ah9, bl5) | 0;
            hi = Math.imul(ah9, bh5);
            lo = lo + Math.imul(al8, bl6) | 0;
            mid = mid + Math.imul(al8, bh6) | 0;
            mid = mid + Math.imul(ah8, bl6) | 0;
            hi = hi + Math.imul(ah8, bh6) | 0;
            lo = lo + Math.imul(al7, bl7) | 0;
            mid = mid + Math.imul(al7, bh7) | 0;
            mid = mid + Math.imul(ah7, bl7) | 0;
            hi = hi + Math.imul(ah7, bh7) | 0;
            lo = lo + Math.imul(al6, bl8) | 0;
            mid = mid + Math.imul(al6, bh8) | 0;
            mid = mid + Math.imul(ah6, bl8) | 0;
            hi = hi + Math.imul(ah6, bh8) | 0;
            lo = lo + Math.imul(al5, bl9) | 0;
            mid = mid + Math.imul(al5, bh9) | 0;
            mid = mid + Math.imul(ah5, bl9) | 0;
            hi = hi + Math.imul(ah5, bh9) | 0;
            var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
            w14 &= 67108863;
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = mid + Math.imul(ah9, bl6) | 0;
            hi = Math.imul(ah9, bh6);
            lo = lo + Math.imul(al8, bl7) | 0;
            mid = mid + Math.imul(al8, bh7) | 0;
            mid = mid + Math.imul(ah8, bl7) | 0;
            hi = hi + Math.imul(ah8, bh7) | 0;
            lo = lo + Math.imul(al7, bl8) | 0;
            mid = mid + Math.imul(al7, bh8) | 0;
            mid = mid + Math.imul(ah7, bl8) | 0;
            hi = hi + Math.imul(ah7, bh8) | 0;
            lo = lo + Math.imul(al6, bl9) | 0;
            mid = mid + Math.imul(al6, bh9) | 0;
            mid = mid + Math.imul(ah6, bl9) | 0;
            hi = hi + Math.imul(ah6, bh9) | 0;
            var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
            w15 &= 67108863;
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = mid + Math.imul(ah9, bl7) | 0;
            hi = Math.imul(ah9, bh7);
            lo = lo + Math.imul(al8, bl8) | 0;
            mid = mid + Math.imul(al8, bh8) | 0;
            mid = mid + Math.imul(ah8, bl8) | 0;
            hi = hi + Math.imul(ah8, bh8) | 0;
            lo = lo + Math.imul(al7, bl9) | 0;
            mid = mid + Math.imul(al7, bh9) | 0;
            mid = mid + Math.imul(ah7, bl9) | 0;
            hi = hi + Math.imul(ah7, bh9) | 0;
            var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
            w16 &= 67108863;
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = mid + Math.imul(ah9, bl8) | 0;
            hi = Math.imul(ah9, bh8);
            lo = lo + Math.imul(al8, bl9) | 0;
            mid = mid + Math.imul(al8, bh9) | 0;
            mid = mid + Math.imul(ah8, bl9) | 0;
            hi = hi + Math.imul(ah8, bh9) | 0;
            var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
            w17 &= 67108863;
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = mid + Math.imul(ah9, bl9) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
            w18 &= 67108863;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }
          function bigMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            out.length = self2.length + num.length;
            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 67108863;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self2.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }
            return out.strip();
          }
          function jumboMulTo(self2, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self2, num, out);
          }
          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }
            return res;
          };
          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }
          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }
            return t;
          };
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1)
              return x;
            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << l - i - 1;
              x >>= 1;
            }
            return rb;
          };
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };
          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);
            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;
              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);
              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];
                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];
                  var rx = rtwdf_ * ro - itwdf_ * io;
                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;
                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;
                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };
          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }
            return 1 << i + 1 + odd;
          };
          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1)
              return;
            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];
              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;
              t = iws[i];
              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };
          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
              ws[i] = w & 67108863;
              if (w < 67108864) {
                carry = 0;
              } else {
                carry = w / 67108864 | 0;
              }
            }
            return ws;
          };
          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);
              rws[2 * i] = carry & 8191;
              carry = carry >>> 13;
              rws[2 * i + 1] = carry & 8191;
              carry = carry >>> 13;
            }
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }
            assert(carry === 0);
            assert((carry & ~8191) === 0);
          };
          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }
            return ph;
          };
          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);
            var rbt = this.makeRBT(N);
            var _ = this.stub(N);
            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);
            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);
            var rmws = out.words;
            rmws.length = N;
            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);
            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);
            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }
            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);
            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };
          BN.prototype.imuln = function imuln(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 67108863) + (carry & 67108863);
              carry >>= 26;
              carry += w / 67108864 | 0;
              carry += lo >>> 26;
              this.words[i] = lo & 67108863;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };
          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0)
              return new BN(1);
            var res = this;
            for (var i = 0; i < w.length; i++, res = res.sqr()) {
              if (w[i] !== 0)
                break;
            }
            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                if (w[i] === 0)
                  continue;
                res = res.mul(q);
              }
            }
            return res;
          };
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = 67108863 >>> 26 - r << 26 - r;
            var i;
            if (r !== 0) {
              var carry = 0;
              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
              }
              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }
            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }
              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }
              this.length += s;
            }
            return this.strip();
          };
          BN.prototype.ishln = function ishln(bits) {
            assert(this.negative === 0);
            return this.iushln(bits);
          };
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === "number" && bits >= 0);
            var h;
            if (hint) {
              h = (hint - hint % 26) / 26;
            } else {
              h = 0;
            }
            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 67108863 ^ 67108863 >>> r << r;
            var maskedWords = extended;
            h -= s;
            h = Math.max(0, h);
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }
            if (s === 0) {
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }
            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = carry << 26 - r | word >>> r;
              carry = word & mask;
            }
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }
            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }
            return this.strip();
          };
          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };
          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };
          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === "number" && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;
            if (this.length <= s)
              return false;
            var w = this.words[s];
            return !!(w & q);
          };
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            assert(this.negative === 0, "imaskn works only with positive numbers");
            if (this.length <= s) {
              return this;
            }
            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);
            if (r !== 0) {
              var mask = 67108863 ^ 67108863 >>> r << r;
              this.words[this.length - 1] &= mask;
            }
            return this.strip();
          };
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            if (num < 0)
              return this.isubn(-num);
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }
              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }
            return this._iaddn(num);
          };
          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;
            for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
              this.words[i] -= 67108864;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);
            return this;
          };
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            if (num < 0)
              return this.iaddn(-num);
            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }
            this.words[0] -= num;
            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 67108864;
                this.words[i + 1] -= 1;
              }
            }
            return this.strip();
          };
          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };
          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };
          BN.prototype.iabs = function iabs() {
            this.negative = 0;
            return this;
          };
          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };
          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;
            this._expand(len);
            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 67108863;
              carry = (w >> 26) - (right / 67108864 | 0);
              this.words[i + shift] = w & 67108863;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 67108863;
            }
            if (carry === 0)
              return this.strip();
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 67108863;
            }
            this.negative = 1;
            return this.strip();
          };
          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;
            var a = this.clone();
            var b = num;
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }
            var m = a.length - b.length;
            var q;
            if (mode !== "mod") {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }
            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }
            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
              qj = Math.min(qj / bhi | 0, 67108863);
              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();
            if (mode !== "div" && shift !== 0) {
              a.iushrn(shift);
            }
            return {
              div: q || null,
              mod: a
            };
          };
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());
            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }
            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);
              if (mode !== "mod") {
                div = res.div.neg();
              }
              if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }
              return {
                div,
                mod
              };
            }
            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);
              if (mode !== "mod") {
                div = res.div.neg();
              }
              return {
                div,
                mod: res.mod
              };
            }
            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);
              if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }
              return {
                div: res.div,
                mod
              };
            }
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }
            if (num.length === 1) {
              if (mode === "div") {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }
              if (mode === "mod") {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }
              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return this._wordDiv(num, mode);
          };
          BN.prototype.div = function div(num) {
            return this.divmod(num, "div", false).div;
          };
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, "mod", false).mod;
          };
          BN.prototype.umod = function umod(num) {
            return this.divmod(num, "mod", true).mod;
          };
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);
            if (dm.mod.isZero())
              return dm.div;
            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);
            if (cmp < 0 || r2 === 1 && cmp === 0)
              return dm.div;
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };
          BN.prototype.modn = function modn(num) {
            assert(num <= 67108863);
            var p = (1 << 26) % num;
            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }
            return acc;
          };
          BN.prototype.idivn = function idivn(num) {
            assert(num <= 67108863);
            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 67108864;
              this.words[i] = w / num | 0;
              carry = w % num;
            }
            return this.strip();
          };
          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };
          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var x = this;
            var y = p.clone();
            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }
            var A = new BN(1);
            var B = new BN(0);
            var C = new BN(0);
            var D = new BN(1);
            var g = 0;
            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }
            var yp = y.clone();
            var xp = x.clone();
            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }
                  A.iushrn(1);
                  B.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }
                  C.iushrn(1);
                  D.iushrn(1);
                }
              }
              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }
            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var a = this;
            var b = p.clone();
            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }
            var x1 = new BN(1);
            var x2 = new BN(0);
            var delta = b.clone();
            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }
                  x1.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }
                  x2.iushrn(1);
                }
              }
              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }
            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }
            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }
            return res;
          };
          BN.prototype.gcd = function gcd(num) {
            if (this.isZero())
              return num.abs();
            if (num.isZero())
              return this.abs();
            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }
            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }
              var r = a.cmp(b);
              if (r < 0) {
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }
              a.isub(b);
            } while (true);
            return b.iushln(shift);
          };
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };
          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };
          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === "number");
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 67108863;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };
          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };
          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;
            if (this.negative !== 0 && !negative)
              return -1;
            if (this.negative === 0 && negative)
              return 1;
            this.strip();
            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }
              assert(num <= 67108863, "Number is too big");
              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0)
              return -res | 0;
            return res;
          };
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0)
              return -1;
            if (this.negative === 0 && num.negative !== 0)
              return 1;
            var res = this.ucmp(num);
            if (this.negative !== 0)
              return -res | 0;
            return res;
          };
          BN.prototype.ucmp = function ucmp(num) {
            if (this.length > num.length)
              return 1;
            if (this.length < num.length)
              return -1;
            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;
              if (a === b)
                continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };
          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };
          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };
          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };
          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };
          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };
          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };
          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };
          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };
          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };
          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };
          BN.red = function red(num) {
            return new Red(num);
          };
          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            assert(this.negative === 0, "red works only with positives");
            return ctx.convertTo(this)._forceRed(ctx);
          };
          BN.prototype.fromRed = function fromRed() {
            assert(this.red, "fromRed works only with numbers in reduction context");
            return this.red.convertFrom(this);
          };
          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };
          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            return this._forceRed(ctx);
          };
          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, "redAdd works only with red numbers");
            return this.red.add(this, num);
          };
          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, "redIAdd works only with red numbers");
            return this.red.iadd(this, num);
          };
          BN.prototype.redSub = function redSub(num) {
            assert(this.red, "redSub works only with red numbers");
            return this.red.sub(this, num);
          };
          BN.prototype.redISub = function redISub(num) {
            assert(this.red, "redISub works only with red numbers");
            return this.red.isub(this, num);
          };
          BN.prototype.redShl = function redShl(num) {
            assert(this.red, "redShl works only with red numbers");
            return this.red.shl(this, num);
          };
          BN.prototype.redMul = function redMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };
          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };
          BN.prototype.redSqr = function redSqr() {
            assert(this.red, "redSqr works only with red numbers");
            this.red._verify1(this);
            return this.red.sqr(this);
          };
          BN.prototype.redISqr = function redISqr() {
            assert(this.red, "redISqr works only with red numbers");
            this.red._verify1(this);
            return this.red.isqr(this);
          };
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, "redSqrt works only with red numbers");
            this.red._verify1(this);
            return this.red.sqrt(this);
          };
          BN.prototype.redInvm = function redInvm() {
            assert(this.red, "redInvm works only with red numbers");
            this.red._verify1(this);
            return this.red.invm(this);
          };
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, "redNeg works only with red numbers");
            this.red._verify1(this);
            return this.red.neg(this);
          };
          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, "redPow(normalNum)");
            this.red._verify1(this);
            return this.red.pow(this, num);
          };
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };
          function MPrime(name, p) {
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);
            this.tmp = this._tmp();
          }
          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };
          MPrime.prototype.ireduce = function ireduce(num) {
            var r = num;
            var rlen;
            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);
            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              if (r.strip !== void 0) {
                r.strip();
              } else {
                r._strip();
              }
            }
            return r;
          };
          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };
          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };
          function K256() {
            MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
          }
          inherits(K256, MPrime);
          K256.prototype.split = function split(input, output) {
            var mask = 4194303;
            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;
            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;
            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };
          K256.prototype.imulK = function imulK(num) {
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 977;
              num.words[i] = lo & 67108863;
              lo = w * 64 + (lo / 67108864 | 0);
            }
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };
          function P224() {
            MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
          }
          inherits(P224, MPrime);
          function P192() {
            MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
          }
          inherits(P192, MPrime);
          function P25519() {
            MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
          }
          inherits(P25519, MPrime);
          P25519.prototype.imulK = function imulK(num) {
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 19 + carry;
              var lo = hi & 67108863;
              hi >>>= 26;
              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };
          BN._prime = function prime(name) {
            if (primes[name])
              return primes[name];
            var prime2;
            if (name === "k256") {
              prime2 = new K256();
            } else if (name === "p224") {
              prime2 = new P224();
            } else if (name === "p192") {
              prime2 = new P192();
            } else if (name === "p25519") {
              prime2 = new P25519();
            } else {
              throw new Error("Unknown prime " + name);
            }
            primes[name] = prime2;
            return prime2;
          };
          function Red(m) {
            if (typeof m === "string") {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), "modulus must be greater than 1");
              this.m = m;
              this.prime = null;
            }
          }
          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, "red works only with positives");
            assert(a.red, "red works only with red numbers");
          };
          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, "red works only with positives");
            assert(a.red && a.red === b.red, "red works only with red numbers");
          };
          Red.prototype.imod = function imod(a) {
            if (this.prime)
              return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };
          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }
            return this.m.sub(a)._forceRed(this);
          };
          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);
            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);
            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };
          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);
            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);
            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };
          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };
          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };
          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };
          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };
          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };
          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero())
              return a.clone();
            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());
            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);
            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }
            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));
              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }
            return r;
          };
          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };
          Red.prototype.pow = function pow(a, num) {
            if (num.isZero())
              return new BN(1).toRed(this);
            if (num.cmpn(1) === 0)
              return a.clone();
            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }
            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }
            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = word >> j & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }
                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0))
                  continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }
            return res;
          };
          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);
            return r === num ? r.clone() : r;
          };
          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };
          BN.mont = function mont(num) {
            return new Mont(num);
          };
          function Mont(m) {
            Red.call(this, m);
            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - this.shift % 26;
            }
            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);
            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);
          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };
          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };
          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }
            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero())
              return new BN(0)._forceRed(this);
            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.invm = function invm(a) {
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module3 === "undefined" || module3, this);
      }, { "buffer": 19 }], 16: [function(require2, module3, exports3) {
        "use strict";
        exports3.byteLength = byteLength;
        exports3.toByteArray = toByteArray;
        exports3.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;
        function getLens(b64) {
          var len2 = b64.length;
          if (len2 % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }
          var validLen = b64.indexOf("=");
          if (validLen === -1)
            validLen = len2;
          var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
          return [validLen, placeHoldersLen];
        }
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b64, validLen, placeHoldersLen) {
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
          var curByte = 0;
          var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
          var i2;
          for (i2 = 0; i2 < len2; i2 += 4) {
            tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
            arr[curByte++] = tmp >> 16 & 255;
            arr[curByte++] = tmp >> 8 & 255;
            arr[curByte++] = tmp & 255;
          }
          if (placeHoldersLen === 2) {
            tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
            arr[curByte++] = tmp & 255;
          }
          if (placeHoldersLen === 1) {
            tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
            arr[curByte++] = tmp >> 8 & 255;
            arr[curByte++] = tmp & 255;
          }
          return arr;
        }
        function tripletToBase64(num) {
          return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
        }
        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i2 = start; i2 < end; i2 += 3) {
            tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }
        function fromByteArray(uint8) {
          var tmp;
          var len2 = uint8.length;
          var extraBytes = len2 % 3;
          var parts = [];
          var maxChunkLength = 16383;
          for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
            parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
          }
          if (extraBytes === 1) {
            tmp = uint8[len2 - 1];
            parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
          } else if (extraBytes === 2) {
            tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
            parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
          }
          return parts.join("");
        }
      }, {}], 17: [function(require2, module3, exports3) {
        (function(module4, exports4) {
          "use strict";
          function assert(val, msg) {
            if (!val)
              throw new Error(msg || "Assertion failed");
          }
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
          function BN(number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }
            this.negative = 0;
            this.words = null;
            this.length = 0;
            this.red = null;
            if (number !== null) {
              if (base === "le" || base === "be") {
                endian = base;
                base = 10;
              }
              this._init(number || 0, base || 10, endian || "be");
            }
          }
          if (typeof module4 === "object") {
            module4.exports = BN;
          } else {
            exports4.BN = BN;
          }
          BN.BN = BN;
          BN.wordSize = 26;
          var Buffer2;
          try {
            if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
              Buffer2 = window.Buffer;
            } else {
              Buffer2 = require2("buffer").Buffer;
            }
          } catch (e) {
          }
          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }
            return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };
          BN.max = function max(left, right) {
            if (left.cmp(right) > 0)
              return left;
            return right;
          };
          BN.min = function min(left, right) {
            if (left.cmp(right) < 0)
              return left;
            return right;
          };
          BN.prototype._init = function init(number, base, endian) {
            if (typeof number === "number") {
              return this._initNumber(number, base, endian);
            }
            if (typeof number === "object") {
              return this._initArray(number, base, endian);
            }
            if (base === "hex") {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);
            number = number.toString().replace(/\s+/g, "");
            var start = 0;
            if (number[0] === "-") {
              start++;
              this.negative = 1;
            }
            if (start < number.length) {
              if (base === 16) {
                this._parseHex(number, start, endian);
              } else {
                this._parseBase(number, base, start);
                if (endian === "le") {
                  this._initArray(this.toArray(), base, endian);
                }
              }
            }
          };
          BN.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 67108864) {
              this.words = [number & 67108863];
              this.length = 1;
            } else if (number < 4503599627370496) {
              this.words = [
                number & 67108863,
                number / 67108864 & 67108863
              ];
              this.length = 2;
            } else {
              assert(number < 9007199254740992);
              this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
              ];
              this.length = 3;
            }
            if (endian !== "le")
              return;
            this._initArray(this.toArray(), base, endian);
          };
          BN.prototype._initArray = function _initArray(number, base, endian) {
            assert(typeof number.length === "number");
            if (number.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }
            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }
            var j, w;
            var off = 0;
            if (endian === "be") {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                this.words[j] |= w << off & 67108863;
                this.words[j + 1] = w >>> 26 - off & 67108863;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === "le") {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                this.words[j] |= w << off & 67108863;
                this.words[j + 1] = w >>> 26 - off & 67108863;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this._strip();
          };
          function parseHex4Bits(string, index) {
            var c = string.charCodeAt(index);
            if (c >= 48 && c <= 57) {
              return c - 48;
            } else if (c >= 65 && c <= 70) {
              return c - 55;
            } else if (c >= 97 && c <= 102) {
              return c - 87;
            } else {
              assert(false, "Invalid character in " + string);
            }
          }
          function parseHexByte(string, lowerBound, index) {
            var r = parseHex4Bits(string, index);
            if (index - 1 >= lowerBound) {
              r |= parseHex4Bits(string, index - 1) << 4;
            }
            return r;
          }
          BN.prototype._parseHex = function _parseHex(number, start, endian) {
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }
            var off = 0;
            var j = 0;
            var w;
            if (endian === "be") {
              for (i = number.length - 1; i >= start; i -= 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            } else {
              var parseLength = number.length - start;
              for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            }
            this._strip();
          };
          function parseBase(str, start, end, mul) {
            var r = 0;
            var b = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;
              r *= mul;
              if (c >= 49) {
                b = c - 49 + 10;
              } else if (c >= 17) {
                b = c - 17 + 10;
              } else {
                b = c;
              }
              assert(c >= 0 && b < mul, "Invalid character");
              r += b;
            }
            return r;
          }
          BN.prototype._parseBase = function _parseBase(number, base, start) {
            this.words = [0];
            this.length = 1;
            for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = limbPow / base | 0;
            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;
            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);
              this.imuln(limbPow);
              if (this.words[0] + word < 67108864) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);
              for (i = 0; i < mod; i++) {
                pow *= base;
              }
              this.imuln(pow);
              if (this.words[0] + word < 67108864) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            this._strip();
          };
          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };
          function move(dest, src) {
            dest.words = src.words;
            dest.length = src.length;
            dest.negative = src.negative;
            dest.red = src.red;
          }
          BN.prototype._move = function _move(dest) {
            move(dest, this);
          };
          BN.prototype.clone = function clone() {
            var r = new BN(null);
            this.copy(r);
            return r;
          };
          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };
          BN.prototype._strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };
          BN.prototype._normSign = function _normSign() {
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };
          if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
            try {
              BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
            } catch (e) {
              BN.prototype.inspect = inspect;
            }
          } else {
            BN.prototype.inspect = inspect;
          }
          function inspect() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
          }
          var zeros = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000"
          ];
          var groupSizes = [
            0,
            0,
            25,
            16,
            12,
            11,
            10,
            9,
            8,
            8,
            7,
            7,
            7,
            7,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ];
          var groupBases = [
            0,
            0,
            33554432,
            43046721,
            16777216,
            48828125,
            60466176,
            40353607,
            16777216,
            43046721,
            1e7,
            19487171,
            35831808,
            62748517,
            7529536,
            11390625,
            16777216,
            24137569,
            34012224,
            47045881,
            64e6,
            4084101,
            5153632,
            6436343,
            7962624,
            9765625,
            11881376,
            14348907,
            17210368,
            20511149,
            243e5,
            28629151,
            33554432,
            39135393,
            45435424,
            52521875,
            60466176
          ];
          BN.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;
            var out;
            if (base === 16 || base === "hex") {
              out = "";
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = "0" + out;
              }
              if (this.negative !== 0) {
                out = "-" + out;
              }
              return out;
            }
            if (base === (base | 0) && base >= 2 && base <= 36) {
              var groupSize = groupSizes[base];
              var groupBase = groupBases[base];
              out = "";
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = "0" + out;
              }
              while (out.length % padding !== 0) {
                out = "0" + out;
              }
              if (this.negative !== 0) {
                out = "-" + out;
              }
              return out;
            }
            assert(false, "Base should be between 2 and 36");
          };
          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 67108864;
            } else if (this.length === 3 && this.words[2] === 1) {
              ret += 4503599627370496 + this.words[1] * 67108864;
            } else if (this.length > 2) {
              assert(false, "Number can only safely store up to 53 bits");
            }
            return this.negative !== 0 ? -ret : ret;
          };
          BN.prototype.toJSON = function toJSON() {
            return this.toString(16, 2);
          };
          if (Buffer2) {
            BN.prototype.toBuffer = function toBuffer(endian, length) {
              return this.toArrayLike(Buffer2, endian, length);
            };
          }
          BN.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };
          var allocate = function allocate2(ArrayType, size) {
            if (ArrayType.allocUnsafe) {
              return ArrayType.allocUnsafe(size);
            }
            return new ArrayType(size);
          };
          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            this._strip();
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, "byte array longer than desired length");
            assert(reqLength > 0, "Requested array length <= 0");
            var res = allocate(ArrayType, reqLength);
            var postfix = endian === "le" ? "LE" : "BE";
            this["_toArrayLike" + postfix](res, byteLength);
            return res;
          };
          BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
            var position = 0;
            var carry = 0;
            for (var i = 0, shift = 0; i < this.length; i++) {
              var word = this.words[i] << shift | carry;
              res[position++] = word & 255;
              if (position < res.length) {
                res[position++] = word >> 8 & 255;
              }
              if (position < res.length) {
                res[position++] = word >> 16 & 255;
              }
              if (shift === 6) {
                if (position < res.length) {
                  res[position++] = word >> 24 & 255;
                }
                carry = 0;
                shift = 0;
              } else {
                carry = word >>> 24;
                shift += 2;
              }
            }
            if (position < res.length) {
              res[position++] = carry;
              while (position < res.length) {
                res[position++] = 0;
              }
            }
          };
          BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
            var position = res.length - 1;
            var carry = 0;
            for (var i = 0, shift = 0; i < this.length; i++) {
              var word = this.words[i] << shift | carry;
              res[position--] = word & 255;
              if (position >= 0) {
                res[position--] = word >> 8 & 255;
              }
              if (position >= 0) {
                res[position--] = word >> 16 & 255;
              }
              if (shift === 6) {
                if (position >= 0) {
                  res[position--] = word >> 24 & 255;
                }
                carry = 0;
                shift = 0;
              } else {
                carry = word >>> 24;
                shift += 2;
              }
            }
            if (position >= 0) {
              res[position--] = carry;
              while (position >= 0) {
                res[position--] = 0;
              }
            }
          };
          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r = 0;
              if (t >= 4096) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 64) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 2) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }
          BN.prototype._zeroBits = function _zeroBits(w) {
            if (w === 0)
              return 26;
            var t = w;
            var r = 0;
            if ((t & 8191) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 127) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 15) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 1) === 0) {
              r++;
            }
            return r;
          };
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };
          function toBitArray(num) {
            var w = new Array(num.bitLength());
            for (var bit = 0; bit < w.length; bit++) {
              var off = bit / 26 | 0;
              var wbit = bit % 26;
              w[bit] = num.words[off] >>> wbit & 1;
            }
            return w;
          }
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero())
              return 0;
            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26)
                break;
            }
            return r;
          };
          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };
          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };
          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };
          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };
          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }
            return this;
          };
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }
            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }
            return this._strip();
          };
          BN.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };
          BN.prototype.or = function or(num) {
            if (this.length > num.length)
              return this.clone().ior(num);
            return num.clone().ior(this);
          };
          BN.prototype.uor = function uor(num) {
            if (this.length > num.length)
              return this.clone().iuor(num);
            return num.clone().iuor(this);
          };
          BN.prototype.iuand = function iuand(num) {
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }
            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }
            this.length = b.length;
            return this._strip();
          };
          BN.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };
          BN.prototype.and = function and(num) {
            if (this.length > num.length)
              return this.clone().iand(num);
            return num.clone().iand(this);
          };
          BN.prototype.uand = function uand(num) {
            if (this.length > num.length)
              return this.clone().iuand(num);
            return num.clone().iuand(this);
          };
          BN.prototype.iuxor = function iuxor(num) {
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }
            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            this.length = a.length;
            return this._strip();
          };
          BN.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length)
              return this.clone().ixor(num);
            return num.clone().ixor(this);
          };
          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length)
              return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };
          BN.prototype.inotn = function inotn(width) {
            assert(typeof width === "number" && width >= 0);
            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;
            this._expand(bytesNeeded);
            if (bitsLeft > 0) {
              bytesNeeded--;
            }
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 67108863;
            }
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
            }
            return this._strip();
          };
          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };
          BN.prototype.setn = function setn(bit, val) {
            assert(typeof bit === "number" && bit >= 0);
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            this._expand(off + 1);
            if (val) {
              this.words[off] = this.words[off] | 1 << wbit;
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }
            return this._strip();
          };
          BN.prototype.iadd = function iadd(num) {
            var r;
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 67108863;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 67108863;
              carry = r >>> 26;
            }
            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            return this;
          };
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }
            if (this.length > num.length)
              return this.clone().iadd(num);
            return num.clone().iadd(this);
          };
          BN.prototype.isub = function isub(num) {
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }
            var cmp = this.cmp(num);
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 67108863;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 67108863;
            }
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }
            this.length = Math.max(this.length, i);
            if (a !== this) {
              this.negative = 1;
            }
            return this._strip();
          };
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };
          function smallMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            var len = self2.length + num.length | 0;
            out.length = len;
            len = len - 1 | 0;
            var a = self2.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;
            var lo = r & 67108863;
            var carry = r / 67108864 | 0;
            out.words[0] = lo;
            for (var k = 1; k < len; k++) {
              var ncarry = carry >>> 26;
              var rword = carry & 67108863;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                var i = k - j | 0;
                a = self2.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }
            return out._strip();
          }
          var comb10MulTo = function comb10MulTo2(self2, num, out) {
            var a = self2.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 8191;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 8191;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 8191;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 8191;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 8191;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 8191;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 8191;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 8191;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 8191;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 8191;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 8191;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 8191;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 8191;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 8191;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 8191;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 8191;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 8191;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 8191;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 8191;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 8191;
            var bh9 = b9 >>> 13;
            out.negative = self2.negative ^ num.negative;
            out.length = 19;
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = mid + Math.imul(ah0, bl0) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
            w0 &= 67108863;
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = mid + Math.imul(ah1, bl0) | 0;
            hi = Math.imul(ah1, bh0);
            lo = lo + Math.imul(al0, bl1) | 0;
            mid = mid + Math.imul(al0, bh1) | 0;
            mid = mid + Math.imul(ah0, bl1) | 0;
            hi = hi + Math.imul(ah0, bh1) | 0;
            var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
            w1 &= 67108863;
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = mid + Math.imul(ah2, bl0) | 0;
            hi = Math.imul(ah2, bh0);
            lo = lo + Math.imul(al1, bl1) | 0;
            mid = mid + Math.imul(al1, bh1) | 0;
            mid = mid + Math.imul(ah1, bl1) | 0;
            hi = hi + Math.imul(ah1, bh1) | 0;
            lo = lo + Math.imul(al0, bl2) | 0;
            mid = mid + Math.imul(al0, bh2) | 0;
            mid = mid + Math.imul(ah0, bl2) | 0;
            hi = hi + Math.imul(ah0, bh2) | 0;
            var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
            w2 &= 67108863;
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = mid + Math.imul(ah3, bl0) | 0;
            hi = Math.imul(ah3, bh0);
            lo = lo + Math.imul(al2, bl1) | 0;
            mid = mid + Math.imul(al2, bh1) | 0;
            mid = mid + Math.imul(ah2, bl1) | 0;
            hi = hi + Math.imul(ah2, bh1) | 0;
            lo = lo + Math.imul(al1, bl2) | 0;
            mid = mid + Math.imul(al1, bh2) | 0;
            mid = mid + Math.imul(ah1, bl2) | 0;
            hi = hi + Math.imul(ah1, bh2) | 0;
            lo = lo + Math.imul(al0, bl3) | 0;
            mid = mid + Math.imul(al0, bh3) | 0;
            mid = mid + Math.imul(ah0, bl3) | 0;
            hi = hi + Math.imul(ah0, bh3) | 0;
            var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
            w3 &= 67108863;
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = mid + Math.imul(ah4, bl0) | 0;
            hi = Math.imul(ah4, bh0);
            lo = lo + Math.imul(al3, bl1) | 0;
            mid = mid + Math.imul(al3, bh1) | 0;
            mid = mid + Math.imul(ah3, bl1) | 0;
            hi = hi + Math.imul(ah3, bh1) | 0;
            lo = lo + Math.imul(al2, bl2) | 0;
            mid = mid + Math.imul(al2, bh2) | 0;
            mid = mid + Math.imul(ah2, bl2) | 0;
            hi = hi + Math.imul(ah2, bh2) | 0;
            lo = lo + Math.imul(al1, bl3) | 0;
            mid = mid + Math.imul(al1, bh3) | 0;
            mid = mid + Math.imul(ah1, bl3) | 0;
            hi = hi + Math.imul(ah1, bh3) | 0;
            lo = lo + Math.imul(al0, bl4) | 0;
            mid = mid + Math.imul(al0, bh4) | 0;
            mid = mid + Math.imul(ah0, bl4) | 0;
            hi = hi + Math.imul(ah0, bh4) | 0;
            var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
            w4 &= 67108863;
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = mid + Math.imul(ah5, bl0) | 0;
            hi = Math.imul(ah5, bh0);
            lo = lo + Math.imul(al4, bl1) | 0;
            mid = mid + Math.imul(al4, bh1) | 0;
            mid = mid + Math.imul(ah4, bl1) | 0;
            hi = hi + Math.imul(ah4, bh1) | 0;
            lo = lo + Math.imul(al3, bl2) | 0;
            mid = mid + Math.imul(al3, bh2) | 0;
            mid = mid + Math.imul(ah3, bl2) | 0;
            hi = hi + Math.imul(ah3, bh2) | 0;
            lo = lo + Math.imul(al2, bl3) | 0;
            mid = mid + Math.imul(al2, bh3) | 0;
            mid = mid + Math.imul(ah2, bl3) | 0;
            hi = hi + Math.imul(ah2, bh3) | 0;
            lo = lo + Math.imul(al1, bl4) | 0;
            mid = mid + Math.imul(al1, bh4) | 0;
            mid = mid + Math.imul(ah1, bl4) | 0;
            hi = hi + Math.imul(ah1, bh4) | 0;
            lo = lo + Math.imul(al0, bl5) | 0;
            mid = mid + Math.imul(al0, bh5) | 0;
            mid = mid + Math.imul(ah0, bl5) | 0;
            hi = hi + Math.imul(ah0, bh5) | 0;
            var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
            w5 &= 67108863;
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = mid + Math.imul(ah6, bl0) | 0;
            hi = Math.imul(ah6, bh0);
            lo = lo + Math.imul(al5, bl1) | 0;
            mid = mid + Math.imul(al5, bh1) | 0;
            mid = mid + Math.imul(ah5, bl1) | 0;
            hi = hi + Math.imul(ah5, bh1) | 0;
            lo = lo + Math.imul(al4, bl2) | 0;
            mid = mid + Math.imul(al4, bh2) | 0;
            mid = mid + Math.imul(ah4, bl2) | 0;
            hi = hi + Math.imul(ah4, bh2) | 0;
            lo = lo + Math.imul(al3, bl3) | 0;
            mid = mid + Math.imul(al3, bh3) | 0;
            mid = mid + Math.imul(ah3, bl3) | 0;
            hi = hi + Math.imul(ah3, bh3) | 0;
            lo = lo + Math.imul(al2, bl4) | 0;
            mid = mid + Math.imul(al2, bh4) | 0;
            mid = mid + Math.imul(ah2, bl4) | 0;
            hi = hi + Math.imul(ah2, bh4) | 0;
            lo = lo + Math.imul(al1, bl5) | 0;
            mid = mid + Math.imul(al1, bh5) | 0;
            mid = mid + Math.imul(ah1, bl5) | 0;
            hi = hi + Math.imul(ah1, bh5) | 0;
            lo = lo + Math.imul(al0, bl6) | 0;
            mid = mid + Math.imul(al0, bh6) | 0;
            mid = mid + Math.imul(ah0, bl6) | 0;
            hi = hi + Math.imul(ah0, bh6) | 0;
            var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
            w6 &= 67108863;
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = mid + Math.imul(ah7, bl0) | 0;
            hi = Math.imul(ah7, bh0);
            lo = lo + Math.imul(al6, bl1) | 0;
            mid = mid + Math.imul(al6, bh1) | 0;
            mid = mid + Math.imul(ah6, bl1) | 0;
            hi = hi + Math.imul(ah6, bh1) | 0;
            lo = lo + Math.imul(al5, bl2) | 0;
            mid = mid + Math.imul(al5, bh2) | 0;
            mid = mid + Math.imul(ah5, bl2) | 0;
            hi = hi + Math.imul(ah5, bh2) | 0;
            lo = lo + Math.imul(al4, bl3) | 0;
            mid = mid + Math.imul(al4, bh3) | 0;
            mid = mid + Math.imul(ah4, bl3) | 0;
            hi = hi + Math.imul(ah4, bh3) | 0;
            lo = lo + Math.imul(al3, bl4) | 0;
            mid = mid + Math.imul(al3, bh4) | 0;
            mid = mid + Math.imul(ah3, bl4) | 0;
            hi = hi + Math.imul(ah3, bh4) | 0;
            lo = lo + Math.imul(al2, bl5) | 0;
            mid = mid + Math.imul(al2, bh5) | 0;
            mid = mid + Math.imul(ah2, bl5) | 0;
            hi = hi + Math.imul(ah2, bh5) | 0;
            lo = lo + Math.imul(al1, bl6) | 0;
            mid = mid + Math.imul(al1, bh6) | 0;
            mid = mid + Math.imul(ah1, bl6) | 0;
            hi = hi + Math.imul(ah1, bh6) | 0;
            lo = lo + Math.imul(al0, bl7) | 0;
            mid = mid + Math.imul(al0, bh7) | 0;
            mid = mid + Math.imul(ah0, bl7) | 0;
            hi = hi + Math.imul(ah0, bh7) | 0;
            var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
            w7 &= 67108863;
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = mid + Math.imul(ah8, bl0) | 0;
            hi = Math.imul(ah8, bh0);
            lo = lo + Math.imul(al7, bl1) | 0;
            mid = mid + Math.imul(al7, bh1) | 0;
            mid = mid + Math.imul(ah7, bl1) | 0;
            hi = hi + Math.imul(ah7, bh1) | 0;
            lo = lo + Math.imul(al6, bl2) | 0;
            mid = mid + Math.imul(al6, bh2) | 0;
            mid = mid + Math.imul(ah6, bl2) | 0;
            hi = hi + Math.imul(ah6, bh2) | 0;
            lo = lo + Math.imul(al5, bl3) | 0;
            mid = mid + Math.imul(al5, bh3) | 0;
            mid = mid + Math.imul(ah5, bl3) | 0;
            hi = hi + Math.imul(ah5, bh3) | 0;
            lo = lo + Math.imul(al4, bl4) | 0;
            mid = mid + Math.imul(al4, bh4) | 0;
            mid = mid + Math.imul(ah4, bl4) | 0;
            hi = hi + Math.imul(ah4, bh4) | 0;
            lo = lo + Math.imul(al3, bl5) | 0;
            mid = mid + Math.imul(al3, bh5) | 0;
            mid = mid + Math.imul(ah3, bl5) | 0;
            hi = hi + Math.imul(ah3, bh5) | 0;
            lo = lo + Math.imul(al2, bl6) | 0;
            mid = mid + Math.imul(al2, bh6) | 0;
            mid = mid + Math.imul(ah2, bl6) | 0;
            hi = hi + Math.imul(ah2, bh6) | 0;
            lo = lo + Math.imul(al1, bl7) | 0;
            mid = mid + Math.imul(al1, bh7) | 0;
            mid = mid + Math.imul(ah1, bl7) | 0;
            hi = hi + Math.imul(ah1, bh7) | 0;
            lo = lo + Math.imul(al0, bl8) | 0;
            mid = mid + Math.imul(al0, bh8) | 0;
            mid = mid + Math.imul(ah0, bl8) | 0;
            hi = hi + Math.imul(ah0, bh8) | 0;
            var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
            w8 &= 67108863;
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = mid + Math.imul(ah9, bl0) | 0;
            hi = Math.imul(ah9, bh0);
            lo = lo + Math.imul(al8, bl1) | 0;
            mid = mid + Math.imul(al8, bh1) | 0;
            mid = mid + Math.imul(ah8, bl1) | 0;
            hi = hi + Math.imul(ah8, bh1) | 0;
            lo = lo + Math.imul(al7, bl2) | 0;
            mid = mid + Math.imul(al7, bh2) | 0;
            mid = mid + Math.imul(ah7, bl2) | 0;
            hi = hi + Math.imul(ah7, bh2) | 0;
            lo = lo + Math.imul(al6, bl3) | 0;
            mid = mid + Math.imul(al6, bh3) | 0;
            mid = mid + Math.imul(ah6, bl3) | 0;
            hi = hi + Math.imul(ah6, bh3) | 0;
            lo = lo + Math.imul(al5, bl4) | 0;
            mid = mid + Math.imul(al5, bh4) | 0;
            mid = mid + Math.imul(ah5, bl4) | 0;
            hi = hi + Math.imul(ah5, bh4) | 0;
            lo = lo + Math.imul(al4, bl5) | 0;
            mid = mid + Math.imul(al4, bh5) | 0;
            mid = mid + Math.imul(ah4, bl5) | 0;
            hi = hi + Math.imul(ah4, bh5) | 0;
            lo = lo + Math.imul(al3, bl6) | 0;
            mid = mid + Math.imul(al3, bh6) | 0;
            mid = mid + Math.imul(ah3, bl6) | 0;
            hi = hi + Math.imul(ah3, bh6) | 0;
            lo = lo + Math.imul(al2, bl7) | 0;
            mid = mid + Math.imul(al2, bh7) | 0;
            mid = mid + Math.imul(ah2, bl7) | 0;
            hi = hi + Math.imul(ah2, bh7) | 0;
            lo = lo + Math.imul(al1, bl8) | 0;
            mid = mid + Math.imul(al1, bh8) | 0;
            mid = mid + Math.imul(ah1, bl8) | 0;
            hi = hi + Math.imul(ah1, bh8) | 0;
            lo = lo + Math.imul(al0, bl9) | 0;
            mid = mid + Math.imul(al0, bh9) | 0;
            mid = mid + Math.imul(ah0, bl9) | 0;
            hi = hi + Math.imul(ah0, bh9) | 0;
            var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
            w9 &= 67108863;
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = mid + Math.imul(ah9, bl1) | 0;
            hi = Math.imul(ah9, bh1);
            lo = lo + Math.imul(al8, bl2) | 0;
            mid = mid + Math.imul(al8, bh2) | 0;
            mid = mid + Math.imul(ah8, bl2) | 0;
            hi = hi + Math.imul(ah8, bh2) | 0;
            lo = lo + Math.imul(al7, bl3) | 0;
            mid = mid + Math.imul(al7, bh3) | 0;
            mid = mid + Math.imul(ah7, bl3) | 0;
            hi = hi + Math.imul(ah7, bh3) | 0;
            lo = lo + Math.imul(al6, bl4) | 0;
            mid = mid + Math.imul(al6, bh4) | 0;
            mid = mid + Math.imul(ah6, bl4) | 0;
            hi = hi + Math.imul(ah6, bh4) | 0;
            lo = lo + Math.imul(al5, bl5) | 0;
            mid = mid + Math.imul(al5, bh5) | 0;
            mid = mid + Math.imul(ah5, bl5) | 0;
            hi = hi + Math.imul(ah5, bh5) | 0;
            lo = lo + Math.imul(al4, bl6) | 0;
            mid = mid + Math.imul(al4, bh6) | 0;
            mid = mid + Math.imul(ah4, bl6) | 0;
            hi = hi + Math.imul(ah4, bh6) | 0;
            lo = lo + Math.imul(al3, bl7) | 0;
            mid = mid + Math.imul(al3, bh7) | 0;
            mid = mid + Math.imul(ah3, bl7) | 0;
            hi = hi + Math.imul(ah3, bh7) | 0;
            lo = lo + Math.imul(al2, bl8) | 0;
            mid = mid + Math.imul(al2, bh8) | 0;
            mid = mid + Math.imul(ah2, bl8) | 0;
            hi = hi + Math.imul(ah2, bh8) | 0;
            lo = lo + Math.imul(al1, bl9) | 0;
            mid = mid + Math.imul(al1, bh9) | 0;
            mid = mid + Math.imul(ah1, bl9) | 0;
            hi = hi + Math.imul(ah1, bh9) | 0;
            var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
            w10 &= 67108863;
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = mid + Math.imul(ah9, bl2) | 0;
            hi = Math.imul(ah9, bh2);
            lo = lo + Math.imul(al8, bl3) | 0;
            mid = mid + Math.imul(al8, bh3) | 0;
            mid = mid + Math.imul(ah8, bl3) | 0;
            hi = hi + Math.imul(ah8, bh3) | 0;
            lo = lo + Math.imul(al7, bl4) | 0;
            mid = mid + Math.imul(al7, bh4) | 0;
            mid = mid + Math.imul(ah7, bl4) | 0;
            hi = hi + Math.imul(ah7, bh4) | 0;
            lo = lo + Math.imul(al6, bl5) | 0;
            mid = mid + Math.imul(al6, bh5) | 0;
            mid = mid + Math.imul(ah6, bl5) | 0;
            hi = hi + Math.imul(ah6, bh5) | 0;
            lo = lo + Math.imul(al5, bl6) | 0;
            mid = mid + Math.imul(al5, bh6) | 0;
            mid = mid + Math.imul(ah5, bl6) | 0;
            hi = hi + Math.imul(ah5, bh6) | 0;
            lo = lo + Math.imul(al4, bl7) | 0;
            mid = mid + Math.imul(al4, bh7) | 0;
            mid = mid + Math.imul(ah4, bl7) | 0;
            hi = hi + Math.imul(ah4, bh7) | 0;
            lo = lo + Math.imul(al3, bl8) | 0;
            mid = mid + Math.imul(al3, bh8) | 0;
            mid = mid + Math.imul(ah3, bl8) | 0;
            hi = hi + Math.imul(ah3, bh8) | 0;
            lo = lo + Math.imul(al2, bl9) | 0;
            mid = mid + Math.imul(al2, bh9) | 0;
            mid = mid + Math.imul(ah2, bl9) | 0;
            hi = hi + Math.imul(ah2, bh9) | 0;
            var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
            w11 &= 67108863;
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = mid + Math.imul(ah9, bl3) | 0;
            hi = Math.imul(ah9, bh3);
            lo = lo + Math.imul(al8, bl4) | 0;
            mid = mid + Math.imul(al8, bh4) | 0;
            mid = mid + Math.imul(ah8, bl4) | 0;
            hi = hi + Math.imul(ah8, bh4) | 0;
            lo = lo + Math.imul(al7, bl5) | 0;
            mid = mid + Math.imul(al7, bh5) | 0;
            mid = mid + Math.imul(ah7, bl5) | 0;
            hi = hi + Math.imul(ah7, bh5) | 0;
            lo = lo + Math.imul(al6, bl6) | 0;
            mid = mid + Math.imul(al6, bh6) | 0;
            mid = mid + Math.imul(ah6, bl6) | 0;
            hi = hi + Math.imul(ah6, bh6) | 0;
            lo = lo + Math.imul(al5, bl7) | 0;
            mid = mid + Math.imul(al5, bh7) | 0;
            mid = mid + Math.imul(ah5, bl7) | 0;
            hi = hi + Math.imul(ah5, bh7) | 0;
            lo = lo + Math.imul(al4, bl8) | 0;
            mid = mid + Math.imul(al4, bh8) | 0;
            mid = mid + Math.imul(ah4, bl8) | 0;
            hi = hi + Math.imul(ah4, bh8) | 0;
            lo = lo + Math.imul(al3, bl9) | 0;
            mid = mid + Math.imul(al3, bh9) | 0;
            mid = mid + Math.imul(ah3, bl9) | 0;
            hi = hi + Math.imul(ah3, bh9) | 0;
            var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
            w12 &= 67108863;
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = mid + Math.imul(ah9, bl4) | 0;
            hi = Math.imul(ah9, bh4);
            lo = lo + Math.imul(al8, bl5) | 0;
            mid = mid + Math.imul(al8, bh5) | 0;
            mid = mid + Math.imul(ah8, bl5) | 0;
            hi = hi + Math.imul(ah8, bh5) | 0;
            lo = lo + Math.imul(al7, bl6) | 0;
            mid = mid + Math.imul(al7, bh6) | 0;
            mid = mid + Math.imul(ah7, bl6) | 0;
            hi = hi + Math.imul(ah7, bh6) | 0;
            lo = lo + Math.imul(al6, bl7) | 0;
            mid = mid + Math.imul(al6, bh7) | 0;
            mid = mid + Math.imul(ah6, bl7) | 0;
            hi = hi + Math.imul(ah6, bh7) | 0;
            lo = lo + Math.imul(al5, bl8) | 0;
            mid = mid + Math.imul(al5, bh8) | 0;
            mid = mid + Math.imul(ah5, bl8) | 0;
            hi = hi + Math.imul(ah5, bh8) | 0;
            lo = lo + Math.imul(al4, bl9) | 0;
            mid = mid + Math.imul(al4, bh9) | 0;
            mid = mid + Math.imul(ah4, bl9) | 0;
            hi = hi + Math.imul(ah4, bh9) | 0;
            var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
            w13 &= 67108863;
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = mid + Math.imul(ah9, bl5) | 0;
            hi = Math.imul(ah9, bh5);
            lo = lo + Math.imul(al8, bl6) | 0;
            mid = mid + Math.imul(al8, bh6) | 0;
            mid = mid + Math.imul(ah8, bl6) | 0;
            hi = hi + Math.imul(ah8, bh6) | 0;
            lo = lo + Math.imul(al7, bl7) | 0;
            mid = mid + Math.imul(al7, bh7) | 0;
            mid = mid + Math.imul(ah7, bl7) | 0;
            hi = hi + Math.imul(ah7, bh7) | 0;
            lo = lo + Math.imul(al6, bl8) | 0;
            mid = mid + Math.imul(al6, bh8) | 0;
            mid = mid + Math.imul(ah6, bl8) | 0;
            hi = hi + Math.imul(ah6, bh8) | 0;
            lo = lo + Math.imul(al5, bl9) | 0;
            mid = mid + Math.imul(al5, bh9) | 0;
            mid = mid + Math.imul(ah5, bl9) | 0;
            hi = hi + Math.imul(ah5, bh9) | 0;
            var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
            w14 &= 67108863;
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = mid + Math.imul(ah9, bl6) | 0;
            hi = Math.imul(ah9, bh6);
            lo = lo + Math.imul(al8, bl7) | 0;
            mid = mid + Math.imul(al8, bh7) | 0;
            mid = mid + Math.imul(ah8, bl7) | 0;
            hi = hi + Math.imul(ah8, bh7) | 0;
            lo = lo + Math.imul(al7, bl8) | 0;
            mid = mid + Math.imul(al7, bh8) | 0;
            mid = mid + Math.imul(ah7, bl8) | 0;
            hi = hi + Math.imul(ah7, bh8) | 0;
            lo = lo + Math.imul(al6, bl9) | 0;
            mid = mid + Math.imul(al6, bh9) | 0;
            mid = mid + Math.imul(ah6, bl9) | 0;
            hi = hi + Math.imul(ah6, bh9) | 0;
            var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
            w15 &= 67108863;
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = mid + Math.imul(ah9, bl7) | 0;
            hi = Math.imul(ah9, bh7);
            lo = lo + Math.imul(al8, bl8) | 0;
            mid = mid + Math.imul(al8, bh8) | 0;
            mid = mid + Math.imul(ah8, bl8) | 0;
            hi = hi + Math.imul(ah8, bh8) | 0;
            lo = lo + Math.imul(al7, bl9) | 0;
            mid = mid + Math.imul(al7, bh9) | 0;
            mid = mid + Math.imul(ah7, bl9) | 0;
            hi = hi + Math.imul(ah7, bh9) | 0;
            var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
            w16 &= 67108863;
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = mid + Math.imul(ah9, bl8) | 0;
            hi = Math.imul(ah9, bh8);
            lo = lo + Math.imul(al8, bl9) | 0;
            mid = mid + Math.imul(al8, bh9) | 0;
            mid = mid + Math.imul(ah8, bl9) | 0;
            hi = hi + Math.imul(ah8, bh9) | 0;
            var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
            w17 &= 67108863;
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = mid + Math.imul(ah9, bl9) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
            w18 &= 67108863;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }
          function bigMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            out.length = self2.length + num.length;
            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 67108863;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self2.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }
            return out._strip();
          }
          function jumboMulTo(self2, num, out) {
            return bigMulTo(self2, num, out);
          }
          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }
            return res;
          };
          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }
          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }
            return t;
          };
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1)
              return x;
            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << l - i - 1;
              x >>= 1;
            }
            return rb;
          };
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };
          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);
            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;
              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);
              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];
                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];
                  var rx = rtwdf_ * ro - itwdf_ * io;
                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;
                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;
                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };
          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }
            return 1 << i + 1 + odd;
          };
          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1)
              return;
            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];
              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;
              t = iws[i];
              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };
          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
              ws[i] = w & 67108863;
              if (w < 67108864) {
                carry = 0;
              } else {
                carry = w / 67108864 | 0;
              }
            }
            return ws;
          };
          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);
              rws[2 * i] = carry & 8191;
              carry = carry >>> 13;
              rws[2 * i + 1] = carry & 8191;
              carry = carry >>> 13;
            }
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }
            assert(carry === 0);
            assert((carry & ~8191) === 0);
          };
          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }
            return ph;
          };
          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);
            var rbt = this.makeRBT(N);
            var _ = this.stub(N);
            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);
            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);
            var rmws = out.words;
            rmws.length = N;
            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);
            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);
            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }
            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);
            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out._strip();
          };
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };
          BN.prototype.imuln = function imuln(num) {
            var isNegNum = num < 0;
            if (isNegNum)
              num = -num;
            assert(typeof num === "number");
            assert(num < 67108864);
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 67108863) + (carry & 67108863);
              carry >>= 26;
              carry += w / 67108864 | 0;
              carry += lo >>> 26;
              this.words[i] = lo & 67108863;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return isNegNum ? this.ineg() : this;
          };
          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0)
              return new BN(1);
            var res = this;
            for (var i = 0; i < w.length; i++, res = res.sqr()) {
              if (w[i] !== 0)
                break;
            }
            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                if (w[i] === 0)
                  continue;
                res = res.mul(q);
              }
            }
            return res;
          };
          BN.prototype.iushln = function iushln(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = 67108863 >>> 26 - r << 26 - r;
            var i;
            if (r !== 0) {
              var carry = 0;
              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
              }
              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }
            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }
              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }
              this.length += s;
            }
            return this._strip();
          };
          BN.prototype.ishln = function ishln(bits) {
            assert(this.negative === 0);
            return this.iushln(bits);
          };
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === "number" && bits >= 0);
            var h;
            if (hint) {
              h = (hint - hint % 26) / 26;
            } else {
              h = 0;
            }
            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 67108863 ^ 67108863 >>> r << r;
            var maskedWords = extended;
            h -= s;
            h = Math.max(0, h);
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }
            if (s === 0) {
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }
            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = carry << 26 - r | word >>> r;
              carry = word & mask;
            }
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }
            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }
            return this._strip();
          };
          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };
          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };
          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };
          BN.prototype.testn = function testn(bit) {
            assert(typeof bit === "number" && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;
            if (this.length <= s)
              return false;
            var w = this.words[s];
            return !!(w & q);
          };
          BN.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            assert(this.negative === 0, "imaskn works only with positive numbers");
            if (this.length <= s) {
              return this;
            }
            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);
            if (r !== 0) {
              var mask = 67108863 ^ 67108863 >>> r << r;
              this.words[this.length - 1] &= mask;
            }
            return this._strip();
          };
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };
          BN.prototype.iaddn = function iaddn(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            if (num < 0)
              return this.isubn(-num);
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }
              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }
            return this._iaddn(num);
          };
          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;
            for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
              this.words[i] -= 67108864;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);
            return this;
          };
          BN.prototype.isubn = function isubn(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            if (num < 0)
              return this.iaddn(-num);
            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }
            this.words[0] -= num;
            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 67108864;
                this.words[i + 1] -= 1;
              }
            }
            return this._strip();
          };
          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };
          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };
          BN.prototype.iabs = function iabs() {
            this.negative = 0;
            return this;
          };
          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };
          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;
            this._expand(len);
            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 67108863;
              carry = (w >> 26) - (right / 67108864 | 0);
              this.words[i + shift] = w & 67108863;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 67108863;
            }
            if (carry === 0)
              return this._strip();
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 67108863;
            }
            this.negative = 1;
            return this._strip();
          };
          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;
            var a = this.clone();
            var b = num;
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }
            var m = a.length - b.length;
            var q;
            if (mode !== "mod") {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }
            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }
            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
              qj = Math.min(qj / bhi | 0, 67108863);
              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q._strip();
            }
            a._strip();
            if (mode !== "div" && shift !== 0) {
              a.iushrn(shift);
            }
            return {
              div: q || null,
              mod: a
            };
          };
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());
            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }
            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);
              if (mode !== "mod") {
                div = res.div.neg();
              }
              if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }
              return {
                div,
                mod
              };
            }
            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);
              if (mode !== "mod") {
                div = res.div.neg();
              }
              return {
                div,
                mod: res.mod
              };
            }
            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);
              if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }
              return {
                div: res.div,
                mod
              };
            }
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }
            if (num.length === 1) {
              if (mode === "div") {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }
              if (mode === "mod") {
                return {
                  div: null,
                  mod: new BN(this.modrn(num.words[0]))
                };
              }
              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
              };
            }
            return this._wordDiv(num, mode);
          };
          BN.prototype.div = function div(num) {
            return this.divmod(num, "div", false).div;
          };
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, "mod", false).mod;
          };
          BN.prototype.umod = function umod(num) {
            return this.divmod(num, "mod", true).mod;
          };
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);
            if (dm.mod.isZero())
              return dm.div;
            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);
            if (cmp < 0 || r2 === 1 && cmp === 0)
              return dm.div;
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };
          BN.prototype.modrn = function modrn(num) {
            var isNegNum = num < 0;
            if (isNegNum)
              num = -num;
            assert(num <= 67108863);
            var p = (1 << 26) % num;
            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }
            return isNegNum ? -acc : acc;
          };
          BN.prototype.modn = function modn(num) {
            return this.modrn(num);
          };
          BN.prototype.idivn = function idivn(num) {
            var isNegNum = num < 0;
            if (isNegNum)
              num = -num;
            assert(num <= 67108863);
            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 67108864;
              this.words[i] = w / num | 0;
              carry = w % num;
            }
            this._strip();
            return isNegNum ? this.ineg() : this;
          };
          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };
          BN.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var x = this;
            var y = p.clone();
            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }
            var A = new BN(1);
            var B = new BN(0);
            var C = new BN(0);
            var D = new BN(1);
            var g = 0;
            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }
            var yp = y.clone();
            var xp = x.clone();
            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }
                  A.iushrn(1);
                  B.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }
                  C.iushrn(1);
                  D.iushrn(1);
                }
              }
              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }
            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };
          BN.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var a = this;
            var b = p.clone();
            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }
            var x1 = new BN(1);
            var x2 = new BN(0);
            var delta = b.clone();
            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }
                  x1.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }
                  x2.iushrn(1);
                }
              }
              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }
            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }
            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }
            return res;
          };
          BN.prototype.gcd = function gcd(num) {
            if (this.isZero())
              return num.abs();
            if (num.isZero())
              return this.abs();
            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }
            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }
              var r = a.cmp(b);
              if (r < 0) {
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }
              a.isub(b);
            } while (true);
            return b.iushln(shift);
          };
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };
          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };
          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };
          BN.prototype.bincn = function bincn(bit) {
            assert(typeof bit === "number");
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 67108863;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };
          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };
          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;
            if (this.negative !== 0 && !negative)
              return -1;
            if (this.negative === 0 && negative)
              return 1;
            this._strip();
            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }
              assert(num <= 67108863, "Number is too big");
              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0)
              return -res | 0;
            return res;
          };
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0)
              return -1;
            if (this.negative === 0 && num.negative !== 0)
              return 1;
            var res = this.ucmp(num);
            if (this.negative !== 0)
              return -res | 0;
            return res;
          };
          BN.prototype.ucmp = function ucmp(num) {
            if (this.length > num.length)
              return 1;
            if (this.length < num.length)
              return -1;
            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;
              if (a === b)
                continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };
          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };
          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };
          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };
          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };
          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };
          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };
          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };
          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };
          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };
          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };
          BN.red = function red(num) {
            return new Red(num);
          };
          BN.prototype.toRed = function toRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            assert(this.negative === 0, "red works only with positives");
            return ctx.convertTo(this)._forceRed(ctx);
          };
          BN.prototype.fromRed = function fromRed() {
            assert(this.red, "fromRed works only with numbers in reduction context");
            return this.red.convertFrom(this);
          };
          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };
          BN.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            return this._forceRed(ctx);
          };
          BN.prototype.redAdd = function redAdd(num) {
            assert(this.red, "redAdd works only with red numbers");
            return this.red.add(this, num);
          };
          BN.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, "redIAdd works only with red numbers");
            return this.red.iadd(this, num);
          };
          BN.prototype.redSub = function redSub(num) {
            assert(this.red, "redSub works only with red numbers");
            return this.red.sub(this, num);
          };
          BN.prototype.redISub = function redISub(num) {
            assert(this.red, "redISub works only with red numbers");
            return this.red.isub(this, num);
          };
          BN.prototype.redShl = function redShl(num) {
            assert(this.red, "redShl works only with red numbers");
            return this.red.shl(this, num);
          };
          BN.prototype.redMul = function redMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };
          BN.prototype.redIMul = function redIMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };
          BN.prototype.redSqr = function redSqr() {
            assert(this.red, "redSqr works only with red numbers");
            this.red._verify1(this);
            return this.red.sqr(this);
          };
          BN.prototype.redISqr = function redISqr() {
            assert(this.red, "redISqr works only with red numbers");
            this.red._verify1(this);
            return this.red.isqr(this);
          };
          BN.prototype.redSqrt = function redSqrt() {
            assert(this.red, "redSqrt works only with red numbers");
            this.red._verify1(this);
            return this.red.sqrt(this);
          };
          BN.prototype.redInvm = function redInvm() {
            assert(this.red, "redInvm works only with red numbers");
            this.red._verify1(this);
            return this.red.invm(this);
          };
          BN.prototype.redNeg = function redNeg() {
            assert(this.red, "redNeg works only with red numbers");
            this.red._verify1(this);
            return this.red.neg(this);
          };
          BN.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, "redPow(normalNum)");
            this.red._verify1(this);
            return this.red.pow(this, num);
          };
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };
          function MPrime(name, p) {
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);
            this.tmp = this._tmp();
          }
          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };
          MPrime.prototype.ireduce = function ireduce(num) {
            var r = num;
            var rlen;
            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);
            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              if (r.strip !== void 0) {
                r.strip();
              } else {
                r._strip();
              }
            }
            return r;
          };
          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };
          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };
          function K256() {
            MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
          }
          inherits(K256, MPrime);
          K256.prototype.split = function split(input, output) {
            var mask = 4194303;
            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;
            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;
            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };
          K256.prototype.imulK = function imulK(num) {
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 977;
              num.words[i] = lo & 67108863;
              lo = w * 64 + (lo / 67108864 | 0);
            }
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };
          function P224() {
            MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
          }
          inherits(P224, MPrime);
          function P192() {
            MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
          }
          inherits(P192, MPrime);
          function P25519() {
            MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
          }
          inherits(P25519, MPrime);
          P25519.prototype.imulK = function imulK(num) {
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 19 + carry;
              var lo = hi & 67108863;
              hi >>>= 26;
              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };
          BN._prime = function prime(name) {
            if (primes[name])
              return primes[name];
            var prime2;
            if (name === "k256") {
              prime2 = new K256();
            } else if (name === "p224") {
              prime2 = new P224();
            } else if (name === "p192") {
              prime2 = new P192();
            } else if (name === "p25519") {
              prime2 = new P25519();
            } else {
              throw new Error("Unknown prime " + name);
            }
            primes[name] = prime2;
            return prime2;
          };
          function Red(m) {
            if (typeof m === "string") {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), "modulus must be greater than 1");
              this.m = m;
              this.prime = null;
            }
          }
          Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, "red works only with positives");
            assert(a.red, "red works only with red numbers");
          };
          Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, "red works only with positives");
            assert(a.red && a.red === b.red, "red works only with red numbers");
          };
          Red.prototype.imod = function imod(a) {
            if (this.prime)
              return this.prime.ireduce(a)._forceRed(this);
            move(a, a.umod(this.m)._forceRed(this));
            return a;
          };
          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }
            return this.m.sub(a)._forceRed(this);
          };
          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);
            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);
            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };
          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);
            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);
            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };
          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };
          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };
          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };
          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };
          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };
          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero())
              return a.clone();
            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());
            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);
            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }
            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));
              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }
            return r;
          };
          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };
          Red.prototype.pow = function pow(a, num) {
            if (num.isZero())
              return new BN(1).toRed(this);
            if (num.cmpn(1) === 0)
              return a.clone();
            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }
            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }
            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = word >> j & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }
                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0))
                  continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }
            return res;
          };
          Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);
            return r === num ? r.clone() : r;
          };
          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };
          BN.mont = function mont(num) {
            return new Mont(num);
          };
          function Mont(m) {
            Red.call(this, m);
            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - this.shift % 26;
            }
            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);
            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);
          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };
          Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };
          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }
            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero())
              return new BN(0)._forceRed(this);
            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.invm = function invm(a) {
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(typeof module3 === "undefined" || module3, this);
      }, { "buffer": 19 }], 18: [function(require2, module3, exports3) {
        var r;
        module3.exports = function rand(len) {
          if (!r)
            r = new Rand(null);
          return r.generate(len);
        };
        function Rand(rand) {
          this.rand = rand;
        }
        module3.exports.Rand = Rand;
        Rand.prototype.generate = function generate(len) {
          return this._rand(len);
        };
        Rand.prototype._rand = function _rand(n) {
          if (this.rand.getBytes)
            return this.rand.getBytes(n);
          var res = new Uint8Array(n);
          for (var i = 0; i < res.length; i++)
            res[i] = this.rand.getByte();
          return res;
        };
        if (typeof self === "object") {
          if (self.crypto && self.crypto.getRandomValues) {
            Rand.prototype._rand = function _rand(n) {
              var arr = new Uint8Array(n);
              self.crypto.getRandomValues(arr);
              return arr;
            };
          } else if (self.msCrypto && self.msCrypto.getRandomValues) {
            Rand.prototype._rand = function _rand(n) {
              var arr = new Uint8Array(n);
              self.msCrypto.getRandomValues(arr);
              return arr;
            };
          } else if (typeof window === "object") {
            Rand.prototype._rand = function() {
              throw new Error("Not implemented yet");
            };
          }
        } else {
          try {
            var crypto2 = require2("crypto");
            if (typeof crypto2.randomBytes !== "function")
              throw new Error("Not supported");
            Rand.prototype._rand = function _rand(n) {
              return crypto2.randomBytes(n);
            };
          } catch (e) {
          }
        }
      }, { "crypto": 19 }], 19: [function(require2, module3, exports3) {
      }, {}], 20: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        function asUInt32Array(buf) {
          if (!Buffer2.isBuffer(buf))
            buf = Buffer2.from(buf);
          var len = buf.length / 4 | 0;
          var out = new Array(len);
          for (var i = 0; i < len; i++) {
            out[i] = buf.readUInt32BE(i * 4);
          }
          return out;
        }
        function scrubVec(v) {
          for (var i = 0; i < v.length; v++) {
            v[i] = 0;
          }
        }
        function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
          var SUB_MIX0 = SUB_MIX[0];
          var SUB_MIX1 = SUB_MIX[1];
          var SUB_MIX2 = SUB_MIX[2];
          var SUB_MIX3 = SUB_MIX[3];
          var s0 = M[0] ^ keySchedule[0];
          var s1 = M[1] ^ keySchedule[1];
          var s2 = M[2] ^ keySchedule[2];
          var s3 = M[3] ^ keySchedule[3];
          var t0, t1, t2, t3;
          var ksRow = 4;
          for (var round = 1; round < nRounds; round++) {
            t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
            t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
            t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
            t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
            s0 = t0;
            s1 = t1;
            s2 = t2;
            s3 = t3;
          }
          t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
          t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
          t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
          t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
          t0 = t0 >>> 0;
          t1 = t1 >>> 0;
          t2 = t2 >>> 0;
          t3 = t3 >>> 0;
          return [t0, t1, t2, t3];
        }
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var G = function() {
          var d = new Array(256);
          for (var j = 0; j < 256; j++) {
            if (j < 128) {
              d[j] = j << 1;
            } else {
              d[j] = j << 1 ^ 283;
            }
          }
          var SBOX = [];
          var INV_SBOX = [];
          var SUB_MIX = [[], [], [], []];
          var INV_SUB_MIX = [[], [], [], []];
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; ++i) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX[0][x] = t << 24 | t >>> 8;
            SUB_MIX[1][x] = t << 16 | t >>> 16;
            SUB_MIX[2][x] = t << 8 | t >>> 24;
            SUB_MIX[3][x] = t;
            t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
            INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
            INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
            INV_SUB_MIX[3][sx] = t;
            if (x === 0) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
          return {
            SBOX,
            INV_SBOX,
            SUB_MIX,
            INV_SUB_MIX
          };
        }();
        function AES(key) {
          this._key = asUInt32Array(key);
          this._reset();
        }
        AES.blockSize = 4 * 4;
        AES.keySize = 256 / 8;
        AES.prototype.blockSize = AES.blockSize;
        AES.prototype.keySize = AES.keySize;
        AES.prototype._reset = function() {
          var keyWords = this._key;
          var keySize = keyWords.length;
          var nRounds = keySize + 6;
          var ksRows = (nRounds + 1) * 4;
          var keySchedule = [];
          for (var k = 0; k < keySize; k++) {
            keySchedule[k] = keyWords[k];
          }
          for (k = keySize; k < ksRows; k++) {
            var t = keySchedule[k - 1];
            if (k % keySize === 0) {
              t = t << 8 | t >>> 24;
              t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
              t ^= RCON[k / keySize | 0] << 24;
            } else if (keySize > 6 && k % keySize === 4) {
              t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
            }
            keySchedule[k] = keySchedule[k - keySize] ^ t;
          }
          var invKeySchedule = [];
          for (var ik = 0; ik < ksRows; ik++) {
            var ksR = ksRows - ik;
            var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
            if (ik < 4 || ksR <= 4) {
              invKeySchedule[ik] = tt;
            } else {
              invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
            }
          }
          this._nRounds = nRounds;
          this._keySchedule = keySchedule;
          this._invKeySchedule = invKeySchedule;
        };
        AES.prototype.encryptBlockRaw = function(M) {
          M = asUInt32Array(M);
          return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
        };
        AES.prototype.encryptBlock = function(M) {
          var out = this.encryptBlockRaw(M);
          var buf = Buffer2.allocUnsafe(16);
          buf.writeUInt32BE(out[0], 0);
          buf.writeUInt32BE(out[1], 4);
          buf.writeUInt32BE(out[2], 8);
          buf.writeUInt32BE(out[3], 12);
          return buf;
        };
        AES.prototype.decryptBlock = function(M) {
          M = asUInt32Array(M);
          var m1 = M[1];
          M[1] = M[3];
          M[3] = m1;
          var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
          var buf = Buffer2.allocUnsafe(16);
          buf.writeUInt32BE(out[0], 0);
          buf.writeUInt32BE(out[3], 4);
          buf.writeUInt32BE(out[2], 8);
          buf.writeUInt32BE(out[1], 12);
          return buf;
        };
        AES.prototype.scrub = function() {
          scrubVec(this._keySchedule);
          scrubVec(this._invKeySchedule);
          scrubVec(this._key);
        };
        module3.exports.AES = AES;
      }, { "safe-buffer": 188 }], 21: [function(require2, module3, exports3) {
        var aes = require2("./aes");
        var Buffer2 = require2("safe-buffer").Buffer;
        var Transform = require2("cipher-base");
        var inherits = require2("inherits");
        var GHASH = require2("./ghash");
        var xor = require2("buffer-xor");
        var incr32 = require2("./incr32");
        function xorTest(a, b) {
          var out = 0;
          if (a.length !== b.length)
            out++;
          var len = Math.min(a.length, b.length);
          for (var i = 0; i < len; ++i) {
            out += a[i] ^ b[i];
          }
          return out;
        }
        function calcIv(self2, iv, ck) {
          if (iv.length === 12) {
            self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);
            return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);
          }
          var ghash = new GHASH(ck);
          var len = iv.length;
          var toPad = len % 16;
          ghash.update(iv);
          if (toPad) {
            toPad = 16 - toPad;
            ghash.update(Buffer2.alloc(toPad, 0));
          }
          ghash.update(Buffer2.alloc(8, 0));
          var ivBits = len * 8;
          var tail = Buffer2.alloc(8);
          tail.writeUIntBE(ivBits, 0, 8);
          ghash.update(tail);
          self2._finID = ghash.state;
          var out = Buffer2.from(self2._finID);
          incr32(out);
          return out;
        }
        function StreamCipher(mode, key, iv, decrypt) {
          Transform.call(this);
          var h = Buffer2.alloc(4, 0);
          this._cipher = new aes.AES(key);
          var ck = this._cipher.encryptBlock(h);
          this._ghash = new GHASH(ck);
          iv = calcIv(this, iv, ck);
          this._prev = Buffer2.from(iv);
          this._cache = Buffer2.allocUnsafe(0);
          this._secCache = Buffer2.allocUnsafe(0);
          this._decrypt = decrypt;
          this._alen = 0;
          this._len = 0;
          this._mode = mode;
          this._authTag = null;
          this._called = false;
        }
        inherits(StreamCipher, Transform);
        StreamCipher.prototype._update = function(chunk) {
          if (!this._called && this._alen) {
            var rump = 16 - this._alen % 16;
            if (rump < 16) {
              rump = Buffer2.alloc(rump, 0);
              this._ghash.update(rump);
            }
          }
          this._called = true;
          var out = this._mode.encrypt(this, chunk);
          if (this._decrypt) {
            this._ghash.update(chunk);
          } else {
            this._ghash.update(out);
          }
          this._len += chunk.length;
          return out;
        };
        StreamCipher.prototype._final = function() {
          if (this._decrypt && !this._authTag)
            throw new Error("Unsupported state or unable to authenticate data");
          var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
          if (this._decrypt && xorTest(tag, this._authTag))
            throw new Error("Unsupported state or unable to authenticate data");
          this._authTag = tag;
          this._cipher.scrub();
        };
        StreamCipher.prototype.getAuthTag = function getAuthTag() {
          if (this._decrypt || !Buffer2.isBuffer(this._authTag))
            throw new Error("Attempting to get auth tag in unsupported state");
          return this._authTag;
        };
        StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
          if (!this._decrypt)
            throw new Error("Attempting to set auth tag in unsupported state");
          this._authTag = tag;
        };
        StreamCipher.prototype.setAAD = function setAAD(buf) {
          if (this._called)
            throw new Error("Attempting to set AAD in unsupported state");
          this._ghash.update(buf);
          this._alen += buf.length;
        };
        module3.exports = StreamCipher;
      }, { "./aes": 20, "./ghash": 25, "./incr32": 26, "buffer-xor": 64, "cipher-base": 65, "inherits": 133, "safe-buffer": 188 }], 22: [function(require2, module3, exports3) {
        var ciphers = require2("./encrypter");
        var deciphers = require2("./decrypter");
        var modes = require2("./modes/list.json");
        function getCiphers() {
          return Object.keys(modes);
        }
        exports3.createCipher = exports3.Cipher = ciphers.createCipher;
        exports3.createCipheriv = exports3.Cipheriv = ciphers.createCipheriv;
        exports3.createDecipher = exports3.Decipher = deciphers.createDecipher;
        exports3.createDecipheriv = exports3.Decipheriv = deciphers.createDecipheriv;
        exports3.listCiphers = exports3.getCiphers = getCiphers;
      }, { "./decrypter": 23, "./encrypter": 24, "./modes/list.json": 34 }], 23: [function(require2, module3, exports3) {
        var AuthCipher = require2("./authCipher");
        var Buffer2 = require2("safe-buffer").Buffer;
        var MODES = require2("./modes");
        var StreamCipher = require2("./streamCipher");
        var Transform = require2("cipher-base");
        var aes = require2("./aes");
        var ebtk = require2("evp_bytestokey");
        var inherits = require2("inherits");
        function Decipher(mode, key, iv) {
          Transform.call(this);
          this._cache = new Splitter();
          this._last = void 0;
          this._cipher = new aes.AES(key);
          this._prev = Buffer2.from(iv);
          this._mode = mode;
          this._autopadding = true;
        }
        inherits(Decipher, Transform);
        Decipher.prototype._update = function(data) {
          this._cache.add(data);
          var chunk;
          var thing;
          var out = [];
          while (chunk = this._cache.get(this._autopadding)) {
            thing = this._mode.decrypt(this, chunk);
            out.push(thing);
          }
          return Buffer2.concat(out);
        };
        Decipher.prototype._final = function() {
          var chunk = this._cache.flush();
          if (this._autopadding) {
            return unpad(this._mode.decrypt(this, chunk));
          } else if (chunk) {
            throw new Error("data not multiple of block length");
          }
        };
        Decipher.prototype.setAutoPadding = function(setTo) {
          this._autopadding = !!setTo;
          return this;
        };
        function Splitter() {
          this.cache = Buffer2.allocUnsafe(0);
        }
        Splitter.prototype.add = function(data) {
          this.cache = Buffer2.concat([this.cache, data]);
        };
        Splitter.prototype.get = function(autoPadding) {
          var out;
          if (autoPadding) {
            if (this.cache.length > 16) {
              out = this.cache.slice(0, 16);
              this.cache = this.cache.slice(16);
              return out;
            }
          } else {
            if (this.cache.length >= 16) {
              out = this.cache.slice(0, 16);
              this.cache = this.cache.slice(16);
              return out;
            }
          }
          return null;
        };
        Splitter.prototype.flush = function() {
          if (this.cache.length)
            return this.cache;
        };
        function unpad(last) {
          var padded = last[15];
          if (padded < 1 || padded > 16) {
            throw new Error("unable to decrypt data");
          }
          var i = -1;
          while (++i < padded) {
            if (last[i + (16 - padded)] !== padded) {
              throw new Error("unable to decrypt data");
            }
          }
          if (padded === 16)
            return;
          return last.slice(0, 16 - padded);
        }
        function createDecipheriv(suite, password, iv) {
          var config = MODES[suite.toLowerCase()];
          if (!config)
            throw new TypeError("invalid suite type");
          if (typeof iv === "string")
            iv = Buffer2.from(iv);
          if (config.mode !== "GCM" && iv.length !== config.iv)
            throw new TypeError("invalid iv length " + iv.length);
          if (typeof password === "string")
            password = Buffer2.from(password);
          if (password.length !== config.key / 8)
            throw new TypeError("invalid key length " + password.length);
          if (config.type === "stream") {
            return new StreamCipher(config.module, password, iv, true);
          } else if (config.type === "auth") {
            return new AuthCipher(config.module, password, iv, true);
          }
          return new Decipher(config.module, password, iv);
        }
        function createDecipher(suite, password) {
          var config = MODES[suite.toLowerCase()];
          if (!config)
            throw new TypeError("invalid suite type");
          var keys = ebtk(password, false, config.key, config.iv);
          return createDecipheriv(suite, keys.key, keys.iv);
        }
        exports3.createDecipher = createDecipher;
        exports3.createDecipheriv = createDecipheriv;
      }, { "./aes": 20, "./authCipher": 21, "./modes": 33, "./streamCipher": 36, "cipher-base": 65, "evp_bytestokey": 102, "inherits": 133, "safe-buffer": 188 }], 24: [function(require2, module3, exports3) {
        var MODES = require2("./modes");
        var AuthCipher = require2("./authCipher");
        var Buffer2 = require2("safe-buffer").Buffer;
        var StreamCipher = require2("./streamCipher");
        var Transform = require2("cipher-base");
        var aes = require2("./aes");
        var ebtk = require2("evp_bytestokey");
        var inherits = require2("inherits");
        function Cipher(mode, key, iv) {
          Transform.call(this);
          this._cache = new Splitter();
          this._cipher = new aes.AES(key);
          this._prev = Buffer2.from(iv);
          this._mode = mode;
          this._autopadding = true;
        }
        inherits(Cipher, Transform);
        Cipher.prototype._update = function(data) {
          this._cache.add(data);
          var chunk;
          var thing;
          var out = [];
          while (chunk = this._cache.get()) {
            thing = this._mode.encrypt(this, chunk);
            out.push(thing);
          }
          return Buffer2.concat(out);
        };
        var PADDING = Buffer2.alloc(16, 16);
        Cipher.prototype._final = function() {
          var chunk = this._cache.flush();
          if (this._autopadding) {
            chunk = this._mode.encrypt(this, chunk);
            this._cipher.scrub();
            return chunk;
          }
          if (!chunk.equals(PADDING)) {
            this._cipher.scrub();
            throw new Error("data not multiple of block length");
          }
        };
        Cipher.prototype.setAutoPadding = function(setTo) {
          this._autopadding = !!setTo;
          return this;
        };
        function Splitter() {
          this.cache = Buffer2.allocUnsafe(0);
        }
        Splitter.prototype.add = function(data) {
          this.cache = Buffer2.concat([this.cache, data]);
        };
        Splitter.prototype.get = function() {
          if (this.cache.length > 15) {
            var out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
          }
          return null;
        };
        Splitter.prototype.flush = function() {
          var len = 16 - this.cache.length;
          var padBuff = Buffer2.allocUnsafe(len);
          var i = -1;
          while (++i < len) {
            padBuff.writeUInt8(len, i);
          }
          return Buffer2.concat([this.cache, padBuff]);
        };
        function createCipheriv(suite, password, iv) {
          var config = MODES[suite.toLowerCase()];
          if (!config)
            throw new TypeError("invalid suite type");
          if (typeof password === "string")
            password = Buffer2.from(password);
          if (password.length !== config.key / 8)
            throw new TypeError("invalid key length " + password.length);
          if (typeof iv === "string")
            iv = Buffer2.from(iv);
          if (config.mode !== "GCM" && iv.length !== config.iv)
            throw new TypeError("invalid iv length " + iv.length);
          if (config.type === "stream") {
            return new StreamCipher(config.module, password, iv);
          } else if (config.type === "auth") {
            return new AuthCipher(config.module, password, iv);
          }
          return new Cipher(config.module, password, iv);
        }
        function createCipher(suite, password) {
          var config = MODES[suite.toLowerCase()];
          if (!config)
            throw new TypeError("invalid suite type");
          var keys = ebtk(password, false, config.key, config.iv);
          return createCipheriv(suite, keys.key, keys.iv);
        }
        exports3.createCipheriv = createCipheriv;
        exports3.createCipher = createCipher;
      }, { "./aes": 20, "./authCipher": 21, "./modes": 33, "./streamCipher": 36, "cipher-base": 65, "evp_bytestokey": 102, "inherits": 133, "safe-buffer": 188 }], 25: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var ZEROES = Buffer2.alloc(16, 0);
        function toArray(buf) {
          return [
            buf.readUInt32BE(0),
            buf.readUInt32BE(4),
            buf.readUInt32BE(8),
            buf.readUInt32BE(12)
          ];
        }
        function fromArray(out) {
          var buf = Buffer2.allocUnsafe(16);
          buf.writeUInt32BE(out[0] >>> 0, 0);
          buf.writeUInt32BE(out[1] >>> 0, 4);
          buf.writeUInt32BE(out[2] >>> 0, 8);
          buf.writeUInt32BE(out[3] >>> 0, 12);
          return buf;
        }
        function GHASH(key) {
          this.h = key;
          this.state = Buffer2.alloc(16, 0);
          this.cache = Buffer2.allocUnsafe(0);
        }
        GHASH.prototype.ghash = function(block) {
          var i = -1;
          while (++i < block.length) {
            this.state[i] ^= block[i];
          }
          this._multiply();
        };
        GHASH.prototype._multiply = function() {
          var Vi = toArray(this.h);
          var Zi = [0, 0, 0, 0];
          var j, xi, lsbVi;
          var i = -1;
          while (++i < 128) {
            xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
            if (xi) {
              Zi[0] ^= Vi[0];
              Zi[1] ^= Vi[1];
              Zi[2] ^= Vi[2];
              Zi[3] ^= Vi[3];
            }
            lsbVi = (Vi[3] & 1) !== 0;
            for (j = 3; j > 0; j--) {
              Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
            }
            Vi[0] = Vi[0] >>> 1;
            if (lsbVi) {
              Vi[0] = Vi[0] ^ 225 << 24;
            }
          }
          this.state = fromArray(Zi);
        };
        GHASH.prototype.update = function(buf) {
          this.cache = Buffer2.concat([this.cache, buf]);
          var chunk;
          while (this.cache.length >= 16) {
            chunk = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            this.ghash(chunk);
          }
        };
        GHASH.prototype.final = function(abl, bl) {
          if (this.cache.length) {
            this.ghash(Buffer2.concat([this.cache, ZEROES], 16));
          }
          this.ghash(fromArray([0, abl, 0, bl]));
          return this.state;
        };
        module3.exports = GHASH;
      }, { "safe-buffer": 188 }], 26: [function(require2, module3, exports3) {
        function incr32(iv) {
          var len = iv.length;
          var item;
          while (len--) {
            item = iv.readUInt8(len);
            if (item === 255) {
              iv.writeUInt8(0, len);
            } else {
              item++;
              iv.writeUInt8(item, len);
              break;
            }
          }
        }
        module3.exports = incr32;
      }, {}], 27: [function(require2, module3, exports3) {
        var xor = require2("buffer-xor");
        exports3.encrypt = function(self2, block) {
          var data = xor(block, self2._prev);
          self2._prev = self2._cipher.encryptBlock(data);
          return self2._prev;
        };
        exports3.decrypt = function(self2, block) {
          var pad = self2._prev;
          self2._prev = block;
          var out = self2._cipher.decryptBlock(block);
          return xor(out, pad);
        };
      }, { "buffer-xor": 64 }], 28: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var xor = require2("buffer-xor");
        function encryptStart(self2, data, decrypt) {
          var len = data.length;
          var out = xor(data, self2._cache);
          self2._cache = self2._cache.slice(len);
          self2._prev = Buffer2.concat([self2._prev, decrypt ? data : out]);
          return out;
        }
        exports3.encrypt = function(self2, data, decrypt) {
          var out = Buffer2.allocUnsafe(0);
          var len;
          while (data.length) {
            if (self2._cache.length === 0) {
              self2._cache = self2._cipher.encryptBlock(self2._prev);
              self2._prev = Buffer2.allocUnsafe(0);
            }
            if (self2._cache.length <= data.length) {
              len = self2._cache.length;
              out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);
              data = data.slice(len);
            } else {
              out = Buffer2.concat([out, encryptStart(self2, data, decrypt)]);
              break;
            }
          }
          return out;
        };
      }, { "buffer-xor": 64, "safe-buffer": 188 }], 29: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        function encryptByte(self2, byteParam, decrypt) {
          var pad;
          var i = -1;
          var len = 8;
          var out = 0;
          var bit, value;
          while (++i < len) {
            pad = self2._cipher.encryptBlock(self2._prev);
            bit = byteParam & 1 << 7 - i ? 128 : 0;
            value = pad[0] ^ bit;
            out += (value & 128) >> i % 8;
            self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
          }
          return out;
        }
        function shiftIn(buffer, value) {
          var len = buffer.length;
          var i = -1;
          var out = Buffer2.allocUnsafe(buffer.length);
          buffer = Buffer2.concat([buffer, Buffer2.from([value])]);
          while (++i < len) {
            out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
          }
          return out;
        }
        exports3.encrypt = function(self2, chunk, decrypt) {
          var len = chunk.length;
          var out = Buffer2.allocUnsafe(len);
          var i = -1;
          while (++i < len) {
            out[i] = encryptByte(self2, chunk[i], decrypt);
          }
          return out;
        };
      }, { "safe-buffer": 188 }], 30: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        function encryptByte(self2, byteParam, decrypt) {
          var pad = self2._cipher.encryptBlock(self2._prev);
          var out = pad[0] ^ byteParam;
          self2._prev = Buffer2.concat([
            self2._prev.slice(1),
            Buffer2.from([decrypt ? byteParam : out])
          ]);
          return out;
        }
        exports3.encrypt = function(self2, chunk, decrypt) {
          var len = chunk.length;
          var out = Buffer2.allocUnsafe(len);
          var i = -1;
          while (++i < len) {
            out[i] = encryptByte(self2, chunk[i], decrypt);
          }
          return out;
        };
      }, { "safe-buffer": 188 }], 31: [function(require2, module3, exports3) {
        var xor = require2("buffer-xor");
        var Buffer2 = require2("safe-buffer").Buffer;
        var incr32 = require2("../incr32");
        function getBlock(self2) {
          var out = self2._cipher.encryptBlockRaw(self2._prev);
          incr32(self2._prev);
          return out;
        }
        var blockSize = 16;
        exports3.encrypt = function(self2, chunk) {
          var chunkNum = Math.ceil(chunk.length / blockSize);
          var start = self2._cache.length;
          self2._cache = Buffer2.concat([
            self2._cache,
            Buffer2.allocUnsafe(chunkNum * blockSize)
          ]);
          for (var i = 0; i < chunkNum; i++) {
            var out = getBlock(self2);
            var offset = start + i * blockSize;
            self2._cache.writeUInt32BE(out[0], offset + 0);
            self2._cache.writeUInt32BE(out[1], offset + 4);
            self2._cache.writeUInt32BE(out[2], offset + 8);
            self2._cache.writeUInt32BE(out[3], offset + 12);
          }
          var pad = self2._cache.slice(0, chunk.length);
          self2._cache = self2._cache.slice(chunk.length);
          return xor(chunk, pad);
        };
      }, { "../incr32": 26, "buffer-xor": 64, "safe-buffer": 188 }], 32: [function(require2, module3, exports3) {
        exports3.encrypt = function(self2, block) {
          return self2._cipher.encryptBlock(block);
        };
        exports3.decrypt = function(self2, block) {
          return self2._cipher.decryptBlock(block);
        };
      }, {}], 33: [function(require2, module3, exports3) {
        var modeModules = {
          ECB: require2("./ecb"),
          CBC: require2("./cbc"),
          CFB: require2("./cfb"),
          CFB8: require2("./cfb8"),
          CFB1: require2("./cfb1"),
          OFB: require2("./ofb"),
          CTR: require2("./ctr"),
          GCM: require2("./ctr")
        };
        var modes = require2("./list.json");
        for (var key in modes) {
          modes[key].module = modeModules[modes[key].mode];
        }
        module3.exports = modes;
      }, { "./cbc": 27, "./cfb": 28, "./cfb1": 29, "./cfb8": 30, "./ctr": 31, "./ecb": 32, "./list.json": 34, "./ofb": 35 }], 34: [function(require2, module3, exports3) {
        module3.exports = {
          "aes-128-ecb": {
            "cipher": "AES",
            "key": 128,
            "iv": 0,
            "mode": "ECB",
            "type": "block"
          },
          "aes-192-ecb": {
            "cipher": "AES",
            "key": 192,
            "iv": 0,
            "mode": "ECB",
            "type": "block"
          },
          "aes-256-ecb": {
            "cipher": "AES",
            "key": 256,
            "iv": 0,
            "mode": "ECB",
            "type": "block"
          },
          "aes-128-cbc": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "CBC",
            "type": "block"
          },
          "aes-192-cbc": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "CBC",
            "type": "block"
          },
          "aes-256-cbc": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "CBC",
            "type": "block"
          },
          "aes128": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "CBC",
            "type": "block"
          },
          "aes192": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "CBC",
            "type": "block"
          },
          "aes256": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "CBC",
            "type": "block"
          },
          "aes-128-cfb": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "CFB",
            "type": "stream"
          },
          "aes-192-cfb": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "CFB",
            "type": "stream"
          },
          "aes-256-cfb": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "CFB",
            "type": "stream"
          },
          "aes-128-cfb8": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "CFB8",
            "type": "stream"
          },
          "aes-192-cfb8": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "CFB8",
            "type": "stream"
          },
          "aes-256-cfb8": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "CFB8",
            "type": "stream"
          },
          "aes-128-cfb1": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "CFB1",
            "type": "stream"
          },
          "aes-192-cfb1": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "CFB1",
            "type": "stream"
          },
          "aes-256-cfb1": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "CFB1",
            "type": "stream"
          },
          "aes-128-ofb": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "OFB",
            "type": "stream"
          },
          "aes-192-ofb": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "OFB",
            "type": "stream"
          },
          "aes-256-ofb": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "OFB",
            "type": "stream"
          },
          "aes-128-ctr": {
            "cipher": "AES",
            "key": 128,
            "iv": 16,
            "mode": "CTR",
            "type": "stream"
          },
          "aes-192-ctr": {
            "cipher": "AES",
            "key": 192,
            "iv": 16,
            "mode": "CTR",
            "type": "stream"
          },
          "aes-256-ctr": {
            "cipher": "AES",
            "key": 256,
            "iv": 16,
            "mode": "CTR",
            "type": "stream"
          },
          "aes-128-gcm": {
            "cipher": "AES",
            "key": 128,
            "iv": 12,
            "mode": "GCM",
            "type": "auth"
          },
          "aes-192-gcm": {
            "cipher": "AES",
            "key": 192,
            "iv": 12,
            "mode": "GCM",
            "type": "auth"
          },
          "aes-256-gcm": {
            "cipher": "AES",
            "key": 256,
            "iv": 12,
            "mode": "GCM",
            "type": "auth"
          }
        };
      }, {}], 35: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var xor = require2("buffer-xor");
            function getBlock(self2) {
              self2._prev = self2._cipher.encryptBlock(self2._prev);
              return self2._prev;
            }
            exports3.encrypt = function(self2, chunk) {
              while (self2._cache.length < chunk.length) {
                self2._cache = Buffer2.concat([self2._cache, getBlock(self2)]);
              }
              var pad = self2._cache.slice(0, chunk.length);
              self2._cache = self2._cache.slice(chunk.length);
              return xor(chunk, pad);
            };
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "buffer": 63, "buffer-xor": 64 }], 36: [function(require2, module3, exports3) {
        var aes = require2("./aes");
        var Buffer2 = require2("safe-buffer").Buffer;
        var Transform = require2("cipher-base");
        var inherits = require2("inherits");
        function StreamCipher(mode, key, iv, decrypt) {
          Transform.call(this);
          this._cipher = new aes.AES(key);
          this._prev = Buffer2.from(iv);
          this._cache = Buffer2.allocUnsafe(0);
          this._secCache = Buffer2.allocUnsafe(0);
          this._decrypt = decrypt;
          this._mode = mode;
        }
        inherits(StreamCipher, Transform);
        StreamCipher.prototype._update = function(chunk) {
          return this._mode.encrypt(this, chunk, this._decrypt);
        };
        StreamCipher.prototype._final = function() {
          this._cipher.scrub();
        };
        module3.exports = StreamCipher;
      }, { "./aes": 20, "cipher-base": 65, "inherits": 133, "safe-buffer": 188 }], 37: [function(require2, module3, exports3) {
        var DES = require2("browserify-des");
        var aes = require2("browserify-aes/browser");
        var aesModes = require2("browserify-aes/modes");
        var desModes = require2("browserify-des/modes");
        var ebtk = require2("evp_bytestokey");
        function createCipher(suite, password) {
          suite = suite.toLowerCase();
          var keyLen, ivLen;
          if (aesModes[suite]) {
            keyLen = aesModes[suite].key;
            ivLen = aesModes[suite].iv;
          } else if (desModes[suite]) {
            keyLen = desModes[suite].key * 8;
            ivLen = desModes[suite].iv;
          } else {
            throw new TypeError("invalid suite type");
          }
          var keys = ebtk(password, false, keyLen, ivLen);
          return createCipheriv(suite, keys.key, keys.iv);
        }
        function createDecipher(suite, password) {
          suite = suite.toLowerCase();
          var keyLen, ivLen;
          if (aesModes[suite]) {
            keyLen = aesModes[suite].key;
            ivLen = aesModes[suite].iv;
          } else if (desModes[suite]) {
            keyLen = desModes[suite].key * 8;
            ivLen = desModes[suite].iv;
          } else {
            throw new TypeError("invalid suite type");
          }
          var keys = ebtk(password, false, keyLen, ivLen);
          return createDecipheriv(suite, keys.key, keys.iv);
        }
        function createCipheriv(suite, key, iv) {
          suite = suite.toLowerCase();
          if (aesModes[suite])
            return aes.createCipheriv(suite, key, iv);
          if (desModes[suite])
            return new DES({ key, iv, mode: suite });
          throw new TypeError("invalid suite type");
        }
        function createDecipheriv(suite, key, iv) {
          suite = suite.toLowerCase();
          if (aesModes[suite])
            return aes.createDecipheriv(suite, key, iv);
          if (desModes[suite])
            return new DES({ key, iv, mode: suite, decrypt: true });
          throw new TypeError("invalid suite type");
        }
        function getCiphers() {
          return Object.keys(desModes).concat(aes.getCiphers());
        }
        exports3.createCipher = exports3.Cipher = createCipher;
        exports3.createCipheriv = exports3.Cipheriv = createCipheriv;
        exports3.createDecipher = exports3.Decipher = createDecipher;
        exports3.createDecipheriv = exports3.Decipheriv = createDecipheriv;
        exports3.listCiphers = exports3.getCiphers = getCiphers;
      }, { "browserify-aes/browser": 22, "browserify-aes/modes": 33, "browserify-des": 38, "browserify-des/modes": 39, "evp_bytestokey": 102 }], 38: [function(require2, module3, exports3) {
        var CipherBase = require2("cipher-base");
        var des = require2("des.js");
        var inherits = require2("inherits");
        var Buffer2 = require2("safe-buffer").Buffer;
        var modes = {
          "des-ede3-cbc": des.CBC.instantiate(des.EDE),
          "des-ede3": des.EDE,
          "des-ede-cbc": des.CBC.instantiate(des.EDE),
          "des-ede": des.EDE,
          "des-cbc": des.CBC.instantiate(des.DES),
          "des-ecb": des.DES
        };
        modes.des = modes["des-cbc"];
        modes.des3 = modes["des-ede3-cbc"];
        module3.exports = DES;
        inherits(DES, CipherBase);
        function DES(opts) {
          CipherBase.call(this);
          var modeName = opts.mode.toLowerCase();
          var mode = modes[modeName];
          var type;
          if (opts.decrypt) {
            type = "decrypt";
          } else {
            type = "encrypt";
          }
          var key = opts.key;
          if (!Buffer2.isBuffer(key)) {
            key = Buffer2.from(key);
          }
          if (modeName === "des-ede" || modeName === "des-ede-cbc") {
            key = Buffer2.concat([key, key.slice(0, 8)]);
          }
          var iv = opts.iv;
          if (!Buffer2.isBuffer(iv)) {
            iv = Buffer2.from(iv);
          }
          this._des = mode.create({
            key,
            iv,
            type
          });
        }
        DES.prototype._update = function(data) {
          return Buffer2.from(this._des.update(data));
        };
        DES.prototype._final = function() {
          return Buffer2.from(this._des.final());
        };
      }, { "cipher-base": 65, "des.js": 73, "inherits": 133, "safe-buffer": 188 }], 39: [function(require2, module3, exports3) {
        exports3["des-ecb"] = {
          key: 8,
          iv: 0
        };
        exports3["des-cbc"] = exports3.des = {
          key: 8,
          iv: 8
        };
        exports3["des-ede3-cbc"] = exports3.des3 = {
          key: 24,
          iv: 8
        };
        exports3["des-ede3"] = {
          key: 24,
          iv: 0
        };
        exports3["des-ede-cbc"] = {
          key: 16,
          iv: 8
        };
        exports3["des-ede"] = {
          key: 16,
          iv: 0
        };
      }, {}], 40: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var BN = require2("bn.js");
            var randomBytes = require2("randombytes");
            function blind(priv) {
              var r = getr(priv);
              var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
              return { blinder, unblinder: r.invm(priv.modulus) };
            }
            function getr(priv) {
              var len = priv.modulus.byteLength();
              var r;
              do {
                r = new BN(randomBytes(len));
              } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
              return r;
            }
            function crt(msg, priv) {
              var blinds = blind(priv);
              var len = priv.modulus.byteLength();
              var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
              var c1 = blinded.toRed(BN.mont(priv.prime1));
              var c2 = blinded.toRed(BN.mont(priv.prime2));
              var qinv = priv.coefficient;
              var p = priv.prime1;
              var q = priv.prime2;
              var m1 = c1.redPow(priv.exponent1).fromRed();
              var m2 = c2.redPow(priv.exponent2).fromRed();
              var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
              return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer2, "be", len);
            }
            crt.getr = getr;
            module3.exports = crt;
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "bn.js": 17, "buffer": 63, "randombytes": 185 }], 41: [function(require2, module3, exports3) {
        module3.exports = require2("./browser/algorithms.json");
      }, { "./browser/algorithms.json": 42 }], 42: [function(require2, module3, exports3) {
        module3.exports = {
          "sha224WithRSAEncryption": {
            "sign": "rsa",
            "hash": "sha224",
            "id": "302d300d06096086480165030402040500041c"
          },
          "RSA-SHA224": {
            "sign": "ecdsa/rsa",
            "hash": "sha224",
            "id": "302d300d06096086480165030402040500041c"
          },
          "sha256WithRSAEncryption": {
            "sign": "rsa",
            "hash": "sha256",
            "id": "3031300d060960864801650304020105000420"
          },
          "RSA-SHA256": {
            "sign": "ecdsa/rsa",
            "hash": "sha256",
            "id": "3031300d060960864801650304020105000420"
          },
          "sha384WithRSAEncryption": {
            "sign": "rsa",
            "hash": "sha384",
            "id": "3041300d060960864801650304020205000430"
          },
          "RSA-SHA384": {
            "sign": "ecdsa/rsa",
            "hash": "sha384",
            "id": "3041300d060960864801650304020205000430"
          },
          "sha512WithRSAEncryption": {
            "sign": "rsa",
            "hash": "sha512",
            "id": "3051300d060960864801650304020305000440"
          },
          "RSA-SHA512": {
            "sign": "ecdsa/rsa",
            "hash": "sha512",
            "id": "3051300d060960864801650304020305000440"
          },
          "RSA-SHA1": {
            "sign": "rsa",
            "hash": "sha1",
            "id": "3021300906052b0e03021a05000414"
          },
          "ecdsa-with-SHA1": {
            "sign": "ecdsa",
            "hash": "sha1",
            "id": ""
          },
          "sha256": {
            "sign": "ecdsa",
            "hash": "sha256",
            "id": ""
          },
          "sha224": {
            "sign": "ecdsa",
            "hash": "sha224",
            "id": ""
          },
          "sha384": {
            "sign": "ecdsa",
            "hash": "sha384",
            "id": ""
          },
          "sha512": {
            "sign": "ecdsa",
            "hash": "sha512",
            "id": ""
          },
          "DSA-SHA": {
            "sign": "dsa",
            "hash": "sha1",
            "id": ""
          },
          "DSA-SHA1": {
            "sign": "dsa",
            "hash": "sha1",
            "id": ""
          },
          "DSA": {
            "sign": "dsa",
            "hash": "sha1",
            "id": ""
          },
          "DSA-WITH-SHA224": {
            "sign": "dsa",
            "hash": "sha224",
            "id": ""
          },
          "DSA-SHA224": {
            "sign": "dsa",
            "hash": "sha224",
            "id": ""
          },
          "DSA-WITH-SHA256": {
            "sign": "dsa",
            "hash": "sha256",
            "id": ""
          },
          "DSA-SHA256": {
            "sign": "dsa",
            "hash": "sha256",
            "id": ""
          },
          "DSA-WITH-SHA384": {
            "sign": "dsa",
            "hash": "sha384",
            "id": ""
          },
          "DSA-SHA384": {
            "sign": "dsa",
            "hash": "sha384",
            "id": ""
          },
          "DSA-WITH-SHA512": {
            "sign": "dsa",
            "hash": "sha512",
            "id": ""
          },
          "DSA-SHA512": {
            "sign": "dsa",
            "hash": "sha512",
            "id": ""
          },
          "DSA-RIPEMD160": {
            "sign": "dsa",
            "hash": "rmd160",
            "id": ""
          },
          "ripemd160WithRSA": {
            "sign": "rsa",
            "hash": "rmd160",
            "id": "3021300906052b2403020105000414"
          },
          "RSA-RIPEMD160": {
            "sign": "rsa",
            "hash": "rmd160",
            "id": "3021300906052b2403020105000414"
          },
          "md5WithRSAEncryption": {
            "sign": "rsa",
            "hash": "md5",
            "id": "3020300c06082a864886f70d020505000410"
          },
          "RSA-MD5": {
            "sign": "rsa",
            "hash": "md5",
            "id": "3020300c06082a864886f70d020505000410"
          }
        };
      }, {}], 43: [function(require2, module3, exports3) {
        module3.exports = {
          "1.3.132.0.10": "secp256k1",
          "1.3.132.0.33": "p224",
          "1.2.840.10045.3.1.1": "p192",
          "1.2.840.10045.3.1.7": "p256",
          "1.3.132.0.34": "p384",
          "1.3.132.0.35": "p521"
        };
      }, {}], 44: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var createHash = require2("create-hash");
        var stream = require2("readable-stream");
        var inherits = require2("inherits");
        var sign = require2("./sign");
        var verify = require2("./verify");
        var algorithms = require2("./algorithms.json");
        Object.keys(algorithms).forEach(function(key) {
          algorithms[key].id = Buffer2.from(algorithms[key].id, "hex");
          algorithms[key.toLowerCase()] = algorithms[key];
        });
        function Sign(algorithm) {
          stream.Writable.call(this);
          var data = algorithms[algorithm];
          if (!data)
            throw new Error("Unknown message digest");
          this._hashType = data.hash;
          this._hash = createHash(data.hash);
          this._tag = data.id;
          this._signType = data.sign;
        }
        inherits(Sign, stream.Writable);
        Sign.prototype._write = function _write(data, _, done) {
          this._hash.update(data);
          done();
        };
        Sign.prototype.update = function update(data, enc) {
          if (typeof data === "string")
            data = Buffer2.from(data, enc);
          this._hash.update(data);
          return this;
        };
        Sign.prototype.sign = function signMethod(key, enc) {
          this.end();
          var hash = this._hash.digest();
          var sig = sign(hash, key, this._hashType, this._signType, this._tag);
          return enc ? sig.toString(enc) : sig;
        };
        function Verify(algorithm) {
          stream.Writable.call(this);
          var data = algorithms[algorithm];
          if (!data)
            throw new Error("Unknown message digest");
          this._hash = createHash(data.hash);
          this._tag = data.id;
          this._signType = data.sign;
        }
        inherits(Verify, stream.Writable);
        Verify.prototype._write = function _write(data, _, done) {
          this._hash.update(data);
          done();
        };
        Verify.prototype.update = function update(data, enc) {
          if (typeof data === "string")
            data = Buffer2.from(data, enc);
          this._hash.update(data);
          return this;
        };
        Verify.prototype.verify = function verifyMethod(key, sig, enc) {
          if (typeof sig === "string")
            sig = Buffer2.from(sig, enc);
          this.end();
          var hash = this._hash.digest();
          return verify(sig, hash, key, this._signType, this._tag);
        };
        function createSign(algorithm) {
          return new Sign(algorithm);
        }
        function createVerify(algorithm) {
          return new Verify(algorithm);
        }
        module3.exports = {
          Sign: createSign,
          Verify: createVerify,
          createSign,
          createVerify
        };
      }, { "./algorithms.json": 42, "./sign": 45, "./verify": 46, "create-hash": 68, "inherits": 133, "readable-stream": 61, "safe-buffer": 188 }], 45: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var createHmac = require2("create-hmac");
        var crt = require2("browserify-rsa");
        var EC = require2("elliptic").ec;
        var BN = require2("bn.js");
        var parseKeys = require2("parse-asn1");
        var curves = require2("./curves.json");
        function sign(hash, key, hashType, signType, tag) {
          var priv = parseKeys(key);
          if (priv.curve) {
            if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
              throw new Error("wrong private key type");
            return ecSign(hash, priv);
          } else if (priv.type === "dsa") {
            if (signType !== "dsa")
              throw new Error("wrong private key type");
            return dsaSign(hash, priv, hashType);
          } else {
            if (signType !== "rsa" && signType !== "ecdsa/rsa")
              throw new Error("wrong private key type");
          }
          hash = Buffer2.concat([tag, hash]);
          var len = priv.modulus.byteLength();
          var pad = [0, 1];
          while (hash.length + pad.length + 1 < len)
            pad.push(255);
          pad.push(0);
          var i = -1;
          while (++i < hash.length)
            pad.push(hash[i]);
          var out = crt(pad, priv);
          return out;
        }
        function ecSign(hash, priv) {
          var curveId = curves[priv.curve.join(".")];
          if (!curveId)
            throw new Error("unknown curve " + priv.curve.join("."));
          var curve = new EC(curveId);
          var key = curve.keyFromPrivate(priv.privateKey);
          var out = key.sign(hash);
          return Buffer2.from(out.toDER());
        }
        function dsaSign(hash, priv, algo) {
          var x = priv.params.priv_key;
          var p = priv.params.p;
          var q = priv.params.q;
          var g = priv.params.g;
          var r = new BN(0);
          var k;
          var H = bits2int(hash, q).mod(q);
          var s = false;
          var kv = getKey(x, q, hash, algo);
          while (s === false) {
            k = makeKey(q, kv, algo);
            r = makeR(g, k, p, q);
            s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
            if (s.cmpn(0) === 0) {
              s = false;
              r = new BN(0);
            }
          }
          return toDER(r, s);
        }
        function toDER(r, s) {
          r = r.toArray();
          s = s.toArray();
          if (r[0] & 128)
            r = [0].concat(r);
          if (s[0] & 128)
            s = [0].concat(s);
          var total = r.length + s.length + 4;
          var res = [48, total, 2, r.length];
          res = res.concat(r, [2, s.length], s);
          return Buffer2.from(res);
        }
        function getKey(x, q, hash, algo) {
          x = Buffer2.from(x.toArray());
          if (x.length < q.byteLength()) {
            var zeros = Buffer2.alloc(q.byteLength() - x.length);
            x = Buffer2.concat([zeros, x]);
          }
          var hlen = hash.length;
          var hbits = bits2octets(hash, q);
          var v = Buffer2.alloc(hlen);
          v.fill(1);
          var k = Buffer2.alloc(hlen);
          k = createHmac(algo, k).update(v).update(Buffer2.from([0])).update(x).update(hbits).digest();
          v = createHmac(algo, k).update(v).digest();
          k = createHmac(algo, k).update(v).update(Buffer2.from([1])).update(x).update(hbits).digest();
          v = createHmac(algo, k).update(v).digest();
          return { k, v };
        }
        function bits2int(obits, q) {
          var bits = new BN(obits);
          var shift = (obits.length << 3) - q.bitLength();
          if (shift > 0)
            bits.ishrn(shift);
          return bits;
        }
        function bits2octets(bits, q) {
          bits = bits2int(bits, q);
          bits = bits.mod(q);
          var out = Buffer2.from(bits.toArray());
          if (out.length < q.byteLength()) {
            var zeros = Buffer2.alloc(q.byteLength() - out.length);
            out = Buffer2.concat([zeros, out]);
          }
          return out;
        }
        function makeKey(q, kv, algo) {
          var t;
          var k;
          do {
            t = Buffer2.alloc(0);
            while (t.length * 8 < q.bitLength()) {
              kv.v = createHmac(algo, kv.k).update(kv.v).digest();
              t = Buffer2.concat([t, kv.v]);
            }
            k = bits2int(t, q);
            kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          } while (k.cmp(q) !== -1);
          return k;
        }
        function makeR(g, k, p, q) {
          return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
        }
        module3.exports = sign;
        module3.exports.getKey = getKey;
        module3.exports.makeKey = makeKey;
      }, { "./curves.json": 43, "bn.js": 17, "browserify-rsa": 40, "create-hmac": 70, "elliptic": 84, "parse-asn1": 143, "safe-buffer": 188 }], 46: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var BN = require2("bn.js");
        var EC = require2("elliptic").ec;
        var parseKeys = require2("parse-asn1");
        var curves = require2("./curves.json");
        function verify(sig, hash, key, signType, tag) {
          var pub = parseKeys(key);
          if (pub.type === "ec") {
            if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
              throw new Error("wrong public key type");
            return ecVerify(sig, hash, pub);
          } else if (pub.type === "dsa") {
            if (signType !== "dsa")
              throw new Error("wrong public key type");
            return dsaVerify(sig, hash, pub);
          } else {
            if (signType !== "rsa" && signType !== "ecdsa/rsa")
              throw new Error("wrong public key type");
          }
          hash = Buffer2.concat([tag, hash]);
          var len = pub.modulus.byteLength();
          var pad = [1];
          var padNum = 0;
          while (hash.length + pad.length + 2 < len) {
            pad.push(255);
            padNum++;
          }
          pad.push(0);
          var i = -1;
          while (++i < hash.length) {
            pad.push(hash[i]);
          }
          pad = Buffer2.from(pad);
          var red = BN.mont(pub.modulus);
          sig = new BN(sig).toRed(red);
          sig = sig.redPow(new BN(pub.publicExponent));
          sig = Buffer2.from(sig.fromRed().toArray());
          var out = padNum < 8 ? 1 : 0;
          len = Math.min(sig.length, pad.length);
          if (sig.length !== pad.length)
            out = 1;
          i = -1;
          while (++i < len)
            out |= sig[i] ^ pad[i];
          return out === 0;
        }
        function ecVerify(sig, hash, pub) {
          var curveId = curves[pub.data.algorithm.curve.join(".")];
          if (!curveId)
            throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
          var curve = new EC(curveId);
          var pubkey = pub.data.subjectPrivateKey.data;
          return curve.verify(hash, sig, pubkey);
        }
        function dsaVerify(sig, hash, pub) {
          var p = pub.data.p;
          var q = pub.data.q;
          var g = pub.data.g;
          var y = pub.data.pub_key;
          var unpacked = parseKeys.signature.decode(sig, "der");
          var s = unpacked.s;
          var r = unpacked.r;
          checkValue(s, q);
          checkValue(r, q);
          var montp = BN.mont(p);
          var w = s.invm(q);
          var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
          return v.cmp(r) === 0;
        }
        function checkValue(b, q) {
          if (b.cmpn(0) <= 0)
            throw new Error("invalid sig");
          if (b.cmp(q) >= q)
            throw new Error("invalid sig");
        }
        module3.exports = verify;
      }, { "./curves.json": 43, "bn.js": 17, "elliptic": 84, "parse-asn1": 143, "safe-buffer": 188 }], 47: [function(require2, module3, exports3) {
        "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var codes = {};
        function createErrorType(code, message, Base) {
          if (!Base) {
            Base = Error;
          }
          function getMessage(arg1, arg2, arg3) {
            if (typeof message === "string") {
              return message;
            } else {
              return message(arg1, arg2, arg3);
            }
          }
          var NodeError = /* @__PURE__ */ function(_Base) {
            _inheritsLoose(NodeError2, _Base);
            function NodeError2(arg1, arg2, arg3) {
              return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
            }
            return NodeError2;
          }(Base);
          NodeError.prototype.name = Base.name;
          NodeError.prototype.code = code;
          codes[code] = NodeError;
        }
        function oneOf(expected, thing) {
          if (Array.isArray(expected)) {
            var len = expected.length;
            expected = expected.map(function(i) {
              return String(i);
            });
            if (len > 2) {
              return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
            } else if (len === 2) {
              return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
            } else {
              return "of ".concat(thing, " ").concat(expected[0]);
            }
          } else {
            return "of ".concat(thing, " ").concat(String(expected));
          }
        }
        function startsWith(str, search, pos) {
          return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
        }
        function endsWith(str, search, this_len) {
          if (this_len === void 0 || this_len > str.length) {
            this_len = str.length;
          }
          return str.substring(this_len - search.length, this_len) === search;
        }
        function includes(str, search, start) {
          if (typeof start !== "number") {
            start = 0;
          }
          if (start + search.length > str.length) {
            return false;
          } else {
            return str.indexOf(search, start) !== -1;
          }
        }
        createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
          return 'The value "' + value + '" is invalid for option "' + name + '"';
        }, TypeError);
        createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
          var determiner;
          if (typeof expected === "string" && startsWith(expected, "not ")) {
            determiner = "must not be";
            expected = expected.replace(/^not /, "");
          } else {
            determiner = "must be";
          }
          var msg;
          if (endsWith(name, " argument")) {
            msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          } else {
            var type = includes(name, ".") ? "property" : "argument";
            msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          }
          msg += ". Received type ".concat(typeof actual);
          return msg;
        }, TypeError);
        createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
        createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
          return "The " + name + " method is not implemented";
        });
        createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
        createErrorType("ERR_STREAM_DESTROYED", function(name) {
          return "Cannot call " + name + " after a stream was destroyed";
        });
        createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
        createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
        createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
        createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
        createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
          return "Unknown encoding: " + arg;
        }, TypeError);
        createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
        module3.exports.codes = codes;
      }, {}], 48: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            "use strict";
            var objectKeys = Object.keys || function(obj) {
              var keys2 = [];
              for (var key in obj) {
                keys2.push(key);
              }
              return keys2;
            };
            module3.exports = Duplex;
            var Readable = require2("./_stream_readable");
            var Writable = require2("./_stream_writable");
            require2("inherits")(Duplex, Readable);
            {
              var keys = objectKeys(Writable.prototype);
              for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method])
                  Duplex.prototype[method] = Writable.prototype[method];
              }
            }
            function Duplex(options) {
              if (!(this instanceof Duplex))
                return new Duplex(options);
              Readable.call(this, options);
              Writable.call(this, options);
              this.allowHalfOpen = true;
              if (options) {
                if (options.readable === false)
                  this.readable = false;
                if (options.writable === false)
                  this.writable = false;
                if (options.allowHalfOpen === false) {
                  this.allowHalfOpen = false;
                  this.once("end", onend);
                }
              }
            }
            Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
              enumerable: false,
              get: function get() {
                return this._writableState.highWaterMark;
              }
            });
            Object.defineProperty(Duplex.prototype, "writableBuffer", {
              enumerable: false,
              get: function get() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            Object.defineProperty(Duplex.prototype, "writableLength", {
              enumerable: false,
              get: function get() {
                return this._writableState.length;
              }
            });
            function onend() {
              if (this._writableState.ended)
                return;
              process.nextTick(onEndNT, this);
            }
            function onEndNT(self2) {
              self2.end();
            }
            Object.defineProperty(Duplex.prototype, "destroyed", {
              enumerable: false,
              get: function get() {
                if (this._readableState === void 0 || this._writableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
              },
              set: function set(value) {
                if (this._readableState === void 0 || this._writableState === void 0) {
                  return;
                }
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
              }
            });
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./_stream_readable": 50, "./_stream_writable": 52, "_process": 151, "inherits": 133 }], 49: [function(require2, module3, exports3) {
        "use strict";
        module3.exports = PassThrough;
        var Transform = require2("./_stream_transform");
        require2("inherits")(PassThrough, Transform);
        function PassThrough(options) {
          if (!(this instanceof PassThrough))
            return new PassThrough(options);
          Transform.call(this, options);
        }
        PassThrough.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };
      }, { "./_stream_transform": 51, "inherits": 133 }], 50: [function(require2, module3, exports3) {
        (function(process, global2) {
          (function() {
            "use strict";
            module3.exports = Readable;
            var Duplex;
            Readable.ReadableState = ReadableState;
            var EE = require2("events").EventEmitter;
            var EElistenerCount = function EElistenerCount2(emitter, type) {
              return emitter.listeners(type).length;
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("buffer").Buffer;
            var OurUint8Array = global2.Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var debugUtil = require2("util");
            var debug;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog("stream");
            } else {
              debug = function debug2() {
              };
            }
            var BufferList = require2("./internal/streams/buffer_list");
            var destroyImpl = require2("./internal/streams/destroy");
            var _require = require2("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require2("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
            var StringDecoder;
            var createReadableStreamAsyncIterator;
            var from;
            require2("inherits")(Readable, Stream);
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
            function prependListener(emitter, event, fn) {
              if (typeof emitter.prependListener === "function")
                return emitter.prependListener(event, fn);
              if (!emitter._events || !emitter._events[event])
                emitter.on(event, fn);
              else if (Array.isArray(emitter._events[event]))
                emitter._events[event].unshift(fn);
              else
                emitter._events[event] = [fn, emitter._events[event]];
            }
            function ReadableState(options, stream, isDuplex) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              if (typeof isDuplex !== "boolean")
                isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.readableObjectMode;
              this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;
              this.sync = true;
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.paused = true;
              this.emitClose = options.emitClose !== false;
              this.autoDestroy = !!options.autoDestroy;
              this.destroyed = false;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.awaitDrain = 0;
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                if (!StringDecoder)
                  StringDecoder = require2("string_decoder/").StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!(this instanceof Readable))
                return new Readable(options);
              var isDuplex = this instanceof Duplex;
              this._readableState = new ReadableState(options, this, isDuplex);
              this.readable = true;
              if (options) {
                if (typeof options.read === "function")
                  this._read = options.read;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
              }
              Stream.call(this);
            }
            Object.defineProperty(Readable.prototype, "destroyed", {
              enumerable: false,
              get: function get() {
                if (this._readableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed;
              },
              set: function set(value) {
                if (!this._readableState) {
                  return;
                }
                this._readableState.destroyed = value;
              }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function(err, cb) {
              cb(err);
            };
            Readable.prototype.push = function(chunk, encoding) {
              var state = this._readableState;
              var skipChunkCheck;
              if (!state.objectMode) {
                if (typeof chunk === "string") {
                  encoding = encoding || state.defaultEncoding;
                  if (encoding !== state.encoding) {
                    chunk = Buffer2.from(chunk, encoding);
                    encoding = "";
                  }
                  skipChunkCheck = true;
                }
              } else {
                skipChunkCheck = true;
              }
              return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };
            Readable.prototype.unshift = function(chunk) {
              return readableAddChunk(this, chunk, null, true, false);
            };
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
              debug("readableAddChunk", chunk);
              var state = stream._readableState;
              if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else {
                var er;
                if (!skipChunkCheck)
                  er = chunkInvalid(state, chunk);
                if (er) {
                  errorOrDestroy(stream, er);
                } else if (state.objectMode || chunk && chunk.length > 0) {
                  if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                    chunk = _uint8ArrayToBuffer(chunk);
                  }
                  if (addToFront) {
                    if (state.endEmitted)
                      errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                    else
                      addChunk(stream, state, chunk, true);
                  } else if (state.ended) {
                    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                  } else if (state.destroyed) {
                    return false;
                  } else {
                    state.reading = false;
                    if (state.decoder && !encoding) {
                      chunk = state.decoder.write(chunk);
                      if (state.objectMode || chunk.length !== 0)
                        addChunk(stream, state, chunk, false);
                      else
                        maybeReadMore(stream, state);
                    } else {
                      addChunk(stream, state, chunk, false);
                    }
                  }
                } else if (!addToFront) {
                  state.reading = false;
                  maybeReadMore(stream, state);
                }
              }
              return !state.ended && (state.length < state.highWaterMark || state.length === 0);
            }
            function addChunk(stream, state, chunk, addToFront) {
              if (state.flowing && state.length === 0 && !state.sync) {
                state.awaitDrain = 0;
                stream.emit("data", chunk);
              } else {
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront)
                  state.buffer.unshift(chunk);
                else
                  state.buffer.push(chunk);
                if (state.needReadable)
                  emitReadable(stream);
              }
              maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
              var er;
              if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
              }
              return er;
            }
            Readable.prototype.isPaused = function() {
              return this._readableState.flowing === false;
            };
            Readable.prototype.setEncoding = function(enc) {
              if (!StringDecoder)
                StringDecoder = require2("string_decoder/").StringDecoder;
              var decoder = new StringDecoder(enc);
              this._readableState.decoder = decoder;
              this._readableState.encoding = this._readableState.decoder.encoding;
              var p = this._readableState.buffer.head;
              var content = "";
              while (p !== null) {
                content += decoder.write(p.data);
                p = p.next;
              }
              this._readableState.buffer.clear();
              if (content !== "")
                this._readableState.buffer.push(content);
              this._readableState.length = content.length;
              return this;
            };
            var MAX_HWM = 1073741824;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }
            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended)
                return 0;
              if (state.objectMode)
                return 1;
              if (n !== n) {
                if (state.flowing && state.length)
                  return state.buffer.head.data.length;
                else
                  return state.length;
              }
              if (n > state.highWaterMark)
                state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length)
                return n;
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }
            Readable.prototype.read = function(n) {
              debug("read", n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;
              if (n !== 0)
                state.emittedReadable = false;
              if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                debug("read: emitReadable", state.length, state.ended);
                if (state.length === 0 && state.ended)
                  endReadable(this);
                else
                  emitReadable(this);
                return null;
              }
              n = howMuchToRead(n, state);
              if (n === 0 && state.ended) {
                if (state.length === 0)
                  endReadable(this);
                return null;
              }
              var doRead = state.needReadable;
              debug("need readable", doRead);
              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug("length less than watermark", doRead);
              }
              if (state.ended || state.reading) {
                doRead = false;
                debug("reading or ended", doRead);
              } else if (doRead) {
                debug("do read");
                state.reading = true;
                state.sync = true;
                if (state.length === 0)
                  state.needReadable = true;
                this._read(state.highWaterMark);
                state.sync = false;
                if (!state.reading)
                  n = howMuchToRead(nOrig, state);
              }
              var ret;
              if (n > 0)
                ret = fromList(n, state);
              else
                ret = null;
              if (ret === null) {
                state.needReadable = state.length <= state.highWaterMark;
                n = 0;
              } else {
                state.length -= n;
                state.awaitDrain = 0;
              }
              if (state.length === 0) {
                if (!state.ended)
                  state.needReadable = true;
                if (nOrig !== n && state.ended)
                  endReadable(this);
              }
              if (ret !== null)
                this.emit("data", ret);
              return ret;
            };
            function onEofChunk(stream, state) {
              debug("onEofChunk");
              if (state.ended)
                return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              if (state.sync) {
                emitReadable(stream);
              } else {
                state.needReadable = false;
                if (!state.emittedReadable) {
                  state.emittedReadable = true;
                  emitReadable_(stream);
                }
              }
            }
            function emitReadable(stream) {
              var state = stream._readableState;
              debug("emitReadable", state.needReadable, state.emittedReadable);
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug("emitReadable", state.flowing);
                state.emittedReadable = true;
                process.nextTick(emitReadable_, stream);
              }
            }
            function emitReadable_(stream) {
              var state = stream._readableState;
              debug("emitReadable_", state.destroyed, state.length, state.ended);
              if (!state.destroyed && (state.length || state.ended)) {
                stream.emit("readable");
                state.emittedReadable = false;
              }
              state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
              flow(stream);
            }
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                process.nextTick(maybeReadMore_, stream, state);
              }
            }
            function maybeReadMore_(stream, state) {
              while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
                var len = state.length;
                debug("maybeReadMore read 0");
                stream.read(0);
                if (len === state.length)
                  break;
              }
              state.readingMore = false;
            }
            Readable.prototype._read = function(n) {
              errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
              var src = this;
              var state = this._readableState;
              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
              var endFn = doEnd ? onend : unpipe;
              if (state.endEmitted)
                process.nextTick(endFn);
              else
                src.once("end", endFn);
              dest.on("unpipe", onunpipe);
              function onunpipe(readable, unpipeInfo) {
                debug("onunpipe");
                if (readable === src) {
                  if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                    unpipeInfo.hasUnpiped = true;
                    cleanup();
                  }
                }
              }
              function onend() {
                debug("onend");
                dest.end();
              }
              var ondrain = pipeOnDrain(src);
              dest.on("drain", ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug("cleanup");
                dest.removeListener("close", onclose);
                dest.removeListener("finish", onfinish);
                dest.removeListener("drain", ondrain);
                dest.removeListener("error", onerror);
                dest.removeListener("unpipe", onunpipe);
                src.removeListener("end", onend);
                src.removeListener("end", unpipe);
                src.removeListener("data", ondata);
                cleanedUp = true;
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                  ondrain();
              }
              src.on("data", ondata);
              function ondata(chunk) {
                debug("ondata");
                var ret = dest.write(chunk);
                debug("dest.write", ret);
                if (ret === false) {
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug("false write response, pause", state.awaitDrain);
                    state.awaitDrain++;
                  }
                  src.pause();
                }
              }
              function onerror(er) {
                debug("onerror", er);
                unpipe();
                dest.removeListener("error", onerror);
                if (EElistenerCount(dest, "error") === 0)
                  errorOrDestroy(dest, er);
              }
              prependListener(dest, "error", onerror);
              function onclose() {
                dest.removeListener("finish", onfinish);
                unpipe();
              }
              dest.once("close", onclose);
              function onfinish() {
                debug("onfinish");
                dest.removeListener("close", onclose);
                unpipe();
              }
              dest.once("finish", onfinish);
              function unpipe() {
                debug("unpipe");
                src.unpipe(dest);
              }
              dest.emit("pipe", src);
              if (!state.flowing) {
                debug("pipe resume");
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function pipeOnDrainFunctionResult() {
                var state = src._readableState;
                debug("pipeOnDrain", state.awaitDrain);
                if (state.awaitDrain)
                  state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function(dest) {
              var state = this._readableState;
              var unpipeInfo = {
                hasUnpiped: false
              };
              if (state.pipesCount === 0)
                return this;
              if (state.pipesCount === 1) {
                if (dest && dest !== state.pipes)
                  return this;
                if (!dest)
                  dest = state.pipes;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest)
                  dest.emit("unpipe", this, unpipeInfo);
                return this;
              }
              if (!dest) {
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                for (var i = 0; i < len; i++) {
                  dests[i].emit("unpipe", this, {
                    hasUnpiped: false
                  });
                }
                return this;
              }
              var index = indexOf(state.pipes, dest);
              if (index === -1)
                return this;
              state.pipes.splice(index, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1)
                state.pipes = state.pipes[0];
              dest.emit("unpipe", this, unpipeInfo);
              return this;
            };
            Readable.prototype.on = function(ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              var state = this._readableState;
              if (ev === "data") {
                state.readableListening = this.listenerCount("readable") > 0;
                if (state.flowing !== false)
                  this.resume();
              } else if (ev === "readable") {
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.flowing = false;
                  state.emittedReadable = false;
                  debug("on readable", state.length, state.reading);
                  if (state.length) {
                    emitReadable(this);
                  } else if (!state.reading) {
                    process.nextTick(nReadingNextTick, this);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            Readable.prototype.removeListener = function(ev, fn) {
              var res = Stream.prototype.removeListener.call(this, ev, fn);
              if (ev === "readable") {
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            Readable.prototype.removeAllListeners = function(ev) {
              var res = Stream.prototype.removeAllListeners.apply(this, arguments);
              if (ev === "readable" || ev === void 0) {
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            function updateReadableListening(self2) {
              var state = self2._readableState;
              state.readableListening = self2.listenerCount("readable") > 0;
              if (state.resumeScheduled && !state.paused) {
                state.flowing = true;
              } else if (self2.listenerCount("data") > 0) {
                self2.resume();
              }
            }
            function nReadingNextTick(self2) {
              debug("readable nexttick read 0");
              self2.read(0);
            }
            Readable.prototype.resume = function() {
              var state = this._readableState;
              if (!state.flowing) {
                debug("resume");
                state.flowing = !state.readableListening;
                resume(this, state);
              }
              state.paused = false;
              return this;
            };
            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                process.nextTick(resume_, stream, state);
              }
            }
            function resume_(stream, state) {
              debug("resume", state.reading);
              if (!state.reading) {
                stream.read(0);
              }
              state.resumeScheduled = false;
              stream.emit("resume");
              flow(stream);
              if (state.flowing && !state.reading)
                stream.read(0);
            }
            Readable.prototype.pause = function() {
              debug("call pause flowing=%j", this._readableState.flowing);
              if (this._readableState.flowing !== false) {
                debug("pause");
                this._readableState.flowing = false;
                this.emit("pause");
              }
              this._readableState.paused = true;
              return this;
            };
            function flow(stream) {
              var state = stream._readableState;
              debug("flow", state.flowing);
              while (state.flowing && stream.read() !== null) {
                ;
              }
            }
            Readable.prototype.wrap = function(stream) {
              var _this = this;
              var state = this._readableState;
              var paused = false;
              stream.on("end", function() {
                debug("wrapped end");
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length)
                    _this.push(chunk);
                }
                _this.push(null);
              });
              stream.on("data", function(chunk) {
                debug("wrapped data");
                if (state.decoder)
                  chunk = state.decoder.write(chunk);
                if (state.objectMode && (chunk === null || chunk === void 0))
                  return;
                else if (!state.objectMode && (!chunk || !chunk.length))
                  return;
                var ret = _this.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });
              for (var i in stream) {
                if (this[i] === void 0 && typeof stream[i] === "function") {
                  this[i] = function methodWrap(method) {
                    return function methodWrapReturnFunction() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }
              for (var n = 0; n < kProxyEvents.length; n++) {
                stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
              }
              this._read = function(n2) {
                debug("wrapped _read", n2);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return this;
            };
            if (typeof Symbol === "function") {
              Readable.prototype[Symbol.asyncIterator] = function() {
                if (createReadableStreamAsyncIterator === void 0) {
                  createReadableStreamAsyncIterator = require2("./internal/streams/async_iterator");
                }
                return createReadableStreamAsyncIterator(this);
              };
            }
            Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
              enumerable: false,
              get: function get() {
                return this._readableState.highWaterMark;
              }
            });
            Object.defineProperty(Readable.prototype, "readableBuffer", {
              enumerable: false,
              get: function get() {
                return this._readableState && this._readableState.buffer;
              }
            });
            Object.defineProperty(Readable.prototype, "readableFlowing", {
              enumerable: false,
              get: function get() {
                return this._readableState.flowing;
              },
              set: function set(state) {
                if (this._readableState) {
                  this._readableState.flowing = state;
                }
              }
            });
            Readable._fromList = fromList;
            Object.defineProperty(Readable.prototype, "readableLength", {
              enumerable: false,
              get: function get() {
                return this._readableState.length;
              }
            });
            function fromList(n, state) {
              if (state.length === 0)
                return null;
              var ret;
              if (state.objectMode)
                ret = state.buffer.shift();
              else if (!n || n >= state.length) {
                if (state.decoder)
                  ret = state.buffer.join("");
                else if (state.buffer.length === 1)
                  ret = state.buffer.first();
                else
                  ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                ret = state.buffer.consume(n, state.decoder);
              }
              return ret;
            }
            function endReadable(stream) {
              var state = stream._readableState;
              debug("endReadable", state.endEmitted);
              if (!state.endEmitted) {
                state.ended = true;
                process.nextTick(endReadableNT, state, stream);
              }
            }
            function endReadableNT(state, stream) {
              debug("endReadableNT", state.endEmitted, state.length);
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit("end");
                if (state.autoDestroy) {
                  var wState = stream._writableState;
                  if (!wState || wState.autoDestroy && wState.finished) {
                    stream.destroy();
                  }
                }
              }
            }
            if (typeof Symbol === "function") {
              Readable.from = function(iterable, opts) {
                if (from === void 0) {
                  from = require2("./internal/streams/from");
                }
                return from(Readable, iterable, opts);
              };
            }
            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x)
                  return i;
              }
              return -1;
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "../errors": 47, "./_stream_duplex": 48, "./internal/streams/async_iterator": 53, "./internal/streams/buffer_list": 54, "./internal/streams/destroy": 55, "./internal/streams/from": 57, "./internal/streams/state": 59, "./internal/streams/stream": 60, "_process": 151, "buffer": 63, "events": 101, "inherits": 133, "string_decoder/": 213, "util": 19 }], 51: [function(require2, module3, exports3) {
        "use strict";
        module3.exports = Transform;
        var _require$codes = require2("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
        var Duplex = require2("./_stream_duplex");
        require2("inherits")(Transform, Duplex);
        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;
          var cb = ts.writecb;
          if (cb === null) {
            return this.emit("error", new ERR_MULTIPLE_CALLBACK());
          }
          ts.writechunk = null;
          ts.writecb = null;
          if (data != null)
            this.push(data);
          cb(er);
          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);
          Duplex.call(this, options);
          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };
          this._readableState.needReadable = true;
          this._readableState.sync = false;
          if (options) {
            if (typeof options.transform === "function")
              this._transform = options.transform;
            if (typeof options.flush === "function")
              this._flush = options.flush;
          }
          this.on("prefinish", prefinish);
        }
        function prefinish() {
          var _this = this;
          if (typeof this._flush === "function" && !this._readableState.destroyed) {
            this._flush(function(er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }
        Transform.prototype.push = function(chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };
        Transform.prototype._transform = function(chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
        };
        Transform.prototype._write = function(chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };
        Transform.prototype._read = function(n) {
          var ts = this._transformState;
          if (ts.writechunk !== null && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            ts.needTransform = true;
          }
        };
        Transform.prototype._destroy = function(err, cb) {
          Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2);
          });
        };
        function done(stream, er, data) {
          if (er)
            return stream.emit("error", er);
          if (data != null)
            stream.push(data);
          if (stream._writableState.length)
            throw new ERR_TRANSFORM_WITH_LENGTH_0();
          if (stream._transformState.transforming)
            throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
          return stream.push(null);
        }
      }, { "../errors": 47, "./_stream_duplex": 48, "inherits": 133 }], 52: [function(require2, module3, exports3) {
        (function(process, global2) {
          (function() {
            "use strict";
            module3.exports = Writable;
            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }
            function CorkedRequest(state) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function() {
                onCorkedFinish(_this, state);
              };
            }
            var Duplex;
            Writable.WritableState = WritableState;
            var internalUtil = {
              deprecate: require2("util-deprecate")
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("buffer").Buffer;
            var OurUint8Array = global2.Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = require2("./internal/streams/destroy");
            var _require = require2("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require2("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            require2("inherits")(Writable, Stream);
            function nop() {
            }
            function WritableState(options, stream, isDuplex) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              if (typeof isDuplex !== "boolean")
                isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.writableObjectMode;
              this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
              this.finalCalled = false;
              this.needDrain = false;
              this.ending = false;
              this.ended = false;
              this.finished = false;
              this.destroyed = false;
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.length = 0;
              this.writing = false;
              this.corked = 0;
              this.sync = true;
              this.bufferProcessing = false;
              this.onwrite = function(er) {
                onwrite(stream, er);
              };
              this.writecb = null;
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;
              this.pendingcb = 0;
              this.prefinished = false;
              this.errorEmitted = false;
              this.emitClose = options.emitClose !== false;
              this.autoDestroy = !!options.autoDestroy;
              this.bufferedRequestCount = 0;
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function() {
              try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                  get: internalUtil.deprecate(function writableStateBufferGetter() {
                    return this.getBuffer();
                  }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                });
              } catch (_) {
              }
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function value(object) {
                  if (realHasInstance.call(this, object))
                    return true;
                  if (this !== Writable)
                    return false;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function realHasInstance2(object) {
                return object instanceof this;
              };
            }
            function Writable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              var isDuplex = this instanceof Duplex;
              if (!isDuplex && !realHasInstance.call(Writable, this))
                return new Writable(options);
              this._writableState = new WritableState(options, this, isDuplex);
              this.writable = true;
              if (options) {
                if (typeof options.write === "function")
                  this._write = options.write;
                if (typeof options.writev === "function")
                  this._writev = options.writev;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
                if (typeof options.final === "function")
                  this._final = options.final;
              }
              Stream.call(this);
            }
            Writable.prototype.pipe = function() {
              errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            };
            function writeAfterEnd(stream, cb) {
              var er = new ERR_STREAM_WRITE_AFTER_END();
              errorOrDestroy(stream, er);
              process.nextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
              var er;
              if (chunk === null) {
                er = new ERR_STREAM_NULL_VALUES();
              } else if (typeof chunk !== "string" && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
              }
              if (er) {
                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
                return false;
              }
              return true;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;
              var isBuf = !state.objectMode && _isUint8Array(chunk);
              if (isBuf && !Buffer2.isBuffer(chunk)) {
                chunk = _uint8ArrayToBuffer(chunk);
              }
              if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (isBuf)
                encoding = "buffer";
              else if (!encoding)
                encoding = state.defaultEncoding;
              if (typeof cb !== "function")
                cb = nop;
              if (state.ending)
                writeAfterEnd(this, cb);
              else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
              }
              return ret;
            };
            Writable.prototype.cork = function() {
              this._writableState.corked++;
            };
            Writable.prototype.uncork = function() {
              var state = this._writableState;
              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
                  clearBuffer(this, state);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              if (typeof encoding === "string")
                encoding = encoding.toLowerCase();
              if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                throw new ERR_UNKNOWN_ENCODING(encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            Object.defineProperty(Writable.prototype, "writableBuffer", {
              enumerable: false,
              get: function get() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                chunk = Buffer2.from(chunk, encoding);
              }
              return chunk;
            }
            Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
              enumerable: false,
              get: function get() {
                return this._writableState.highWaterMark;
              }
            });
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                if (chunk !== newChunk) {
                  isBuf = true;
                  encoding = "buffer";
                  chunk = newChunk;
                }
              }
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark;
              if (!ret)
                state.needDrain = true;
              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                  chunk,
                  encoding,
                  isBuf,
                  callback: cb,
                  next: null
                };
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }
              return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (state.destroyed)
                state.onwrite(new ERR_STREAM_DESTROYED("write"));
              else if (writev)
                stream._writev(chunk, state.onwrite);
              else
                stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) {
                process.nextTick(cb, er);
                process.nextTick(finishMaybe, stream, state);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
              } else {
                cb(er);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
                finishMaybe(stream, state);
              }
            }
            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }
            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              if (typeof cb !== "function")
                throw new ERR_MULTIPLE_CALLBACK();
              onwriteStateUpdate(state);
              if (er)
                onwriteError(stream, state, sync, er, cb);
              else {
                var finished = needFinish(state) || stream.destroyed;
                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  process.nextTick(afterWrite, stream, state, finished, cb);
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }
            function afterWrite(stream, state, finished, cb) {
              if (!finished)
                onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit("drain");
              }
            }
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                var allBuffers = true;
                while (entry) {
                  buffer[count] = entry;
                  if (!entry.isBuf)
                    allBuffers = false;
                  entry = entry.next;
                  count += 1;
                }
                buffer.allBuffers = allBuffers;
                doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
                state.bufferedRequestCount = 0;
              } else {
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  state.bufferedRequestCount--;
                  if (state.writing) {
                    break;
                  }
                }
                if (entry === null)
                  state.lastBufferedRequest = null;
              }
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
              cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
              var state = this._writableState;
              if (typeof chunk === "function") {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== void 0)
                this.write(chunk, encoding);
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }
              if (!state.ending)
                endWritable(this, state, cb);
              return this;
            };
            Object.defineProperty(Writable.prototype, "writableLength", {
              enumerable: false,
              get: function get() {
                return this._writableState.length;
              }
            });
            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
              stream._final(function(err) {
                state.pendingcb--;
                if (err) {
                  errorOrDestroy(stream, err);
                }
                state.prefinished = true;
                stream.emit("prefinish");
                finishMaybe(stream, state);
              });
            }
            function prefinish(stream, state) {
              if (!state.prefinished && !state.finalCalled) {
                if (typeof stream._final === "function" && !state.destroyed) {
                  state.pendingcb++;
                  state.finalCalled = true;
                  process.nextTick(callFinal, stream, state);
                } else {
                  state.prefinished = true;
                  stream.emit("prefinish");
                }
              }
            }
            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                prefinish(stream, state);
                if (state.pendingcb === 0) {
                  state.finished = true;
                  stream.emit("finish");
                  if (state.autoDestroy) {
                    var rState = stream._readableState;
                    if (!rState || rState.autoDestroy && rState.endEmitted) {
                      stream.destroy();
                    }
                  }
                }
              }
              return need;
            }
            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished)
                  process.nextTick(cb);
                else
                  stream.once("finish", cb);
              }
              state.ended = true;
              stream.writable = false;
            }
            function onCorkedFinish(corkReq, state, err) {
              var entry = corkReq.entry;
              corkReq.entry = null;
              while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
              }
              state.corkedRequestsFree.next = corkReq;
            }
            Object.defineProperty(Writable.prototype, "destroyed", {
              enumerable: false,
              get: function get() {
                if (this._writableState === void 0) {
                  return false;
                }
                return this._writableState.destroyed;
              },
              set: function set(value) {
                if (!this._writableState) {
                  return;
                }
                this._writableState.destroyed = value;
              }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function(err, cb) {
              cb(err);
            };
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "../errors": 47, "./_stream_duplex": 48, "./internal/streams/destroy": 55, "./internal/streams/state": 59, "./internal/streams/stream": 60, "_process": 151, "buffer": 63, "inherits": 133, "util-deprecate": 214 }], 53: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            "use strict";
            var _Object$setPrototypeO;
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            var finished = require2("./end-of-stream");
            var kLastResolve = Symbol("lastResolve");
            var kLastReject = Symbol("lastReject");
            var kError = Symbol("error");
            var kEnded = Symbol("ended");
            var kLastPromise = Symbol("lastPromise");
            var kHandlePromise = Symbol("handlePromise");
            var kStream = Symbol("stream");
            function createIterResult(value, done) {
              return {
                value,
                done
              };
            }
            function readAndResolve(iter) {
              var resolve = iter[kLastResolve];
              if (resolve !== null) {
                var data = iter[kStream].read();
                if (data !== null) {
                  iter[kLastPromise] = null;
                  iter[kLastResolve] = null;
                  iter[kLastReject] = null;
                  resolve(createIterResult(data, false));
                }
              }
            }
            function onReadable(iter) {
              process.nextTick(readAndResolve, iter);
            }
            function wrapForNext(lastPromise, iter) {
              return function(resolve, reject) {
                lastPromise.then(function() {
                  if (iter[kEnded]) {
                    resolve(createIterResult(void 0, true));
                    return;
                  }
                  iter[kHandlePromise](resolve, reject);
                }, reject);
              };
            }
            var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
            });
            var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
              get stream() {
                return this[kStream];
              },
              next: function next() {
                var _this = this;
                var error = this[kError];
                if (error !== null) {
                  return Promise.reject(error);
                }
                if (this[kEnded]) {
                  return Promise.resolve(createIterResult(void 0, true));
                }
                if (this[kStream].destroyed) {
                  return new Promise(function(resolve, reject) {
                    process.nextTick(function() {
                      if (_this[kError]) {
                        reject(_this[kError]);
                      } else {
                        resolve(createIterResult(void 0, true));
                      }
                    });
                  });
                }
                var lastPromise = this[kLastPromise];
                var promise;
                if (lastPromise) {
                  promise = new Promise(wrapForNext(lastPromise, this));
                } else {
                  var data = this[kStream].read();
                  if (data !== null) {
                    return Promise.resolve(createIterResult(data, false));
                  }
                  promise = new Promise(this[kHandlePromise]);
                }
                this[kLastPromise] = promise;
                return promise;
              }
            }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
              return this;
            }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
              var _this2 = this;
              return new Promise(function(resolve, reject) {
                _this2[kStream].destroy(null, function(err) {
                  if (err) {
                    reject(err);
                    return;
                  }
                  resolve(createIterResult(void 0, true));
                });
              });
            }), _Object$setPrototypeO), AsyncIteratorPrototype);
            var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
              var _Object$create;
              var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
                value: stream,
                writable: true
              }), _defineProperty(_Object$create, kLastResolve, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kLastReject, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kError, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kEnded, {
                value: stream._readableState.endEmitted,
                writable: true
              }), _defineProperty(_Object$create, kHandlePromise, {
                value: function value(resolve, reject) {
                  var data = iterator[kStream].read();
                  if (data) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    resolve(createIterResult(data, false));
                  } else {
                    iterator[kLastResolve] = resolve;
                    iterator[kLastReject] = reject;
                  }
                },
                writable: true
              }), _Object$create));
              iterator[kLastPromise] = null;
              finished(stream, function(err) {
                if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                  var reject = iterator[kLastReject];
                  if (reject !== null) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    reject(err);
                  }
                  iterator[kError] = err;
                  return;
                }
                var resolve = iterator[kLastResolve];
                if (resolve !== null) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  resolve(createIterResult(void 0, true));
                }
                iterator[kEnded] = true;
              });
              stream.on("readable", onReadable.bind(null, iterator));
              return iterator;
            };
            module3.exports = createReadableStreamAsyncIterator;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./end-of-stream": 56, "_process": 151 }], 54: [function(require2, module3, exports3) {
        "use strict";
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          return Constructor;
        }
        var _require = require2("buffer"), Buffer2 = _require.Buffer;
        var _require2 = require2("util"), inspect = _require2.inspect;
        var custom = inspect && inspect.custom || "inspect";
        function copyBuffer(src, target, offset) {
          Buffer2.prototype.copy.call(src, target, offset);
        }
        module3.exports = /* @__PURE__ */ function() {
          function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          _createClass(BufferList, [{
            key: "push",
            value: function push(v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0)
                this.tail.next = entry;
              else
                this.head = entry;
              this.tail = entry;
              ++this.length;
            }
          }, {
            key: "unshift",
            value: function unshift(v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0)
                this.tail = entry;
              this.head = entry;
              ++this.length;
            }
          }, {
            key: "shift",
            value: function shift() {
              if (this.length === 0)
                return;
              var ret = this.head.data;
              if (this.length === 1)
                this.head = this.tail = null;
              else
                this.head = this.head.next;
              --this.length;
              return ret;
            }
          }, {
            key: "clear",
            value: function clear() {
              this.head = this.tail = null;
              this.length = 0;
            }
          }, {
            key: "join",
            value: function join(s) {
              if (this.length === 0)
                return "";
              var p = this.head;
              var ret = "" + p.data;
              while (p = p.next) {
                ret += s + p.data;
              }
              return ret;
            }
          }, {
            key: "concat",
            value: function concat(n) {
              if (this.length === 0)
                return Buffer2.alloc(0);
              var ret = Buffer2.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;
              while (p) {
                copyBuffer(p.data, ret, i);
                i += p.data.length;
                p = p.next;
              }
              return ret;
            }
          }, {
            key: "consume",
            value: function consume(n, hasStrings) {
              var ret;
              if (n < this.head.data.length) {
                ret = this.head.data.slice(0, n);
                this.head.data = this.head.data.slice(n);
              } else if (n === this.head.data.length) {
                ret = this.shift();
              } else {
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
              }
              return ret;
            }
          }, {
            key: "first",
            value: function first() {
              return this.head.data;
            }
          }, {
            key: "_getString",
            value: function _getString(n) {
              var p = this.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length)
                  ret += str;
                else
                  ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next)
                      this.head = p.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
          }, {
            key: "_getBuffer",
            value: function _getBuffer(n) {
              var ret = Buffer2.allocUnsafe(n);
              var p = this.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next)
                      this.head = p.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
          }, {
            key: custom,
            value: function value(_, options) {
              return inspect(this, _objectSpread({}, options, {
                depth: 0,
                customInspect: false
              }));
            }
          }]);
          return BufferList;
        }();
      }, { "buffer": 63, "util": 19 }], 55: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            "use strict";
            function destroy(err, cb) {
              var _this = this;
              var readableDestroyed = this._readableState && this._readableState.destroyed;
              var writableDestroyed = this._writableState && this._writableState.destroyed;
              if (readableDestroyed || writableDestroyed) {
                if (cb) {
                  cb(err);
                } else if (err) {
                  if (!this._writableState) {
                    process.nextTick(emitErrorNT, this, err);
                  } else if (!this._writableState.errorEmitted) {
                    this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorNT, this, err);
                  }
                }
                return this;
              }
              if (this._readableState) {
                this._readableState.destroyed = true;
              }
              if (this._writableState) {
                this._writableState.destroyed = true;
              }
              this._destroy(err || null, function(err2) {
                if (!cb && err2) {
                  if (!_this._writableState) {
                    process.nextTick(emitErrorAndCloseNT, _this, err2);
                  } else if (!_this._writableState.errorEmitted) {
                    _this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorAndCloseNT, _this, err2);
                  } else {
                    process.nextTick(emitCloseNT, _this);
                  }
                } else if (cb) {
                  process.nextTick(emitCloseNT, _this);
                  cb(err2);
                } else {
                  process.nextTick(emitCloseNT, _this);
                }
              });
              return this;
            }
            function emitErrorAndCloseNT(self2, err) {
              emitErrorNT(self2, err);
              emitCloseNT(self2);
            }
            function emitCloseNT(self2) {
              if (self2._writableState && !self2._writableState.emitClose)
                return;
              if (self2._readableState && !self2._readableState.emitClose)
                return;
              self2.emit("close");
            }
            function undestroy() {
              if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
              }
              if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finalCalled = false;
                this._writableState.prefinished = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
              }
            }
            function emitErrorNT(self2, err) {
              self2.emit("error", err);
            }
            function errorOrDestroy(stream, err) {
              var rState = stream._readableState;
              var wState = stream._writableState;
              if (rState && rState.autoDestroy || wState && wState.autoDestroy)
                stream.destroy(err);
              else
                stream.emit("error", err);
            }
            module3.exports = {
              destroy,
              undestroy,
              errorOrDestroy
            };
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 151 }], 56: [function(require2, module3, exports3) {
        "use strict";
        var ERR_STREAM_PREMATURE_CLOSE = require2("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
        function once(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            callback.apply(this, args);
          };
        }
        function noop() {
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function eos(stream, opts, callback) {
          if (typeof opts === "function")
            return eos(stream, null, opts);
          if (!opts)
            opts = {};
          callback = once(callback || noop);
          var readable = opts.readable || opts.readable !== false && stream.readable;
          var writable = opts.writable || opts.writable !== false && stream.writable;
          var onlegacyfinish = function onlegacyfinish2() {
            if (!stream.writable)
              onfinish();
          };
          var writableEnded = stream._writableState && stream._writableState.finished;
          var onfinish = function onfinish2() {
            writable = false;
            writableEnded = true;
            if (!readable)
              callback.call(stream);
          };
          var readableEnded = stream._readableState && stream._readableState.endEmitted;
          var onend = function onend2() {
            readable = false;
            readableEnded = true;
            if (!writable)
              callback.call(stream);
          };
          var onerror = function onerror2(err) {
            callback.call(stream, err);
          };
          var onclose = function onclose2() {
            var err;
            if (readable && !readableEnded) {
              if (!stream._readableState || !stream._readableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
            if (writable && !writableEnded) {
              if (!stream._writableState || !stream._writableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
          };
          var onrequest = function onrequest2() {
            stream.req.on("finish", onfinish);
          };
          if (isRequest(stream)) {
            stream.on("complete", onfinish);
            stream.on("abort", onclose);
            if (stream.req)
              onrequest();
            else
              stream.on("request", onrequest);
          } else if (writable && !stream._writableState) {
            stream.on("end", onlegacyfinish);
            stream.on("close", onlegacyfinish);
          }
          stream.on("end", onend);
          stream.on("finish", onfinish);
          if (opts.error !== false)
            stream.on("error", onerror);
          stream.on("close", onclose);
          return function() {
            stream.removeListener("complete", onfinish);
            stream.removeListener("abort", onclose);
            stream.removeListener("request", onrequest);
            if (stream.req)
              stream.req.removeListener("finish", onfinish);
            stream.removeListener("end", onlegacyfinish);
            stream.removeListener("close", onlegacyfinish);
            stream.removeListener("finish", onfinish);
            stream.removeListener("end", onend);
            stream.removeListener("error", onerror);
            stream.removeListener("close", onclose);
          };
        }
        module3.exports = eos;
      }, { "../../../errors": 47 }], 57: [function(require2, module3, exports3) {
        module3.exports = function() {
          throw new Error("Readable.from is not available in the browser");
        };
      }, {}], 58: [function(require2, module3, exports3) {
        "use strict";
        var eos;
        function once(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            callback.apply(void 0, arguments);
          };
        }
        var _require$codes = require2("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
        function noop(err) {
          if (err)
            throw err;
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function destroyer(stream, reading, writing, callback) {
          callback = once(callback);
          var closed = false;
          stream.on("close", function() {
            closed = true;
          });
          if (eos === void 0)
            eos = require2("./end-of-stream");
          eos(stream, {
            readable: reading,
            writable: writing
          }, function(err) {
            if (err)
              return callback(err);
            closed = true;
            callback();
          });
          var destroyed = false;
          return function(err) {
            if (closed)
              return;
            if (destroyed)
              return;
            destroyed = true;
            if (isRequest(stream))
              return stream.abort();
            if (typeof stream.destroy === "function")
              return stream.destroy();
            callback(err || new ERR_STREAM_DESTROYED("pipe"));
          };
        }
        function call(fn) {
          fn();
        }
        function pipe(from, to) {
          return from.pipe(to);
        }
        function popCallback(streams) {
          if (!streams.length)
            return noop;
          if (typeof streams[streams.length - 1] !== "function")
            return noop;
          return streams.pop();
        }
        function pipeline() {
          for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
            streams[_key] = arguments[_key];
          }
          var callback = popCallback(streams);
          if (Array.isArray(streams[0]))
            streams = streams[0];
          if (streams.length < 2) {
            throw new ERR_MISSING_ARGS("streams");
          }
          var error;
          var destroys = streams.map(function(stream, i) {
            var reading = i < streams.length - 1;
            var writing = i > 0;
            return destroyer(stream, reading, writing, function(err) {
              if (!error)
                error = err;
              if (err)
                destroys.forEach(call);
              if (reading)
                return;
              destroys.forEach(call);
              callback(error);
            });
          });
          return streams.reduce(pipe);
        }
        module3.exports = pipeline;
      }, { "../../../errors": 47, "./end-of-stream": 56 }], 59: [function(require2, module3, exports3) {
        "use strict";
        var ERR_INVALID_OPT_VALUE = require2("../../../errors").codes.ERR_INVALID_OPT_VALUE;
        function highWaterMarkFrom(options, isDuplex, duplexKey) {
          return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }
        function getHighWaterMark(state, options, duplexKey, isDuplex) {
          var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
          if (hwm != null) {
            if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
              var name = isDuplex ? duplexKey : "highWaterMark";
              throw new ERR_INVALID_OPT_VALUE(name, hwm);
            }
            return Math.floor(hwm);
          }
          return state.objectMode ? 16 : 16 * 1024;
        }
        module3.exports = {
          getHighWaterMark
        };
      }, { "../../../errors": 47 }], 60: [function(require2, module3, exports3) {
        module3.exports = require2("events").EventEmitter;
      }, { "events": 101 }], 61: [function(require2, module3, exports3) {
        exports3 = module3.exports = require2("./lib/_stream_readable.js");
        exports3.Stream = exports3;
        exports3.Readable = exports3;
        exports3.Writable = require2("./lib/_stream_writable.js");
        exports3.Duplex = require2("./lib/_stream_duplex.js");
        exports3.Transform = require2("./lib/_stream_transform.js");
        exports3.PassThrough = require2("./lib/_stream_passthrough.js");
        exports3.finished = require2("./lib/internal/streams/end-of-stream.js");
        exports3.pipeline = require2("./lib/internal/streams/pipeline.js");
      }, { "./lib/_stream_duplex.js": 48, "./lib/_stream_passthrough.js": 49, "./lib/_stream_readable.js": 50, "./lib/_stream_transform.js": 51, "./lib/_stream_writable.js": 52, "./lib/internal/streams/end-of-stream.js": 56, "./lib/internal/streams/pipeline.js": 58 }], 62: [function(require2, module3, exports3) {
        arguments[4][19][0].apply(exports3, arguments);
      }, { "dup": 19 }], 63: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <https://feross.org>
             * @license  MIT
             */
            "use strict";
            var base64 = require2("base64-js");
            var ieee754 = require2("ieee754");
            exports3.Buffer = Buffer3;
            exports3.SlowBuffer = SlowBuffer;
            exports3.INSPECT_MAX_BYTES = 50;
            var K_MAX_LENGTH = 2147483647;
            exports3.kMaxLength = K_MAX_LENGTH;
            Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
              console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
            }
            function typedArraySupport() {
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                  return 42;
                } };
                return arr.foo() === 42;
              } catch (e) {
                return false;
              }
            }
            Object.defineProperty(Buffer3.prototype, "parent", {
              enumerable: true,
              get: function() {
                if (!Buffer3.isBuffer(this))
                  return void 0;
                return this.buffer;
              }
            });
            Object.defineProperty(Buffer3.prototype, "offset", {
              enumerable: true,
              get: function() {
                if (!Buffer3.isBuffer(this))
                  return void 0;
                return this.byteOffset;
              }
            });
            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError('The value "' + length + '" is invalid for option "size"');
              }
              var buf = new Uint8Array(length);
              buf.__proto__ = Buffer3.prototype;
              return buf;
            }
            function Buffer3(arg, encodingOrOffset, length) {
              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new TypeError('The "string" argument must be of type string. Received type number');
                }
                return allocUnsafe(arg);
              }
              return from(arg, encodingOrOffset, length);
            }
            if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer3[Symbol.species] === Buffer3) {
              Object.defineProperty(Buffer3, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
              });
            }
            Buffer3.poolSize = 8192;
            function from(value, encodingOrOffset, length) {
              if (typeof value === "string") {
                return fromString(value, encodingOrOffset);
              }
              if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
              }
              if (value == null) {
                throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
              }
              if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }
              if (typeof value === "number") {
                throw new TypeError('The "value" argument must not be of type number. Received type number');
              }
              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer3.from(valueOf, encodingOrOffset, length);
              }
              var b = fromObject(value);
              if (b)
                return b;
              if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
              }
              throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
            }
            Buffer3.from = function(value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length);
            };
            Buffer3.prototype.__proto__ = Uint8Array.prototype;
            Buffer3.__proto__ = Uint8Array;
            function assertSize(size) {
              if (typeof size !== "number") {
                throw new TypeError('"size" argument must be of type number');
              } else if (size < 0) {
                throw new RangeError('The value "' + size + '" is invalid for option "size"');
              }
            }
            function alloc(size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size);
              }
              if (fill !== void 0) {
                return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
              }
              return createBuffer(size);
            }
            Buffer3.alloc = function(size, fill, encoding) {
              return alloc(size, fill, encoding);
            };
            function allocUnsafe(size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }
            Buffer3.allocUnsafe = function(size) {
              return allocUnsafe(size);
            };
            Buffer3.allocUnsafeSlow = function(size) {
              return allocUnsafe(size);
            };
            function fromString(string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }
              if (!Buffer3.isEncoding(encoding)) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);
              var actual = buf.write(string, encoding);
              if (actual !== length) {
                buf = buf.slice(0, actual);
              }
              return buf;
            }
            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }
            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
              }
              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
              }
              var buf;
              if (byteOffset === void 0 && length === void 0) {
                buf = new Uint8Array(array);
              } else if (length === void 0) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }
              buf.__proto__ = Buffer3.prototype;
              return buf;
            }
            function fromObject(obj) {
              if (Buffer3.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);
                if (buf.length === 0) {
                  return buf;
                }
                obj.copy(buf, 0, 0, len);
                return buf;
              }
              if (obj.length !== void 0) {
                if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                  return createBuffer(0);
                }
                return fromArrayLike(obj);
              }
              if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
              }
            }
            function checked(length) {
              if (length >= K_MAX_LENGTH) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
              }
              return length | 0;
            }
            function SlowBuffer(length) {
              if (+length != length) {
                length = 0;
              }
              return Buffer3.alloc(+length);
            }
            Buffer3.isBuffer = function isBuffer(b) {
              return b != null && b._isBuffer === true && b !== Buffer3.prototype;
            };
            Buffer3.compare = function compare(a, b) {
              if (isInstance(a, Uint8Array))
                a = Buffer3.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array))
                b = Buffer3.from(b, b.offset, b.byteLength);
              if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
                throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
              }
              if (a === b)
                return 0;
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            Buffer3.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            };
            Buffer3.concat = function concat(list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }
              if (list.length === 0) {
                return Buffer3.alloc(0);
              }
              var i;
              if (length === void 0) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }
              var buffer = Buffer3.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                  buf = Buffer3.from(buf);
                }
                if (!Buffer3.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };
            function byteLength(string, encoding) {
              if (Buffer3.isBuffer(string)) {
                return string.length;
              }
              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength;
              }
              if (typeof string !== "string") {
                throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
              }
              var len = string.length;
              var mustMatch = arguments.length > 2 && arguments[2] === true;
              if (!mustMatch && len === 0)
                return 0;
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;
                  case "utf8":
                  case "utf-8":
                    return utf8ToBytes(string).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;
                  case "hex":
                    return len >>> 1;
                  case "base64":
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length;
                    }
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;
              if (start === void 0 || start < 0) {
                start = 0;
              }
              if (start > this.length) {
                return "";
              }
              if (end === void 0 || end > this.length) {
                end = this.length;
              }
              if (end <= 0) {
                return "";
              }
              end >>>= 0;
              start >>>= 0;
              if (end <= start) {
                return "";
              }
              if (!encoding)
                encoding = "utf8";
              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);
                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);
                  case "ascii":
                    return asciiSlice(this, start, end);
                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);
                  case "base64":
                    return base64Slice(this, start, end);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.prototype._isBuffer = true;
            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }
            Buffer3.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 16-bits");
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };
            Buffer3.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 32-bits");
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };
            Buffer3.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 64-bits");
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };
            Buffer3.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0)
                return "";
              if (arguments.length === 0)
                return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
            Buffer3.prototype.equals = function equals(b) {
              if (!Buffer3.isBuffer(b))
                throw new TypeError("Argument must be a Buffer");
              if (this === b)
                return true;
              return Buffer3.compare(this, b) === 0;
            };
            Buffer3.prototype.inspect = function inspect() {
              var str = "";
              var max = exports3.INSPECT_MAX_BYTES;
              str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
              if (this.length > max)
                str += " ... ";
              return "<Buffer " + str + ">";
            };
            Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer3.from(target, target.offset, target.byteLength);
              }
              if (!Buffer3.isBuffer(target)) {
                throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
              }
              if (start === void 0) {
                start = 0;
              }
              if (end === void 0) {
                end = target ? target.length : 0;
              }
              if (thisStart === void 0) {
                thisStart = 0;
              }
              if (thisEnd === void 0) {
                thisEnd = this.length;
              }
              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError("out of range index");
              }
              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }
              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target)
                return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);
              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              if (buffer.length === 0)
                return -1;
              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 2147483647) {
                byteOffset = 2147483647;
              } else if (byteOffset < -2147483648) {
                byteOffset = -2147483648;
              }
              byteOffset = +byteOffset;
              if (numberIsNaN(byteOffset)) {
                byteOffset = dir ? 0 : buffer.length - 1;
              }
              if (byteOffset < 0)
                byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir)
                  return -1;
                else
                  byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir)
                  byteOffset = 0;
                else
                  return -1;
              }
              if (typeof val === "string") {
                val = Buffer3.from(val, encoding);
              }
              if (Buffer3.isBuffer(val)) {
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === "number") {
                val = val & 255;
                if (typeof Uint8Array.prototype.indexOf === "function") {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }
              throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;
              if (encoding !== void 0) {
                encoding = String(encoding).toLowerCase();
                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }
              function read2(buf, i2) {
                if (indexSize === 1) {
                  return buf[i2];
                } else {
                  return buf.readUInt16BE(i2 * indexSize);
                }
              }
              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read2(arr, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1)
                      foundIndex = i;
                    if (i - foundIndex + 1 === valLength)
                      return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1)
                      i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength)
                  byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read2(arr, i + j) !== read2(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found)
                    return i;
                }
              }
              return -1;
            }
            Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed))
                  return i;
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer3.prototype.write = function write(string, offset, length, encoding) {
              if (offset === void 0) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
              } else if (length === void 0 && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === void 0)
                    encoding = "utf8";
                } else {
                  encoding = length;
                  length = void 0;
                }
              } else {
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              }
              var remaining = this.length - offset;
              if (length === void 0 || length > remaining)
                length = remaining;
              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }
              if (!encoding)
                encoding = "utf8";
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);
                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);
                  case "ascii":
                    return asciiWrite(this, string, offset, length);
                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);
                  case "base64":
                    return base64Write(this, string, offset, length);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer3.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 128) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  codePoint = 65533;
                  bytesPerSequence = 1;
                } else if (codePoint > 65535) {
                  codePoint -= 65536;
                  res.push(codePoint >>> 10 & 1023 | 55296);
                  codePoint = 56320 | codePoint & 1023;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }
              var res = "";
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 127);
              }
              return ret;
            }
            function latin1Slice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0)
                start = 0;
              if (!end || end < 0 || end > len)
                end = len;
              var out = "";
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer3.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === void 0 ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0)
                  start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0)
                  end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start)
                end = start;
              var newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer3.prototype;
              return newBuf;
            };
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError("offset is not uint");
              if (offset + ext > length)
                throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength2, this.length);
              }
              var val = this[offset + --byteLength2];
              var mul = 1;
              while (byteLength2 > 0 && (mul *= 256)) {
                val += this[offset + --byteLength2] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };
            Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };
            Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var i = byteLength2;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              if (!(this[offset] & 128))
                return this[offset];
              return (255 - this[offset] + 1) * -1;
            };
            Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer3.isBuffer(buf))
                throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
            }
            Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var mul = 1;
              var i = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 255, 0);
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 255;
              return offset + 4;
            };
            Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 127, -128);
              if (value < 0)
                value = 255 + value + 1;
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };
            Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              if (value < 0)
                value = 4294967295 + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
              if (offset < 0)
                throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
              if (!Buffer3.isBuffer(target))
                throw new TypeError("argument should be a Buffer");
              if (!start)
                start = 0;
              if (!end && end !== 0)
                end = this.length;
              if (targetStart >= target.length)
                targetStart = target.length;
              if (!targetStart)
                targetStart = 0;
              if (end > 0 && end < start)
                end = start;
              if (end === start)
                return 0;
              if (target.length === 0 || this.length === 0)
                return 0;
              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }
              if (start < 0 || start >= this.length)
                throw new RangeError("Index out of range");
              if (end < 0)
                throw new RangeError("sourceEnd out of bounds");
              if (end > this.length)
                end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                this.copyWithin(targetStart, start, end);
              } else if (this === target && start < targetStart && targetStart < end) {
                for (var i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
              }
              return len;
            };
            Buffer3.prototype.fill = function fill(val, start, end, encoding) {
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== void 0 && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }
                if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                    val = code;
                  }
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }
              if (end <= start) {
                return this;
              }
              start = start >>> 0;
              end = end === void 0 ? this.length : end >>> 0;
              if (!val)
                val = 0;
              var i;
              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }
              return this;
            };
            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
            function base64clean(str) {
              str = str.split("=")[0];
              str = str.trim().replace(INVALID_BASE64_RE, "");
              if (str.length < 2)
                return "";
              while (str.length % 4 !== 0) {
                str = str + "=";
              }
              return str;
            }
            function toHex(n) {
              if (n < 16)
                return "0" + n.toString(16);
              return n.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                  if (!leadSurrogate) {
                    if (codePoint > 56319) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    }
                    leadSurrogate = codePoint;
                    continue;
                  }
                  if (codePoint < 56320) {
                    if ((units -= 3) > -1)
                      bytes.push(239, 191, 189);
                    leadSurrogate = codePoint;
                    continue;
                  }
                  codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1)
                    bytes.push(239, 191, 189);
                }
                leadSurrogate = null;
                if (codePoint < 128) {
                  if ((units -= 1) < 0)
                    break;
                  bytes.push(codePoint);
                } else if (codePoint < 2048) {
                  if ((units -= 2) < 0)
                    break;
                  bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                } else if (codePoint < 65536) {
                  if ((units -= 3) < 0)
                    break;
                  bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                } else if (codePoint < 1114112) {
                  if ((units -= 4) < 0)
                    break;
                  bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                } else {
                  throw new Error("Invalid code point");
                }
              }
              return bytes;
            }
            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                byteArray.push(str.charCodeAt(i) & 255);
              }
              return byteArray;
            }
            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0)
                  break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length)
                  break;
                dst[i + offset] = src[i];
              }
              return i;
            }
            function isInstance(obj, type) {
              return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
            }
            function numberIsNaN(obj) {
              return obj !== obj;
            }
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "base64-js": 16, "buffer": 63, "ieee754": 132 }], 64: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            module3.exports = function xor(a, b) {
              var length = Math.min(a.length, b.length);
              var buffer = new Buffer2(length);
              for (var i = 0; i < length; ++i) {
                buffer[i] = a[i] ^ b[i];
              }
              return buffer;
            };
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "buffer": 63 }], 65: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var Transform = require2("stream").Transform;
        var StringDecoder = require2("string_decoder").StringDecoder;
        var inherits = require2("inherits");
        function CipherBase(hashMode) {
          Transform.call(this);
          this.hashMode = typeof hashMode === "string";
          if (this.hashMode) {
            this[hashMode] = this._finalOrDigest;
          } else {
            this.final = this._finalOrDigest;
          }
          if (this._final) {
            this.__final = this._final;
            this._final = null;
          }
          this._decoder = null;
          this._encoding = null;
        }
        inherits(CipherBase, Transform);
        CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
          if (typeof data === "string") {
            data = Buffer2.from(data, inputEnc);
          }
          var outData = this._update(data);
          if (this.hashMode)
            return this;
          if (outputEnc) {
            outData = this._toString(outData, outputEnc);
          }
          return outData;
        };
        CipherBase.prototype.setAutoPadding = function() {
        };
        CipherBase.prototype.getAuthTag = function() {
          throw new Error("trying to get auth tag in unsupported state");
        };
        CipherBase.prototype.setAuthTag = function() {
          throw new Error("trying to set auth tag in unsupported state");
        };
        CipherBase.prototype.setAAD = function() {
          throw new Error("trying to set aad in unsupported state");
        };
        CipherBase.prototype._transform = function(data, _, next) {
          var err;
          try {
            if (this.hashMode) {
              this._update(data);
            } else {
              this.push(this._update(data));
            }
          } catch (e) {
            err = e;
          } finally {
            next(err);
          }
        };
        CipherBase.prototype._flush = function(done) {
          var err;
          try {
            this.push(this.__final());
          } catch (e) {
            err = e;
          }
          done(err);
        };
        CipherBase.prototype._finalOrDigest = function(outputEnc) {
          var outData = this.__final() || Buffer2.alloc(0);
          if (outputEnc) {
            outData = this._toString(outData, outputEnc, true);
          }
          return outData;
        };
        CipherBase.prototype._toString = function(value, enc, fin) {
          if (!this._decoder) {
            this._decoder = new StringDecoder(enc);
            this._encoding = enc;
          }
          if (this._encoding !== enc)
            throw new Error("can't switch encodings");
          var out = this._decoder.write(value);
          if (fin) {
            out += this._decoder.end();
          }
          return out;
        };
        module3.exports = CipherBase;
      }, { "inherits": 133, "safe-buffer": 188, "stream": 198, "string_decoder": 213 }], 66: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var elliptic = require2("elliptic");
            var BN = require2("bn.js");
            module3.exports = function createECDH(curve) {
              return new ECDH(curve);
            };
            var aliases = {
              secp256k1: {
                name: "secp256k1",
                byteLength: 32
              },
              secp224r1: {
                name: "p224",
                byteLength: 28
              },
              prime256v1: {
                name: "p256",
                byteLength: 32
              },
              prime192v1: {
                name: "p192",
                byteLength: 24
              },
              ed25519: {
                name: "ed25519",
                byteLength: 32
              },
              secp384r1: {
                name: "p384",
                byteLength: 48
              },
              secp521r1: {
                name: "p521",
                byteLength: 66
              }
            };
            aliases.p224 = aliases.secp224r1;
            aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
            aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
            aliases.p384 = aliases.secp384r1;
            aliases.p521 = aliases.secp521r1;
            function ECDH(curve) {
              this.curveType = aliases[curve];
              if (!this.curveType) {
                this.curveType = {
                  name: curve
                };
              }
              this.curve = new elliptic.ec(this.curveType.name);
              this.keys = void 0;
            }
            ECDH.prototype.generateKeys = function(enc, format) {
              this.keys = this.curve.genKeyPair();
              return this.getPublicKey(enc, format);
            };
            ECDH.prototype.computeSecret = function(other, inenc, enc) {
              inenc = inenc || "utf8";
              if (!Buffer2.isBuffer(other)) {
                other = new Buffer2(other, inenc);
              }
              var otherPub = this.curve.keyFromPublic(other).getPublic();
              var out = otherPub.mul(this.keys.getPrivate()).getX();
              return formatReturnValue(out, enc, this.curveType.byteLength);
            };
            ECDH.prototype.getPublicKey = function(enc, format) {
              var key = this.keys.getPublic(format === "compressed", true);
              if (format === "hybrid") {
                if (key[key.length - 1] % 2) {
                  key[0] = 7;
                } else {
                  key[0] = 6;
                }
              }
              return formatReturnValue(key, enc);
            };
            ECDH.prototype.getPrivateKey = function(enc) {
              return formatReturnValue(this.keys.getPrivate(), enc);
            };
            ECDH.prototype.setPublicKey = function(pub, enc) {
              enc = enc || "utf8";
              if (!Buffer2.isBuffer(pub)) {
                pub = new Buffer2(pub, enc);
              }
              this.keys._importPublic(pub);
              return this;
            };
            ECDH.prototype.setPrivateKey = function(priv, enc) {
              enc = enc || "utf8";
              if (!Buffer2.isBuffer(priv)) {
                priv = new Buffer2(priv, enc);
              }
              var _priv = new BN(priv);
              _priv = _priv.toString(16);
              this.keys = this.curve.genKeyPair();
              this.keys._importPrivate(_priv);
              return this;
            };
            function formatReturnValue(bn, enc, len) {
              if (!Array.isArray(bn)) {
                bn = bn.toArray();
              }
              var buf = new Buffer2(bn);
              if (len && buf.length < len) {
                var zeros = new Buffer2(len - buf.length);
                zeros.fill(0);
                buf = Buffer2.concat([zeros, buf]);
              }
              if (!enc) {
                return buf;
              } else {
                return buf.toString(enc);
              }
            }
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "bn.js": 67, "buffer": 63, "elliptic": 84 }], 67: [function(require2, module3, exports3) {
        arguments[4][15][0].apply(exports3, arguments);
      }, { "buffer": 19, "dup": 15 }], 68: [function(require2, module3, exports3) {
        "use strict";
        var inherits = require2("inherits");
        var MD5 = require2("md5.js");
        var RIPEMD160 = require2("ripemd160");
        var sha = require2("sha.js");
        var Base = require2("cipher-base");
        function Hash(hash) {
          Base.call(this, "digest");
          this._hash = hash;
        }
        inherits(Hash, Base);
        Hash.prototype._update = function(data) {
          this._hash.update(data);
        };
        Hash.prototype._final = function() {
          return this._hash.digest();
        };
        module3.exports = function createHash(alg) {
          alg = alg.toLowerCase();
          if (alg === "md5")
            return new MD5();
          if (alg === "rmd160" || alg === "ripemd160")
            return new RIPEMD160();
          return new Hash(sha(alg));
        };
      }, { "cipher-base": 65, "inherits": 133, "md5.js": 134, "ripemd160": 187, "sha.js": 191 }], 69: [function(require2, module3, exports3) {
        var MD5 = require2("md5.js");
        module3.exports = function(buffer) {
          return new MD5().update(buffer).digest();
        };
      }, { "md5.js": 134 }], 70: [function(require2, module3, exports3) {
        "use strict";
        var inherits = require2("inherits");
        var Legacy = require2("./legacy");
        var Base = require2("cipher-base");
        var Buffer2 = require2("safe-buffer").Buffer;
        var md5 = require2("create-hash/md5");
        var RIPEMD160 = require2("ripemd160");
        var sha = require2("sha.js");
        var ZEROS = Buffer2.alloc(128);
        function Hmac(alg, key) {
          Base.call(this, "digest");
          if (typeof key === "string") {
            key = Buffer2.from(key);
          }
          var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
          this._alg = alg;
          this._key = key;
          if (key.length > blocksize) {
            var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
            key = hash.update(key).digest();
          } else if (key.length < blocksize) {
            key = Buffer2.concat([key, ZEROS], blocksize);
          }
          var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
          var opad = this._opad = Buffer2.allocUnsafe(blocksize);
          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 54;
            opad[i] = key[i] ^ 92;
          }
          this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
          this._hash.update(ipad);
        }
        inherits(Hmac, Base);
        Hmac.prototype._update = function(data) {
          this._hash.update(data);
        };
        Hmac.prototype._final = function() {
          var h = this._hash.digest();
          var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
          return hash.update(this._opad).update(h).digest();
        };
        module3.exports = function createHmac(alg, key) {
          alg = alg.toLowerCase();
          if (alg === "rmd160" || alg === "ripemd160") {
            return new Hmac("rmd160", key);
          }
          if (alg === "md5") {
            return new Legacy(md5, key);
          }
          return new Hmac(alg, key);
        };
      }, { "./legacy": 71, "cipher-base": 65, "create-hash/md5": 69, "inherits": 133, "ripemd160": 187, "safe-buffer": 188, "sha.js": 191 }], 71: [function(require2, module3, exports3) {
        "use strict";
        var inherits = require2("inherits");
        var Buffer2 = require2("safe-buffer").Buffer;
        var Base = require2("cipher-base");
        var ZEROS = Buffer2.alloc(128);
        var blocksize = 64;
        function Hmac(alg, key) {
          Base.call(this, "digest");
          if (typeof key === "string") {
            key = Buffer2.from(key);
          }
          this._alg = alg;
          this._key = key;
          if (key.length > blocksize) {
            key = alg(key);
          } else if (key.length < blocksize) {
            key = Buffer2.concat([key, ZEROS], blocksize);
          }
          var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
          var opad = this._opad = Buffer2.allocUnsafe(blocksize);
          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 54;
            opad[i] = key[i] ^ 92;
          }
          this._hash = [ipad];
        }
        inherits(Hmac, Base);
        Hmac.prototype._update = function(data) {
          this._hash.push(data);
        };
        Hmac.prototype._final = function() {
          var h = this._alg(Buffer2.concat(this._hash));
          return this._alg(Buffer2.concat([this._opad, h]));
        };
        module3.exports = Hmac;
      }, { "cipher-base": 65, "inherits": 133, "safe-buffer": 188 }], 72: [function(require2, module3, exports3) {
        "use strict";
        exports3.randomBytes = exports3.rng = exports3.pseudoRandomBytes = exports3.prng = require2("randombytes");
        exports3.createHash = exports3.Hash = require2("create-hash");
        exports3.createHmac = exports3.Hmac = require2("create-hmac");
        var algos = require2("browserify-sign/algos");
        var algoKeys = Object.keys(algos);
        var hashes = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(algoKeys);
        exports3.getHashes = function() {
          return hashes;
        };
        var p = require2("pbkdf2");
        exports3.pbkdf2 = p.pbkdf2;
        exports3.pbkdf2Sync = p.pbkdf2Sync;
        var aes = require2("browserify-cipher");
        exports3.Cipher = aes.Cipher;
        exports3.createCipher = aes.createCipher;
        exports3.Cipheriv = aes.Cipheriv;
        exports3.createCipheriv = aes.createCipheriv;
        exports3.Decipher = aes.Decipher;
        exports3.createDecipher = aes.createDecipher;
        exports3.Decipheriv = aes.Decipheriv;
        exports3.createDecipheriv = aes.createDecipheriv;
        exports3.getCiphers = aes.getCiphers;
        exports3.listCiphers = aes.listCiphers;
        var dh = require2("diffie-hellman");
        exports3.DiffieHellmanGroup = dh.DiffieHellmanGroup;
        exports3.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
        exports3.getDiffieHellman = dh.getDiffieHellman;
        exports3.createDiffieHellman = dh.createDiffieHellman;
        exports3.DiffieHellman = dh.DiffieHellman;
        var sign = require2("browserify-sign");
        exports3.createSign = sign.createSign;
        exports3.Sign = sign.Sign;
        exports3.createVerify = sign.createVerify;
        exports3.Verify = sign.Verify;
        exports3.createECDH = require2("create-ecdh");
        var publicEncrypt = require2("public-encrypt");
        exports3.publicEncrypt = publicEncrypt.publicEncrypt;
        exports3.privateEncrypt = publicEncrypt.privateEncrypt;
        exports3.publicDecrypt = publicEncrypt.publicDecrypt;
        exports3.privateDecrypt = publicEncrypt.privateDecrypt;
        var rf = require2("randomfill");
        exports3.randomFill = rf.randomFill;
        exports3.randomFillSync = rf.randomFillSync;
        exports3.createCredentials = function() {
          throw new Error([
            "sorry, createCredentials is not implemented yet",
            "we accept pull requests",
            "https://github.com/crypto-browserify/crypto-browserify"
          ].join("\n"));
        };
        exports3.constants = {
          "DH_CHECK_P_NOT_SAFE_PRIME": 2,
          "DH_CHECK_P_NOT_PRIME": 1,
          "DH_UNABLE_TO_CHECK_GENERATOR": 4,
          "DH_NOT_SUITABLE_GENERATOR": 8,
          "NPN_ENABLED": 1,
          "ALPN_ENABLED": 1,
          "RSA_PKCS1_PADDING": 1,
          "RSA_SSLV23_PADDING": 2,
          "RSA_NO_PADDING": 3,
          "RSA_PKCS1_OAEP_PADDING": 4,
          "RSA_X931_PADDING": 5,
          "RSA_PKCS1_PSS_PADDING": 6,
          "POINT_CONVERSION_COMPRESSED": 2,
          "POINT_CONVERSION_UNCOMPRESSED": 4,
          "POINT_CONVERSION_HYBRID": 6
        };
      }, { "browserify-cipher": 37, "browserify-sign": 44, "browserify-sign/algos": 41, "create-ecdh": 66, "create-hash": 68, "create-hmac": 70, "diffie-hellman": 79, "pbkdf2": 145, "public-encrypt": 152, "randombytes": 185, "randomfill": 186 }], 73: [function(require2, module3, exports3) {
        "use strict";
        exports3.utils = require2("./des/utils");
        exports3.Cipher = require2("./des/cipher");
        exports3.DES = require2("./des/des");
        exports3.CBC = require2("./des/cbc");
        exports3.EDE = require2("./des/ede");
      }, { "./des/cbc": 74, "./des/cipher": 75, "./des/des": 76, "./des/ede": 77, "./des/utils": 78 }], 74: [function(require2, module3, exports3) {
        "use strict";
        var assert = require2("minimalistic-assert");
        var inherits = require2("inherits");
        var proto = {};
        function CBCState(iv) {
          assert.equal(iv.length, 8, "Invalid IV length");
          this.iv = new Array(8);
          for (var i = 0; i < this.iv.length; i++)
            this.iv[i] = iv[i];
        }
        function instantiate(Base) {
          function CBC(options) {
            Base.call(this, options);
            this._cbcInit();
          }
          inherits(CBC, Base);
          var keys = Object.keys(proto);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            CBC.prototype[key] = proto[key];
          }
          CBC.create = function create(options) {
            return new CBC(options);
          };
          return CBC;
        }
        exports3.instantiate = instantiate;
        proto._cbcInit = function _cbcInit() {
          var state = new CBCState(this.options.iv);
          this._cbcState = state;
        };
        proto._update = function _update(inp, inOff, out, outOff) {
          var state = this._cbcState;
          var superProto = this.constructor.super_.prototype;
          var iv = state.iv;
          if (this.type === "encrypt") {
            for (var i = 0; i < this.blockSize; i++)
              iv[i] ^= inp[inOff + i];
            superProto._update.call(this, iv, 0, out, outOff);
            for (var i = 0; i < this.blockSize; i++)
              iv[i] = out[outOff + i];
          } else {
            superProto._update.call(this, inp, inOff, out, outOff);
            for (var i = 0; i < this.blockSize; i++)
              out[outOff + i] ^= iv[i];
            for (var i = 0; i < this.blockSize; i++)
              iv[i] = inp[inOff + i];
          }
        };
      }, { "inherits": 133, "minimalistic-assert": 137 }], 75: [function(require2, module3, exports3) {
        "use strict";
        var assert = require2("minimalistic-assert");
        function Cipher(options) {
          this.options = options;
          this.type = this.options.type;
          this.blockSize = 8;
          this._init();
          this.buffer = new Array(this.blockSize);
          this.bufferOff = 0;
        }
        module3.exports = Cipher;
        Cipher.prototype._init = function _init() {
        };
        Cipher.prototype.update = function update(data) {
          if (data.length === 0)
            return [];
          if (this.type === "decrypt")
            return this._updateDecrypt(data);
          else
            return this._updateEncrypt(data);
        };
        Cipher.prototype._buffer = function _buffer(data, off) {
          var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
          for (var i = 0; i < min; i++)
            this.buffer[this.bufferOff + i] = data[off + i];
          this.bufferOff += min;
          return min;
        };
        Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
          this._update(this.buffer, 0, out, off);
          this.bufferOff = 0;
          return this.blockSize;
        };
        Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
          var inputOff = 0;
          var outputOff = 0;
          var count = (this.bufferOff + data.length) / this.blockSize | 0;
          var out = new Array(count * this.blockSize);
          if (this.bufferOff !== 0) {
            inputOff += this._buffer(data, inputOff);
            if (this.bufferOff === this.buffer.length)
              outputOff += this._flushBuffer(out, outputOff);
          }
          var max = data.length - (data.length - inputOff) % this.blockSize;
          for (; inputOff < max; inputOff += this.blockSize) {
            this._update(data, inputOff, out, outputOff);
            outputOff += this.blockSize;
          }
          for (; inputOff < data.length; inputOff++, this.bufferOff++)
            this.buffer[this.bufferOff] = data[inputOff];
          return out;
        };
        Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
          var inputOff = 0;
          var outputOff = 0;
          var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
          var out = new Array(count * this.blockSize);
          for (; count > 0; count--) {
            inputOff += this._buffer(data, inputOff);
            outputOff += this._flushBuffer(out, outputOff);
          }
          inputOff += this._buffer(data, inputOff);
          return out;
        };
        Cipher.prototype.final = function final(buffer) {
          var first;
          if (buffer)
            first = this.update(buffer);
          var last;
          if (this.type === "encrypt")
            last = this._finalEncrypt();
          else
            last = this._finalDecrypt();
          if (first)
            return first.concat(last);
          else
            return last;
        };
        Cipher.prototype._pad = function _pad(buffer, off) {
          if (off === 0)
            return false;
          while (off < buffer.length)
            buffer[off++] = 0;
          return true;
        };
        Cipher.prototype._finalEncrypt = function _finalEncrypt() {
          if (!this._pad(this.buffer, this.bufferOff))
            return [];
          var out = new Array(this.blockSize);
          this._update(this.buffer, 0, out, 0);
          return out;
        };
        Cipher.prototype._unpad = function _unpad(buffer) {
          return buffer;
        };
        Cipher.prototype._finalDecrypt = function _finalDecrypt() {
          assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
          var out = new Array(this.blockSize);
          this._flushBuffer(out, 0);
          return this._unpad(out);
        };
      }, { "minimalistic-assert": 137 }], 76: [function(require2, module3, exports3) {
        "use strict";
        var assert = require2("minimalistic-assert");
        var inherits = require2("inherits");
        var utils = require2("./utils");
        var Cipher = require2("./cipher");
        function DESState() {
          this.tmp = new Array(2);
          this.keys = null;
        }
        function DES(options) {
          Cipher.call(this, options);
          var state = new DESState();
          this._desState = state;
          this.deriveKeys(state, options.key);
        }
        inherits(DES, Cipher);
        module3.exports = DES;
        DES.create = function create(options) {
          return new DES(options);
        };
        var shiftTable = [
          1,
          1,
          2,
          2,
          2,
          2,
          2,
          2,
          1,
          2,
          2,
          2,
          2,
          2,
          2,
          1
        ];
        DES.prototype.deriveKeys = function deriveKeys(state, key) {
          state.keys = new Array(16 * 2);
          assert.equal(key.length, this.blockSize, "Invalid key length");
          var kL = utils.readUInt32BE(key, 0);
          var kR = utils.readUInt32BE(key, 4);
          utils.pc1(kL, kR, state.tmp, 0);
          kL = state.tmp[0];
          kR = state.tmp[1];
          for (var i = 0; i < state.keys.length; i += 2) {
            var shift = shiftTable[i >>> 1];
            kL = utils.r28shl(kL, shift);
            kR = utils.r28shl(kR, shift);
            utils.pc2(kL, kR, state.keys, i);
          }
        };
        DES.prototype._update = function _update(inp, inOff, out, outOff) {
          var state = this._desState;
          var l = utils.readUInt32BE(inp, inOff);
          var r = utils.readUInt32BE(inp, inOff + 4);
          utils.ip(l, r, state.tmp, 0);
          l = state.tmp[0];
          r = state.tmp[1];
          if (this.type === "encrypt")
            this._encrypt(state, l, r, state.tmp, 0);
          else
            this._decrypt(state, l, r, state.tmp, 0);
          l = state.tmp[0];
          r = state.tmp[1];
          utils.writeUInt32BE(out, l, outOff);
          utils.writeUInt32BE(out, r, outOff + 4);
        };
        DES.prototype._pad = function _pad(buffer, off) {
          var value = buffer.length - off;
          for (var i = off; i < buffer.length; i++)
            buffer[i] = value;
          return true;
        };
        DES.prototype._unpad = function _unpad(buffer) {
          var pad = buffer[buffer.length - 1];
          for (var i = buffer.length - pad; i < buffer.length; i++)
            assert.equal(buffer[i], pad);
          return buffer.slice(0, buffer.length - pad);
        };
        DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
          var l = lStart;
          var r = rStart;
          for (var i = 0; i < state.keys.length; i += 2) {
            var keyL = state.keys[i];
            var keyR = state.keys[i + 1];
            utils.expand(r, state.tmp, 0);
            keyL ^= state.tmp[0];
            keyR ^= state.tmp[1];
            var s = utils.substitute(keyL, keyR);
            var f = utils.permute(s);
            var t = r;
            r = (l ^ f) >>> 0;
            l = t;
          }
          utils.rip(r, l, out, off);
        };
        DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
          var l = rStart;
          var r = lStart;
          for (var i = state.keys.length - 2; i >= 0; i -= 2) {
            var keyL = state.keys[i];
            var keyR = state.keys[i + 1];
            utils.expand(l, state.tmp, 0);
            keyL ^= state.tmp[0];
            keyR ^= state.tmp[1];
            var s = utils.substitute(keyL, keyR);
            var f = utils.permute(s);
            var t = l;
            l = (r ^ f) >>> 0;
            r = t;
          }
          utils.rip(l, r, out, off);
        };
      }, { "./cipher": 75, "./utils": 78, "inherits": 133, "minimalistic-assert": 137 }], 77: [function(require2, module3, exports3) {
        "use strict";
        var assert = require2("minimalistic-assert");
        var inherits = require2("inherits");
        var Cipher = require2("./cipher");
        var DES = require2("./des");
        function EDEState(type, key) {
          assert.equal(key.length, 24, "Invalid key length");
          var k1 = key.slice(0, 8);
          var k2 = key.slice(8, 16);
          var k3 = key.slice(16, 24);
          if (type === "encrypt") {
            this.ciphers = [
              DES.create({ type: "encrypt", key: k1 }),
              DES.create({ type: "decrypt", key: k2 }),
              DES.create({ type: "encrypt", key: k3 })
            ];
          } else {
            this.ciphers = [
              DES.create({ type: "decrypt", key: k3 }),
              DES.create({ type: "encrypt", key: k2 }),
              DES.create({ type: "decrypt", key: k1 })
            ];
          }
        }
        function EDE(options) {
          Cipher.call(this, options);
          var state = new EDEState(this.type, this.options.key);
          this._edeState = state;
        }
        inherits(EDE, Cipher);
        module3.exports = EDE;
        EDE.create = function create(options) {
          return new EDE(options);
        };
        EDE.prototype._update = function _update(inp, inOff, out, outOff) {
          var state = this._edeState;
          state.ciphers[0]._update(inp, inOff, out, outOff);
          state.ciphers[1]._update(out, outOff, out, outOff);
          state.ciphers[2]._update(out, outOff, out, outOff);
        };
        EDE.prototype._pad = DES.prototype._pad;
        EDE.prototype._unpad = DES.prototype._unpad;
      }, { "./cipher": 75, "./des": 76, "inherits": 133, "minimalistic-assert": 137 }], 78: [function(require2, module3, exports3) {
        "use strict";
        exports3.readUInt32BE = function readUInt32BE(bytes, off) {
          var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
          return res >>> 0;
        };
        exports3.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
          bytes[0 + off] = value >>> 24;
          bytes[1 + off] = value >>> 16 & 255;
          bytes[2 + off] = value >>> 8 & 255;
          bytes[3 + off] = value & 255;
        };
        exports3.ip = function ip(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;
          for (var i = 6; i >= 0; i -= 2) {
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= inR >>> j + i & 1;
            }
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= inL >>> j + i & 1;
            }
          }
          for (var i = 6; i >= 0; i -= 2) {
            for (var j = 1; j <= 25; j += 8) {
              outR <<= 1;
              outR |= inR >>> j + i & 1;
            }
            for (var j = 1; j <= 25; j += 8) {
              outR <<= 1;
              outR |= inL >>> j + i & 1;
            }
          }
          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };
        exports3.rip = function rip(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;
          for (var i = 0; i < 4; i++) {
            for (var j = 24; j >= 0; j -= 8) {
              outL <<= 1;
              outL |= inR >>> j + i & 1;
              outL <<= 1;
              outL |= inL >>> j + i & 1;
            }
          }
          for (var i = 4; i < 8; i++) {
            for (var j = 24; j >= 0; j -= 8) {
              outR <<= 1;
              outR |= inR >>> j + i & 1;
              outR <<= 1;
              outR |= inL >>> j + i & 1;
            }
          }
          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };
        exports3.pc1 = function pc1(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;
          for (var i = 7; i >= 5; i--) {
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= inR >> j + i & 1;
            }
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= inL >> j + i & 1;
            }
          }
          for (var j = 0; j <= 24; j += 8) {
            outL <<= 1;
            outL |= inR >> j + i & 1;
          }
          for (var i = 1; i <= 3; i++) {
            for (var j = 0; j <= 24; j += 8) {
              outR <<= 1;
              outR |= inR >> j + i & 1;
            }
            for (var j = 0; j <= 24; j += 8) {
              outR <<= 1;
              outR |= inL >> j + i & 1;
            }
          }
          for (var j = 0; j <= 24; j += 8) {
            outR <<= 1;
            outR |= inL >> j + i & 1;
          }
          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };
        exports3.r28shl = function r28shl(num, shift) {
          return num << shift & 268435455 | num >>> 28 - shift;
        };
        var pc2table = [
          14,
          11,
          17,
          4,
          27,
          23,
          25,
          0,
          13,
          22,
          7,
          18,
          5,
          9,
          16,
          24,
          2,
          20,
          12,
          21,
          1,
          8,
          15,
          26,
          15,
          4,
          25,
          19,
          9,
          1,
          26,
          16,
          5,
          11,
          23,
          8,
          12,
          7,
          17,
          0,
          22,
          3,
          10,
          14,
          6,
          20,
          27,
          24
        ];
        exports3.pc2 = function pc2(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;
          var len = pc2table.length >>> 1;
          for (var i = 0; i < len; i++) {
            outL <<= 1;
            outL |= inL >>> pc2table[i] & 1;
          }
          for (var i = len; i < pc2table.length; i++) {
            outR <<= 1;
            outR |= inR >>> pc2table[i] & 1;
          }
          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };
        exports3.expand = function expand(r, out, off) {
          var outL = 0;
          var outR = 0;
          outL = (r & 1) << 5 | r >>> 27;
          for (var i = 23; i >= 15; i -= 4) {
            outL <<= 6;
            outL |= r >>> i & 63;
          }
          for (var i = 11; i >= 3; i -= 4) {
            outR |= r >>> i & 63;
            outR <<= 6;
          }
          outR |= (r & 31) << 1 | r >>> 31;
          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };
        var sTable = [
          14,
          0,
          4,
          15,
          13,
          7,
          1,
          4,
          2,
          14,
          15,
          2,
          11,
          13,
          8,
          1,
          3,
          10,
          10,
          6,
          6,
          12,
          12,
          11,
          5,
          9,
          9,
          5,
          0,
          3,
          7,
          8,
          4,
          15,
          1,
          12,
          14,
          8,
          8,
          2,
          13,
          4,
          6,
          9,
          2,
          1,
          11,
          7,
          15,
          5,
          12,
          11,
          9,
          3,
          7,
          14,
          3,
          10,
          10,
          0,
          5,
          6,
          0,
          13,
          15,
          3,
          1,
          13,
          8,
          4,
          14,
          7,
          6,
          15,
          11,
          2,
          3,
          8,
          4,
          14,
          9,
          12,
          7,
          0,
          2,
          1,
          13,
          10,
          12,
          6,
          0,
          9,
          5,
          11,
          10,
          5,
          0,
          13,
          14,
          8,
          7,
          10,
          11,
          1,
          10,
          3,
          4,
          15,
          13,
          4,
          1,
          2,
          5,
          11,
          8,
          6,
          12,
          7,
          6,
          12,
          9,
          0,
          3,
          5,
          2,
          14,
          15,
          9,
          10,
          13,
          0,
          7,
          9,
          0,
          14,
          9,
          6,
          3,
          3,
          4,
          15,
          6,
          5,
          10,
          1,
          2,
          13,
          8,
          12,
          5,
          7,
          14,
          11,
          12,
          4,
          11,
          2,
          15,
          8,
          1,
          13,
          1,
          6,
          10,
          4,
          13,
          9,
          0,
          8,
          6,
          15,
          9,
          3,
          8,
          0,
          7,
          11,
          4,
          1,
          15,
          2,
          14,
          12,
          3,
          5,
          11,
          10,
          5,
          14,
          2,
          7,
          12,
          7,
          13,
          13,
          8,
          14,
          11,
          3,
          5,
          0,
          6,
          6,
          15,
          9,
          0,
          10,
          3,
          1,
          4,
          2,
          7,
          8,
          2,
          5,
          12,
          11,
          1,
          12,
          10,
          4,
          14,
          15,
          9,
          10,
          3,
          6,
          15,
          9,
          0,
          0,
          6,
          12,
          10,
          11,
          1,
          7,
          13,
          13,
          8,
          15,
          9,
          1,
          4,
          3,
          5,
          14,
          11,
          5,
          12,
          2,
          7,
          8,
          2,
          4,
          14,
          2,
          14,
          12,
          11,
          4,
          2,
          1,
          12,
          7,
          4,
          10,
          7,
          11,
          13,
          6,
          1,
          8,
          5,
          5,
          0,
          3,
          15,
          15,
          10,
          13,
          3,
          0,
          9,
          14,
          8,
          9,
          6,
          4,
          11,
          2,
          8,
          1,
          12,
          11,
          7,
          10,
          1,
          13,
          14,
          7,
          2,
          8,
          13,
          15,
          6,
          9,
          15,
          12,
          0,
          5,
          9,
          6,
          10,
          3,
          4,
          0,
          5,
          14,
          3,
          12,
          10,
          1,
          15,
          10,
          4,
          15,
          2,
          9,
          7,
          2,
          12,
          6,
          9,
          8,
          5,
          0,
          6,
          13,
          1,
          3,
          13,
          4,
          14,
          14,
          0,
          7,
          11,
          5,
          3,
          11,
          8,
          9,
          4,
          14,
          3,
          15,
          2,
          5,
          12,
          2,
          9,
          8,
          5,
          12,
          15,
          3,
          10,
          7,
          11,
          0,
          14,
          4,
          1,
          10,
          7,
          1,
          6,
          13,
          0,
          11,
          8,
          6,
          13,
          4,
          13,
          11,
          0,
          2,
          11,
          14,
          7,
          15,
          4,
          0,
          9,
          8,
          1,
          13,
          10,
          3,
          14,
          12,
          3,
          9,
          5,
          7,
          12,
          5,
          2,
          10,
          15,
          6,
          8,
          1,
          6,
          1,
          6,
          4,
          11,
          11,
          13,
          13,
          8,
          12,
          1,
          3,
          4,
          7,
          10,
          14,
          7,
          10,
          9,
          15,
          5,
          6,
          0,
          8,
          15,
          0,
          14,
          5,
          2,
          9,
          3,
          2,
          12,
          13,
          1,
          2,
          15,
          8,
          13,
          4,
          8,
          6,
          10,
          15,
          3,
          11,
          7,
          1,
          4,
          10,
          12,
          9,
          5,
          3,
          6,
          14,
          11,
          5,
          0,
          0,
          14,
          12,
          9,
          7,
          2,
          7,
          2,
          11,
          1,
          4,
          14,
          1,
          7,
          9,
          4,
          12,
          10,
          14,
          8,
          2,
          13,
          0,
          15,
          6,
          12,
          10,
          9,
          13,
          0,
          15,
          3,
          3,
          5,
          5,
          6,
          8,
          11
        ];
        exports3.substitute = function substitute(inL, inR) {
          var out = 0;
          for (var i = 0; i < 4; i++) {
            var b = inL >>> 18 - i * 6 & 63;
            var sb = sTable[i * 64 + b];
            out <<= 4;
            out |= sb;
          }
          for (var i = 0; i < 4; i++) {
            var b = inR >>> 18 - i * 6 & 63;
            var sb = sTable[4 * 64 + i * 64 + b];
            out <<= 4;
            out |= sb;
          }
          return out >>> 0;
        };
        var permuteTable = [
          16,
          25,
          12,
          11,
          3,
          20,
          4,
          15,
          31,
          17,
          9,
          6,
          27,
          14,
          1,
          22,
          30,
          24,
          8,
          18,
          0,
          5,
          29,
          23,
          13,
          19,
          2,
          26,
          10,
          21,
          28,
          7
        ];
        exports3.permute = function permute(num) {
          var out = 0;
          for (var i = 0; i < permuteTable.length; i++) {
            out <<= 1;
            out |= num >>> permuteTable[i] & 1;
          }
          return out >>> 0;
        };
        exports3.padSplit = function padSplit(num, size, group) {
          var str = num.toString(2);
          while (str.length < size)
            str = "0" + str;
          var out = [];
          for (var i = 0; i < size; i += group)
            out.push(str.slice(i, i + group));
          return out.join(" ");
        };
      }, {}], 79: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var generatePrime = require2("./lib/generatePrime");
            var primes = require2("./lib/primes.json");
            var DH = require2("./lib/dh");
            function getDiffieHellman(mod) {
              var prime = new Buffer2(primes[mod].prime, "hex");
              var gen = new Buffer2(primes[mod].gen, "hex");
              return new DH(prime, gen);
            }
            var ENCODINGS = {
              "binary": true,
              "hex": true,
              "base64": true
            };
            function createDiffieHellman(prime, enc, generator, genc) {
              if (Buffer2.isBuffer(enc) || ENCODINGS[enc] === void 0) {
                return createDiffieHellman(prime, "binary", enc, generator);
              }
              enc = enc || "binary";
              genc = genc || "binary";
              generator = generator || new Buffer2([2]);
              if (!Buffer2.isBuffer(generator)) {
                generator = new Buffer2(generator, genc);
              }
              if (typeof prime === "number") {
                return new DH(generatePrime(prime, generator), generator, true);
              }
              if (!Buffer2.isBuffer(prime)) {
                prime = new Buffer2(prime, enc);
              }
              return new DH(prime, generator, true);
            }
            exports3.DiffieHellmanGroup = exports3.createDiffieHellmanGroup = exports3.getDiffieHellman = getDiffieHellman;
            exports3.createDiffieHellman = exports3.DiffieHellman = createDiffieHellman;
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "./lib/dh": 80, "./lib/generatePrime": 81, "./lib/primes.json": 82, "buffer": 63 }], 80: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var BN = require2("bn.js");
            var MillerRabin = require2("miller-rabin");
            var millerRabin = new MillerRabin();
            var TWENTYFOUR = new BN(24);
            var ELEVEN = new BN(11);
            var TEN = new BN(10);
            var THREE = new BN(3);
            var SEVEN = new BN(7);
            var primes = require2("./generatePrime");
            var randomBytes = require2("randombytes");
            module3.exports = DH;
            function setPublicKey(pub, enc) {
              enc = enc || "utf8";
              if (!Buffer2.isBuffer(pub)) {
                pub = new Buffer2(pub, enc);
              }
              this._pub = new BN(pub);
              return this;
            }
            function setPrivateKey(priv, enc) {
              enc = enc || "utf8";
              if (!Buffer2.isBuffer(priv)) {
                priv = new Buffer2(priv, enc);
              }
              this._priv = new BN(priv);
              return this;
            }
            var primeCache = {};
            function checkPrime(prime, generator) {
              var gen = generator.toString("hex");
              var hex = [gen, prime.toString(16)].join("_");
              if (hex in primeCache) {
                return primeCache[hex];
              }
              var error = 0;
              if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
                error += 1;
                if (gen === "02" || gen === "05") {
                  error += 8;
                } else {
                  error += 4;
                }
                primeCache[hex] = error;
                return error;
              }
              if (!millerRabin.test(prime.shrn(1))) {
                error += 2;
              }
              var rem;
              switch (gen) {
                case "02":
                  if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                    error += 8;
                  }
                  break;
                case "05":
                  rem = prime.mod(TEN);
                  if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                    error += 8;
                  }
                  break;
                default:
                  error += 4;
              }
              primeCache[hex] = error;
              return error;
            }
            function DH(prime, generator, malleable) {
              this.setGenerator(generator);
              this.__prime = new BN(prime);
              this._prime = BN.mont(this.__prime);
              this._primeLen = prime.length;
              this._pub = void 0;
              this._priv = void 0;
              this._primeCode = void 0;
              if (malleable) {
                this.setPublicKey = setPublicKey;
                this.setPrivateKey = setPrivateKey;
              } else {
                this._primeCode = 8;
              }
            }
            Object.defineProperty(DH.prototype, "verifyError", {
              enumerable: true,
              get: function() {
                if (typeof this._primeCode !== "number") {
                  this._primeCode = checkPrime(this.__prime, this.__gen);
                }
                return this._primeCode;
              }
            });
            DH.prototype.generateKeys = function() {
              if (!this._priv) {
                this._priv = new BN(randomBytes(this._primeLen));
              }
              this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
              return this.getPublicKey();
            };
            DH.prototype.computeSecret = function(other) {
              other = new BN(other);
              other = other.toRed(this._prime);
              var secret = other.redPow(this._priv).fromRed();
              var out = new Buffer2(secret.toArray());
              var prime = this.getPrime();
              if (out.length < prime.length) {
                var front = new Buffer2(prime.length - out.length);
                front.fill(0);
                out = Buffer2.concat([front, out]);
              }
              return out;
            };
            DH.prototype.getPublicKey = function getPublicKey(enc) {
              return formatReturnValue(this._pub, enc);
            };
            DH.prototype.getPrivateKey = function getPrivateKey(enc) {
              return formatReturnValue(this._priv, enc);
            };
            DH.prototype.getPrime = function(enc) {
              return formatReturnValue(this.__prime, enc);
            };
            DH.prototype.getGenerator = function(enc) {
              return formatReturnValue(this._gen, enc);
            };
            DH.prototype.setGenerator = function(gen, enc) {
              enc = enc || "utf8";
              if (!Buffer2.isBuffer(gen)) {
                gen = new Buffer2(gen, enc);
              }
              this.__gen = gen;
              this._gen = new BN(gen);
              return this;
            };
            function formatReturnValue(bn, enc) {
              var buf = new Buffer2(bn.toArray());
              if (!enc) {
                return buf;
              } else {
                return buf.toString(enc);
              }
            }
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "./generatePrime": 81, "bn.js": 83, "buffer": 63, "miller-rabin": 135, "randombytes": 185 }], 81: [function(require2, module3, exports3) {
        var randomBytes = require2("randombytes");
        module3.exports = findPrime;
        findPrime.simpleSieve = simpleSieve;
        findPrime.fermatTest = fermatTest;
        var BN = require2("bn.js");
        var TWENTYFOUR = new BN(24);
        var MillerRabin = require2("miller-rabin");
        var millerRabin = new MillerRabin();
        var ONE = new BN(1);
        var TWO = new BN(2);
        var FIVE = new BN(5);
        var SIXTEEN = new BN(16);
        var EIGHT = new BN(8);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);
        var ELEVEN = new BN(11);
        var FOUR = new BN(4);
        var TWELVE = new BN(12);
        var primes = null;
        function _getPrimes() {
          if (primes !== null)
            return primes;
          var limit = 1048576;
          var res = [];
          res[0] = 2;
          for (var i = 1, k = 3; k < limit; k += 2) {
            var sqrt = Math.ceil(Math.sqrt(k));
            for (var j = 0; j < i && res[j] <= sqrt; j++)
              if (k % res[j] === 0)
                break;
            if (i !== j && res[j] <= sqrt)
              continue;
            res[i++] = k;
          }
          primes = res;
          return res;
        }
        function simpleSieve(p) {
          var primes2 = _getPrimes();
          for (var i = 0; i < primes2.length; i++)
            if (p.modn(primes2[i]) === 0) {
              if (p.cmpn(primes2[i]) === 0) {
                return true;
              } else {
                return false;
              }
            }
          return true;
        }
        function fermatTest(p) {
          var red = BN.mont(p);
          return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
        }
        function findPrime(bits, gen) {
          if (bits < 16) {
            if (gen === 2 || gen === 5) {
              return new BN([140, 123]);
            } else {
              return new BN([140, 39]);
            }
          }
          gen = new BN(gen);
          var num, n2;
          while (true) {
            num = new BN(randomBytes(Math.ceil(bits / 8)));
            while (num.bitLength() > bits) {
              num.ishrn(1);
            }
            if (num.isEven()) {
              num.iadd(ONE);
            }
            if (!num.testn(1)) {
              num.iadd(TWO);
            }
            if (!gen.cmp(TWO)) {
              while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
                num.iadd(FOUR);
              }
            } else if (!gen.cmp(FIVE)) {
              while (num.mod(TEN).cmp(THREE)) {
                num.iadd(FOUR);
              }
            }
            n2 = num.shrn(1);
            if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
              return num;
            }
          }
        }
      }, { "bn.js": 83, "miller-rabin": 135, "randombytes": 185 }], 82: [function(require2, module3, exports3) {
        module3.exports = {
          "modp1": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
          },
          "modp2": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
          },
          "modp5": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
          },
          "modp14": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
          },
          "modp15": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
          },
          "modp16": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
          },
          "modp17": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
          },
          "modp18": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
          }
        };
      }, {}], 83: [function(require2, module3, exports3) {
        arguments[4][15][0].apply(exports3, arguments);
      }, { "buffer": 19, "dup": 15 }], 84: [function(require2, module3, exports3) {
        "use strict";
        var elliptic = exports3;
        elliptic.version = require2("../package.json").version;
        elliptic.utils = require2("./elliptic/utils");
        elliptic.rand = require2("brorand");
        elliptic.curve = require2("./elliptic/curve");
        elliptic.curves = require2("./elliptic/curves");
        elliptic.ec = require2("./elliptic/ec");
        elliptic.eddsa = require2("./elliptic/eddsa");
      }, { "../package.json": 100, "./elliptic/curve": 87, "./elliptic/curves": 90, "./elliptic/ec": 91, "./elliptic/eddsa": 94, "./elliptic/utils": 98, "brorand": 18 }], 85: [function(require2, module3, exports3) {
        "use strict";
        var BN = require2("bn.js");
        var utils = require2("../utils");
        var getNAF = utils.getNAF;
        var getJSF = utils.getJSF;
        var assert = utils.assert;
        function BaseCurve(type, conf) {
          this.type = type;
          this.p = new BN(conf.p, 16);
          this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
          this.zero = new BN(0).toRed(this.red);
          this.one = new BN(1).toRed(this.red);
          this.two = new BN(2).toRed(this.red);
          this.n = conf.n && new BN(conf.n, 16);
          this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
          this._wnafT1 = new Array(4);
          this._wnafT2 = new Array(4);
          this._wnafT3 = new Array(4);
          this._wnafT4 = new Array(4);
          this._bitLength = this.n ? this.n.bitLength() : 0;
          var adjustCount = this.n && this.p.div(this.n);
          if (!adjustCount || adjustCount.cmpn(100) > 0) {
            this.redN = null;
          } else {
            this._maxwellTrick = true;
            this.redN = this.n.toRed(this.red);
          }
        }
        module3.exports = BaseCurve;
        BaseCurve.prototype.point = function point() {
          throw new Error("Not implemented");
        };
        BaseCurve.prototype.validate = function validate() {
          throw new Error("Not implemented");
        };
        BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
          assert(p.precomputed);
          var doubles = p._getDoubles();
          var naf = getNAF(k, 1, this._bitLength);
          var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
          I /= 3;
          var repr = [];
          var j;
          var nafW;
          for (j = 0; j < naf.length; j += doubles.step) {
            nafW = 0;
            for (var l = j + doubles.step - 1; l >= j; l--)
              nafW = (nafW << 1) + naf[l];
            repr.push(nafW);
          }
          var a = this.jpoint(null, null, null);
          var b = this.jpoint(null, null, null);
          for (var i = I; i > 0; i--) {
            for (j = 0; j < repr.length; j++) {
              nafW = repr[j];
              if (nafW === i)
                b = b.mixedAdd(doubles.points[j]);
              else if (nafW === -i)
                b = b.mixedAdd(doubles.points[j].neg());
            }
            a = a.add(b);
          }
          return a.toP();
        };
        BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
          var w = 4;
          var nafPoints = p._getNAFPoints(w);
          w = nafPoints.wnd;
          var wnd = nafPoints.points;
          var naf = getNAF(k, w, this._bitLength);
          var acc = this.jpoint(null, null, null);
          for (var i = naf.length - 1; i >= 0; i--) {
            for (var l = 0; i >= 0 && naf[i] === 0; i--)
              l++;
            if (i >= 0)
              l++;
            acc = acc.dblp(l);
            if (i < 0)
              break;
            var z = naf[i];
            assert(z !== 0);
            if (p.type === "affine") {
              if (z > 0)
                acc = acc.mixedAdd(wnd[z - 1 >> 1]);
              else
                acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
            } else {
              if (z > 0)
                acc = acc.add(wnd[z - 1 >> 1]);
              else
                acc = acc.add(wnd[-z - 1 >> 1].neg());
            }
          }
          return p.type === "affine" ? acc.toP() : acc;
        };
        BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
          var wndWidth = this._wnafT1;
          var wnd = this._wnafT2;
          var naf = this._wnafT3;
          var max = 0;
          var i;
          var j;
          var p;
          for (i = 0; i < len; i++) {
            p = points[i];
            var nafPoints = p._getNAFPoints(defW);
            wndWidth[i] = nafPoints.wnd;
            wnd[i] = nafPoints.points;
          }
          for (i = len - 1; i >= 1; i -= 2) {
            var a = i - 1;
            var b = i;
            if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
              naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
              naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
              max = Math.max(naf[a].length, max);
              max = Math.max(naf[b].length, max);
              continue;
            }
            var comb = [
              points[a],
              null,
              null,
              points[b]
            ];
            if (points[a].y.cmp(points[b].y) === 0) {
              comb[1] = points[a].add(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
            } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].add(points[b].neg());
            } else {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
            }
            var index = [
              -3,
              -1,
              -5,
              -7,
              0,
              7,
              5,
              1,
              3
            ];
            var jsf = getJSF(coeffs[a], coeffs[b]);
            max = Math.max(jsf[0].length, max);
            naf[a] = new Array(max);
            naf[b] = new Array(max);
            for (j = 0; j < max; j++) {
              var ja = jsf[0][j] | 0;
              var jb = jsf[1][j] | 0;
              naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
              naf[b][j] = 0;
              wnd[a] = comb;
            }
          }
          var acc = this.jpoint(null, null, null);
          var tmp = this._wnafT4;
          for (i = max; i >= 0; i--) {
            var k = 0;
            while (i >= 0) {
              var zero = true;
              for (j = 0; j < len; j++) {
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0)
                  zero = false;
              }
              if (!zero)
                break;
              k++;
              i--;
            }
            if (i >= 0)
              k++;
            acc = acc.dblp(k);
            if (i < 0)
              break;
            for (j = 0; j < len; j++) {
              var z = tmp[j];
              p;
              if (z === 0)
                continue;
              else if (z > 0)
                p = wnd[j][z - 1 >> 1];
              else if (z < 0)
                p = wnd[j][-z - 1 >> 1].neg();
              if (p.type === "affine")
                acc = acc.mixedAdd(p);
              else
                acc = acc.add(p);
            }
          }
          for (i = 0; i < len; i++)
            wnd[i] = null;
          if (jacobianResult)
            return acc;
          else
            return acc.toP();
        };
        function BasePoint(curve, type) {
          this.curve = curve;
          this.type = type;
          this.precomputed = null;
        }
        BaseCurve.BasePoint = BasePoint;
        BasePoint.prototype.eq = function eq() {
          throw new Error("Not implemented");
        };
        BasePoint.prototype.validate = function validate() {
          return this.curve.validate(this);
        };
        BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
          bytes = utils.toArray(bytes, enc);
          var len = this.p.byteLength();
          if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
            if (bytes[0] === 6)
              assert(bytes[bytes.length - 1] % 2 === 0);
            else if (bytes[0] === 7)
              assert(bytes[bytes.length - 1] % 2 === 1);
            var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
            return res;
          } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
            return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
          }
          throw new Error("Unknown point format");
        };
        BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
          return this.encode(enc, true);
        };
        BasePoint.prototype._encode = function _encode(compact) {
          var len = this.curve.p.byteLength();
          var x = this.getX().toArray("be", len);
          if (compact)
            return [this.getY().isEven() ? 2 : 3].concat(x);
          return [4].concat(x, this.getY().toArray("be", len));
        };
        BasePoint.prototype.encode = function encode(enc, compact) {
          return utils.encode(this._encode(compact), enc);
        };
        BasePoint.prototype.precompute = function precompute(power) {
          if (this.precomputed)
            return this;
          var precomputed = {
            doubles: null,
            naf: null,
            beta: null
          };
          precomputed.naf = this._getNAFPoints(8);
          precomputed.doubles = this._getDoubles(4, power);
          precomputed.beta = this._getBeta();
          this.precomputed = precomputed;
          return this;
        };
        BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
          if (!this.precomputed)
            return false;
          var doubles = this.precomputed.doubles;
          if (!doubles)
            return false;
          return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
        };
        BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;
          var doubles = [this];
          var acc = this;
          for (var i = 0; i < power; i += step) {
            for (var j = 0; j < step; j++)
              acc = acc.dbl();
            doubles.push(acc);
          }
          return {
            step,
            points: doubles
          };
        };
        BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;
          var res = [this];
          var max = (1 << wnd) - 1;
          var dbl = max === 1 ? null : this.dbl();
          for (var i = 1; i < max; i++)
            res[i] = res[i - 1].add(dbl);
          return {
            wnd,
            points: res
          };
        };
        BasePoint.prototype._getBeta = function _getBeta() {
          return null;
        };
        BasePoint.prototype.dblp = function dblp(k) {
          var r = this;
          for (var i = 0; i < k; i++)
            r = r.dbl();
          return r;
        };
      }, { "../utils": 98, "bn.js": 99 }], 86: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var BN = require2("bn.js");
        var inherits = require2("inherits");
        var Base = require2("./base");
        var assert = utils.assert;
        function EdwardsCurve(conf) {
          this.twisted = (conf.a | 0) !== 1;
          this.mOneA = this.twisted && (conf.a | 0) === -1;
          this.extended = this.mOneA;
          Base.call(this, "edwards", conf);
          this.a = new BN(conf.a, 16).umod(this.red.m);
          this.a = this.a.toRed(this.red);
          this.c = new BN(conf.c, 16).toRed(this.red);
          this.c2 = this.c.redSqr();
          this.d = new BN(conf.d, 16).toRed(this.red);
          this.dd = this.d.redAdd(this.d);
          assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
          this.oneC = (conf.c | 0) === 1;
        }
        inherits(EdwardsCurve, Base);
        module3.exports = EdwardsCurve;
        EdwardsCurve.prototype._mulA = function _mulA(num) {
          if (this.mOneA)
            return num.redNeg();
          else
            return this.a.redMul(num);
        };
        EdwardsCurve.prototype._mulC = function _mulC(num) {
          if (this.oneC)
            return num;
          else
            return this.c.redMul(num);
        };
        EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
          return this.point(x, y, z, t);
        };
        EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
          x = new BN(x, 16);
          if (!x.red)
            x = x.toRed(this.red);
          var x2 = x.redSqr();
          var rhs = this.c2.redSub(this.a.redMul(x2));
          var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
          var y2 = rhs.redMul(lhs.redInvm());
          var y = y2.redSqrt();
          if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
            throw new Error("invalid point");
          var isOdd = y.fromRed().isOdd();
          if (odd && !isOdd || !odd && isOdd)
            y = y.redNeg();
          return this.point(x, y);
        };
        EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
          y = new BN(y, 16);
          if (!y.red)
            y = y.toRed(this.red);
          var y2 = y.redSqr();
          var lhs = y2.redSub(this.c2);
          var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
          var x2 = lhs.redMul(rhs.redInvm());
          if (x2.cmp(this.zero) === 0) {
            if (odd)
              throw new Error("invalid point");
            else
              return this.point(this.zero, y);
          }
          var x = x2.redSqrt();
          if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
            throw new Error("invalid point");
          if (x.fromRed().isOdd() !== odd)
            x = x.redNeg();
          return this.point(x, y);
        };
        EdwardsCurve.prototype.validate = function validate(point) {
          if (point.isInfinity())
            return true;
          point.normalize();
          var x2 = point.x.redSqr();
          var y2 = point.y.redSqr();
          var lhs = x2.redMul(this.a).redAdd(y2);
          var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
          return lhs.cmp(rhs) === 0;
        };
        function Point(curve, x, y, z, t) {
          Base.BasePoint.call(this, curve, "projective");
          if (x === null && y === null && z === null) {
            this.x = this.curve.zero;
            this.y = this.curve.one;
            this.z = this.curve.one;
            this.t = this.curve.zero;
            this.zOne = true;
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            this.z = z ? new BN(z, 16) : this.curve.one;
            this.t = t && new BN(t, 16);
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
              this.y = this.y.toRed(this.curve.red);
            if (!this.z.red)
              this.z = this.z.toRed(this.curve.red);
            if (this.t && !this.t.red)
              this.t = this.t.toRed(this.curve.red);
            this.zOne = this.z === this.curve.one;
            if (this.curve.extended && !this.t) {
              this.t = this.x.redMul(this.y);
              if (!this.zOne)
                this.t = this.t.redMul(this.z.redInvm());
            }
          }
        }
        inherits(Point, Base.BasePoint);
        EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
          return Point.fromJSON(this, obj);
        };
        EdwardsCurve.prototype.point = function point(x, y, z, t) {
          return new Point(this, x, y, z, t);
        };
        Point.fromJSON = function fromJSON(curve, obj) {
          return new Point(curve, obj[0], obj[1], obj[2]);
        };
        Point.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return "<EC Point Infinity>";
          return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
        };
        Point.prototype.isInfinity = function isInfinity() {
          return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
        };
        Point.prototype._extDbl = function _extDbl() {
          var a = this.x.redSqr();
          var b = this.y.redSqr();
          var c = this.z.redSqr();
          c = c.redIAdd(c);
          var d = this.curve._mulA(a);
          var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
          var g = d.redAdd(b);
          var f = g.redSub(c);
          var h = d.redSub(b);
          var nx = e.redMul(f);
          var ny = g.redMul(h);
          var nt = e.redMul(h);
          var nz = f.redMul(g);
          return this.curve.point(nx, ny, nz, nt);
        };
        Point.prototype._projDbl = function _projDbl() {
          var b = this.x.redAdd(this.y).redSqr();
          var c = this.x.redSqr();
          var d = this.y.redSqr();
          var nx;
          var ny;
          var nz;
          var e;
          var h;
          var j;
          if (this.curve.twisted) {
            e = this.curve._mulA(c);
            var f = e.redAdd(d);
            if (this.zOne) {
              nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
              ny = f.redMul(e.redSub(d));
              nz = f.redSqr().redSub(f).redSub(f);
            } else {
              h = this.z.redSqr();
              j = f.redSub(h).redISub(h);
              nx = b.redSub(c).redISub(d).redMul(j);
              ny = f.redMul(e.redSub(d));
              nz = f.redMul(j);
            }
          } else {
            e = c.redAdd(d);
            h = this.curve._mulC(this.z).redSqr();
            j = e.redSub(h).redSub(h);
            nx = this.curve._mulC(b.redISub(e)).redMul(j);
            ny = this.curve._mulC(e).redMul(c.redISub(d));
            nz = e.redMul(j);
          }
          return this.curve.point(nx, ny, nz);
        };
        Point.prototype.dbl = function dbl() {
          if (this.isInfinity())
            return this;
          if (this.curve.extended)
            return this._extDbl();
          else
            return this._projDbl();
        };
        Point.prototype._extAdd = function _extAdd(p) {
          var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
          var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
          var c = this.t.redMul(this.curve.dd).redMul(p.t);
          var d = this.z.redMul(p.z.redAdd(p.z));
          var e = b.redSub(a);
          var f = d.redSub(c);
          var g = d.redAdd(c);
          var h = b.redAdd(a);
          var nx = e.redMul(f);
          var ny = g.redMul(h);
          var nt = e.redMul(h);
          var nz = f.redMul(g);
          return this.curve.point(nx, ny, nz, nt);
        };
        Point.prototype._projAdd = function _projAdd(p) {
          var a = this.z.redMul(p.z);
          var b = a.redSqr();
          var c = this.x.redMul(p.x);
          var d = this.y.redMul(p.y);
          var e = this.curve.d.redMul(c).redMul(d);
          var f = b.redSub(e);
          var g = b.redAdd(e);
          var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
          var nx = a.redMul(f).redMul(tmp);
          var ny;
          var nz;
          if (this.curve.twisted) {
            ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
            nz = f.redMul(g);
          } else {
            ny = a.redMul(g).redMul(d.redSub(c));
            nz = this.curve._mulC(f).redMul(g);
          }
          return this.curve.point(nx, ny, nz);
        };
        Point.prototype.add = function add(p) {
          if (this.isInfinity())
            return p;
          if (p.isInfinity())
            return this;
          if (this.curve.extended)
            return this._extAdd(p);
          else
            return this._projAdd(p);
        };
        Point.prototype.mul = function mul(k) {
          if (this._hasDoubles(k))
            return this.curve._fixedNafMul(this, k);
          else
            return this.curve._wnafMul(this, k);
        };
        Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
          return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
        };
        Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
          return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
        };
        Point.prototype.normalize = function normalize() {
          if (this.zOne)
            return this;
          var zi = this.z.redInvm();
          this.x = this.x.redMul(zi);
          this.y = this.y.redMul(zi);
          if (this.t)
            this.t = this.t.redMul(zi);
          this.z = this.curve.one;
          this.zOne = true;
          return this;
        };
        Point.prototype.neg = function neg() {
          return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
        };
        Point.prototype.getX = function getX() {
          this.normalize();
          return this.x.fromRed();
        };
        Point.prototype.getY = function getY() {
          this.normalize();
          return this.y.fromRed();
        };
        Point.prototype.eq = function eq(other) {
          return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
        };
        Point.prototype.eqXToP = function eqXToP(x) {
          var rx = x.toRed(this.curve.red).redMul(this.z);
          if (this.x.cmp(rx) === 0)
            return true;
          var xc = x.clone();
          var t = this.curve.redN.redMul(this.z);
          for (; ; ) {
            xc.iadd(this.curve.n);
            if (xc.cmp(this.curve.p) >= 0)
              return false;
            rx.redIAdd(t);
            if (this.x.cmp(rx) === 0)
              return true;
          }
        };
        Point.prototype.toP = Point.prototype.normalize;
        Point.prototype.mixedAdd = Point.prototype.add;
      }, { "../utils": 98, "./base": 85, "bn.js": 99, "inherits": 133 }], 87: [function(require2, module3, exports3) {
        "use strict";
        var curve = exports3;
        curve.base = require2("./base");
        curve.short = require2("./short");
        curve.mont = require2("./mont");
        curve.edwards = require2("./edwards");
      }, { "./base": 85, "./edwards": 86, "./mont": 88, "./short": 89 }], 88: [function(require2, module3, exports3) {
        "use strict";
        var BN = require2("bn.js");
        var inherits = require2("inherits");
        var Base = require2("./base");
        var utils = require2("../utils");
        function MontCurve(conf) {
          Base.call(this, "mont", conf);
          this.a = new BN(conf.a, 16).toRed(this.red);
          this.b = new BN(conf.b, 16).toRed(this.red);
          this.i4 = new BN(4).toRed(this.red).redInvm();
          this.two = new BN(2).toRed(this.red);
          this.a24 = this.i4.redMul(this.a.redAdd(this.two));
        }
        inherits(MontCurve, Base);
        module3.exports = MontCurve;
        MontCurve.prototype.validate = function validate(point) {
          var x = point.normalize().x;
          var x2 = x.redSqr();
          var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
          var y = rhs.redSqrt();
          return y.redSqr().cmp(rhs) === 0;
        };
        function Point(curve, x, z) {
          Base.BasePoint.call(this, curve, "projective");
          if (x === null && z === null) {
            this.x = this.curve.one;
            this.z = this.curve.zero;
          } else {
            this.x = new BN(x, 16);
            this.z = new BN(z, 16);
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.z.red)
              this.z = this.z.toRed(this.curve.red);
          }
        }
        inherits(Point, Base.BasePoint);
        MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
          return this.point(utils.toArray(bytes, enc), 1);
        };
        MontCurve.prototype.point = function point(x, z) {
          return new Point(this, x, z);
        };
        MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
          return Point.fromJSON(this, obj);
        };
        Point.prototype.precompute = function precompute() {
        };
        Point.prototype._encode = function _encode() {
          return this.getX().toArray("be", this.curve.p.byteLength());
        };
        Point.fromJSON = function fromJSON(curve, obj) {
          return new Point(curve, obj[0], obj[1] || curve.one);
        };
        Point.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return "<EC Point Infinity>";
          return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
        };
        Point.prototype.isInfinity = function isInfinity() {
          return this.z.cmpn(0) === 0;
        };
        Point.prototype.dbl = function dbl() {
          var a = this.x.redAdd(this.z);
          var aa = a.redSqr();
          var b = this.x.redSub(this.z);
          var bb = b.redSqr();
          var c = aa.redSub(bb);
          var nx = aa.redMul(bb);
          var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
          return this.curve.point(nx, nz);
        };
        Point.prototype.add = function add() {
          throw new Error("Not supported on Montgomery curve");
        };
        Point.prototype.diffAdd = function diffAdd(p, diff) {
          var a = this.x.redAdd(this.z);
          var b = this.x.redSub(this.z);
          var c = p.x.redAdd(p.z);
          var d = p.x.redSub(p.z);
          var da = d.redMul(a);
          var cb = c.redMul(b);
          var nx = diff.z.redMul(da.redAdd(cb).redSqr());
          var nz = diff.x.redMul(da.redISub(cb).redSqr());
          return this.curve.point(nx, nz);
        };
        Point.prototype.mul = function mul(k) {
          var t = k.clone();
          var a = this;
          var b = this.curve.point(null, null);
          var c = this;
          for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
            bits.push(t.andln(1));
          for (var i = bits.length - 1; i >= 0; i--) {
            if (bits[i] === 0) {
              a = a.diffAdd(b, c);
              b = b.dbl();
            } else {
              b = a.diffAdd(b, c);
              a = a.dbl();
            }
          }
          return b;
        };
        Point.prototype.mulAdd = function mulAdd() {
          throw new Error("Not supported on Montgomery curve");
        };
        Point.prototype.jumlAdd = function jumlAdd() {
          throw new Error("Not supported on Montgomery curve");
        };
        Point.prototype.eq = function eq(other) {
          return this.getX().cmp(other.getX()) === 0;
        };
        Point.prototype.normalize = function normalize() {
          this.x = this.x.redMul(this.z.redInvm());
          this.z = this.curve.one;
          return this;
        };
        Point.prototype.getX = function getX() {
          this.normalize();
          return this.x.fromRed();
        };
      }, { "../utils": 98, "./base": 85, "bn.js": 99, "inherits": 133 }], 89: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var BN = require2("bn.js");
        var inherits = require2("inherits");
        var Base = require2("./base");
        var assert = utils.assert;
        function ShortCurve(conf) {
          Base.call(this, "short", conf);
          this.a = new BN(conf.a, 16).toRed(this.red);
          this.b = new BN(conf.b, 16).toRed(this.red);
          this.tinv = this.two.redInvm();
          this.zeroA = this.a.fromRed().cmpn(0) === 0;
          this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
          this.endo = this._getEndomorphism(conf);
          this._endoWnafT1 = new Array(4);
          this._endoWnafT2 = new Array(4);
        }
        inherits(ShortCurve, Base);
        module3.exports = ShortCurve;
        ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
          if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
            return;
          var beta;
          var lambda;
          if (conf.beta) {
            beta = new BN(conf.beta, 16).toRed(this.red);
          } else {
            var betas = this._getEndoRoots(this.p);
            beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
            beta = beta.toRed(this.red);
          }
          if (conf.lambda) {
            lambda = new BN(conf.lambda, 16);
          } else {
            var lambdas = this._getEndoRoots(this.n);
            if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
              lambda = lambdas[0];
            } else {
              lambda = lambdas[1];
              assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
            }
          }
          var basis;
          if (conf.basis) {
            basis = conf.basis.map(function(vec) {
              return {
                a: new BN(vec.a, 16),
                b: new BN(vec.b, 16)
              };
            });
          } else {
            basis = this._getEndoBasis(lambda);
          }
          return {
            beta,
            lambda,
            basis
          };
        };
        ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
          var red = num === this.p ? this.red : BN.mont(num);
          var tinv = new BN(2).toRed(red).redInvm();
          var ntinv = tinv.redNeg();
          var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
          var l1 = ntinv.redAdd(s).fromRed();
          var l2 = ntinv.redSub(s).fromRed();
          return [l1, l2];
        };
        ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
          var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
          var u = lambda;
          var v = this.n.clone();
          var x1 = new BN(1);
          var y1 = new BN(0);
          var x2 = new BN(0);
          var y2 = new BN(1);
          var a0;
          var b0;
          var a1;
          var b1;
          var a2;
          var b2;
          var prevR;
          var i = 0;
          var r;
          var x;
          while (u.cmpn(0) !== 0) {
            var q = v.div(u);
            r = v.sub(q.mul(u));
            x = x2.sub(q.mul(x1));
            var y = y2.sub(q.mul(y1));
            if (!a1 && r.cmp(aprxSqrt) < 0) {
              a0 = prevR.neg();
              b0 = x1;
              a1 = r.neg();
              b1 = x;
            } else if (a1 && ++i === 2) {
              break;
            }
            prevR = r;
            v = u;
            u = r;
            x2 = x1;
            x1 = x;
            y2 = y1;
            y1 = y;
          }
          a2 = r.neg();
          b2 = x;
          var len1 = a1.sqr().add(b1.sqr());
          var len2 = a2.sqr().add(b2.sqr());
          if (len2.cmp(len1) >= 0) {
            a2 = a0;
            b2 = b0;
          }
          if (a1.negative) {
            a1 = a1.neg();
            b1 = b1.neg();
          }
          if (a2.negative) {
            a2 = a2.neg();
            b2 = b2.neg();
          }
          return [
            { a: a1, b: b1 },
            { a: a2, b: b2 }
          ];
        };
        ShortCurve.prototype._endoSplit = function _endoSplit(k) {
          var basis = this.endo.basis;
          var v1 = basis[0];
          var v2 = basis[1];
          var c1 = v2.b.mul(k).divRound(this.n);
          var c2 = v1.b.neg().mul(k).divRound(this.n);
          var p1 = c1.mul(v1.a);
          var p2 = c2.mul(v2.a);
          var q1 = c1.mul(v1.b);
          var q2 = c2.mul(v2.b);
          var k1 = k.sub(p1).sub(p2);
          var k2 = q1.add(q2).neg();
          return { k1, k2 };
        };
        ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
          x = new BN(x, 16);
          if (!x.red)
            x = x.toRed(this.red);
          var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
          var y = y2.redSqrt();
          if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
            throw new Error("invalid point");
          var isOdd = y.fromRed().isOdd();
          if (odd && !isOdd || !odd && isOdd)
            y = y.redNeg();
          return this.point(x, y);
        };
        ShortCurve.prototype.validate = function validate(point) {
          if (point.inf)
            return true;
          var x = point.x;
          var y = point.y;
          var ax = this.a.redMul(x);
          var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
          return y.redSqr().redISub(rhs).cmpn(0) === 0;
        };
        ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();
            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }
            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };
        function Point(curve, x, y, isRed) {
          Base.BasePoint.call(this, curve, "affine");
          if (x === null && y === null) {
            this.x = null;
            this.y = null;
            this.inf = true;
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            if (isRed) {
              this.x.forceRed(this.curve.red);
              this.y.forceRed(this.curve.red);
            }
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
              this.y = this.y.toRed(this.curve.red);
            this.inf = false;
          }
        }
        inherits(Point, Base.BasePoint);
        ShortCurve.prototype.point = function point(x, y, isRed) {
          return new Point(this, x, y, isRed);
        };
        ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
          return Point.fromJSON(this, obj, red);
        };
        Point.prototype._getBeta = function _getBeta() {
          if (!this.curve.endo)
            return;
          var pre = this.precomputed;
          if (pre && pre.beta)
            return pre.beta;
          var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
          if (pre) {
            var curve = this.curve;
            var endoMul = function(p) {
              return curve.point(p.x.redMul(curve.endo.beta), p.y);
            };
            pre.beta = beta;
            beta.precomputed = {
              beta: null,
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
              },
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
              }
            };
          }
          return beta;
        };
        Point.prototype.toJSON = function toJSON() {
          if (!this.precomputed)
            return [this.x, this.y];
          return [this.x, this.y, this.precomputed && {
            doubles: this.precomputed.doubles && {
              step: this.precomputed.doubles.step,
              points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
              wnd: this.precomputed.naf.wnd,
              points: this.precomputed.naf.points.slice(1)
            }
          }];
        };
        Point.fromJSON = function fromJSON(curve, obj, red) {
          if (typeof obj === "string")
            obj = JSON.parse(obj);
          var res = curve.point(obj[0], obj[1], red);
          if (!obj[2])
            return res;
          function obj2point(obj2) {
            return curve.point(obj2[0], obj2[1], red);
          }
          var pre = obj[2];
          res.precomputed = {
            beta: null,
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: [res].concat(pre.doubles.points.map(obj2point))
            },
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: [res].concat(pre.naf.points.map(obj2point))
            }
          };
          return res;
        };
        Point.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return "<EC Point Infinity>";
          return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
        };
        Point.prototype.isInfinity = function isInfinity() {
          return this.inf;
        };
        Point.prototype.add = function add(p) {
          if (this.inf)
            return p;
          if (p.inf)
            return this;
          if (this.eq(p))
            return this.dbl();
          if (this.neg().eq(p))
            return this.curve.point(null, null);
          if (this.x.cmp(p.x) === 0)
            return this.curve.point(null, null);
          var c = this.y.redSub(p.y);
          if (c.cmpn(0) !== 0)
            c = c.redMul(this.x.redSub(p.x).redInvm());
          var nx = c.redSqr().redISub(this.x).redISub(p.x);
          var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
          return this.curve.point(nx, ny);
        };
        Point.prototype.dbl = function dbl() {
          if (this.inf)
            return this;
          var ys1 = this.y.redAdd(this.y);
          if (ys1.cmpn(0) === 0)
            return this.curve.point(null, null);
          var a = this.curve.a;
          var x2 = this.x.redSqr();
          var dyinv = ys1.redInvm();
          var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
          var nx = c.redSqr().redISub(this.x.redAdd(this.x));
          var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
          return this.curve.point(nx, ny);
        };
        Point.prototype.getX = function getX() {
          return this.x.fromRed();
        };
        Point.prototype.getY = function getY() {
          return this.y.fromRed();
        };
        Point.prototype.mul = function mul(k) {
          k = new BN(k, 16);
          if (this.isInfinity())
            return this;
          else if (this._hasDoubles(k))
            return this.curve._fixedNafMul(this, k);
          else if (this.curve.endo)
            return this.curve._endoWnafMulAdd([this], [k]);
          else
            return this.curve._wnafMul(this, k);
        };
        Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
          var points = [this, p2];
          var coeffs = [k1, k2];
          if (this.curve.endo)
            return this.curve._endoWnafMulAdd(points, coeffs);
          else
            return this.curve._wnafMulAdd(1, points, coeffs, 2);
        };
        Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
          var points = [this, p2];
          var coeffs = [k1, k2];
          if (this.curve.endo)
            return this.curve._endoWnafMulAdd(points, coeffs, true);
          else
            return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
        };
        Point.prototype.eq = function eq(p) {
          return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
        };
        Point.prototype.neg = function neg(_precompute) {
          if (this.inf)
            return this;
          var res = this.curve.point(this.x, this.y.redNeg());
          if (_precompute && this.precomputed) {
            var pre = this.precomputed;
            var negate = function(p) {
              return p.neg();
            };
            res.precomputed = {
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
              },
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
              }
            };
          }
          return res;
        };
        Point.prototype.toJ = function toJ() {
          if (this.inf)
            return this.curve.jpoint(null, null, null);
          var res = this.curve.jpoint(this.x, this.y, this.curve.one);
          return res;
        };
        function JPoint(curve, x, y, z) {
          Base.BasePoint.call(this, curve, "jacobian");
          if (x === null && y === null && z === null) {
            this.x = this.curve.one;
            this.y = this.curve.one;
            this.z = new BN(0);
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            this.z = new BN(z, 16);
          }
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
          this.zOne = this.z === this.curve.one;
        }
        inherits(JPoint, Base.BasePoint);
        ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
          return new JPoint(this, x, y, z);
        };
        JPoint.prototype.toP = function toP() {
          if (this.isInfinity())
            return this.curve.point(null, null);
          var zinv = this.z.redInvm();
          var zinv2 = zinv.redSqr();
          var ax = this.x.redMul(zinv2);
          var ay = this.y.redMul(zinv2).redMul(zinv);
          return this.curve.point(ax, ay);
        };
        JPoint.prototype.neg = function neg() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        };
        JPoint.prototype.add = function add(p) {
          if (this.isInfinity())
            return p;
          if (p.isInfinity())
            return this;
          var pz2 = p.z.redSqr();
          var z2 = this.z.redSqr();
          var u1 = this.x.redMul(pz2);
          var u2 = p.x.redMul(z2);
          var s1 = this.y.redMul(pz2.redMul(p.z));
          var s2 = p.y.redMul(z2.redMul(this.z));
          var h = u1.redSub(u2);
          var r = s1.redSub(s2);
          if (h.cmpn(0) === 0) {
            if (r.cmpn(0) !== 0)
              return this.curve.jpoint(null, null, null);
            else
              return this.dbl();
          }
          var h2 = h.redSqr();
          var h3 = h2.redMul(h);
          var v = u1.redMul(h2);
          var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
          var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
          var nz = this.z.redMul(p.z).redMul(h);
          return this.curve.jpoint(nx, ny, nz);
        };
        JPoint.prototype.mixedAdd = function mixedAdd(p) {
          if (this.isInfinity())
            return p.toJ();
          if (p.isInfinity())
            return this;
          var z2 = this.z.redSqr();
          var u1 = this.x;
          var u2 = p.x.redMul(z2);
          var s1 = this.y;
          var s2 = p.y.redMul(z2).redMul(this.z);
          var h = u1.redSub(u2);
          var r = s1.redSub(s2);
          if (h.cmpn(0) === 0) {
            if (r.cmpn(0) !== 0)
              return this.curve.jpoint(null, null, null);
            else
              return this.dbl();
          }
          var h2 = h.redSqr();
          var h3 = h2.redMul(h);
          var v = u1.redMul(h2);
          var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
          var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
          var nz = this.z.redMul(h);
          return this.curve.jpoint(nx, ny, nz);
        };
        JPoint.prototype.dblp = function dblp(pow) {
          if (pow === 0)
            return this;
          if (this.isInfinity())
            return this;
          if (!pow)
            return this.dbl();
          var i;
          if (this.curve.zeroA || this.curve.threeA) {
            var r = this;
            for (i = 0; i < pow; i++)
              r = r.dbl();
            return r;
          }
          var a = this.curve.a;
          var tinv = this.curve.tinv;
          var jx = this.x;
          var jy = this.y;
          var jz = this.z;
          var jz4 = jz.redSqr().redSqr();
          var jyd = jy.redAdd(jy);
          for (i = 0; i < pow; i++) {
            var jx2 = jx.redSqr();
            var jyd2 = jyd.redSqr();
            var jyd4 = jyd2.redSqr();
            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
            var t1 = jx.redMul(jyd2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);
            var dny = c.redMul(t2);
            dny = dny.redIAdd(dny).redISub(jyd4);
            var nz = jyd.redMul(jz);
            if (i + 1 < pow)
              jz4 = jz4.redMul(jyd4);
            jx = nx;
            jz = nz;
            jyd = dny;
          }
          return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
        };
        JPoint.prototype.dbl = function dbl() {
          if (this.isInfinity())
            return this;
          if (this.curve.zeroA)
            return this._zeroDbl();
          else if (this.curve.threeA)
            return this._threeDbl();
          else
            return this._dbl();
        };
        JPoint.prototype._zeroDbl = function _zeroDbl() {
          var nx;
          var ny;
          var nz;
          if (this.zOne) {
            var xx = this.x.redSqr();
            var yy = this.y.redSqr();
            var yyyy = yy.redSqr();
            var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            s = s.redIAdd(s);
            var m = xx.redAdd(xx).redIAdd(xx);
            var t = m.redSqr().redISub(s).redISub(s);
            var yyyy8 = yyyy.redIAdd(yyyy);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            nx = t;
            ny = m.redMul(s.redISub(t)).redISub(yyyy8);
            nz = this.y.redAdd(this.y);
          } else {
            var a = this.x.redSqr();
            var b = this.y.redSqr();
            var c = b.redSqr();
            var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
            d = d.redIAdd(d);
            var e = a.redAdd(a).redIAdd(a);
            var f = e.redSqr();
            var c8 = c.redIAdd(c);
            c8 = c8.redIAdd(c8);
            c8 = c8.redIAdd(c8);
            nx = f.redISub(d).redISub(d);
            ny = e.redMul(d.redISub(nx)).redISub(c8);
            nz = this.y.redMul(this.z);
            nz = nz.redIAdd(nz);
          }
          return this.curve.jpoint(nx, ny, nz);
        };
        JPoint.prototype._threeDbl = function _threeDbl() {
          var nx;
          var ny;
          var nz;
          if (this.zOne) {
            var xx = this.x.redSqr();
            var yy = this.y.redSqr();
            var yyyy = yy.redSqr();
            var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            s = s.redIAdd(s);
            var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
            var t = m.redSqr().redISub(s).redISub(s);
            nx = t;
            var yyyy8 = yyyy.redIAdd(yyyy);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            ny = m.redMul(s.redISub(t)).redISub(yyyy8);
            nz = this.y.redAdd(this.y);
          } else {
            var delta = this.z.redSqr();
            var gamma = this.y.redSqr();
            var beta = this.x.redMul(gamma);
            var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
            alpha = alpha.redAdd(alpha).redIAdd(alpha);
            var beta4 = beta.redIAdd(beta);
            beta4 = beta4.redIAdd(beta4);
            var beta8 = beta4.redAdd(beta4);
            nx = alpha.redSqr().redISub(beta8);
            nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
            var ggamma8 = gamma.redSqr();
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
          }
          return this.curve.jpoint(nx, ny, nz);
        };
        JPoint.prototype._dbl = function _dbl() {
          var a = this.curve.a;
          var jx = this.x;
          var jy = this.y;
          var jz = this.z;
          var jz4 = jz.redSqr().redSqr();
          var jx2 = jx.redSqr();
          var jy2 = jy.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
          var jxd4 = jx.redAdd(jx);
          jxd4 = jxd4.redIAdd(jxd4);
          var t1 = jxd4.redMul(jy2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var jyd8 = jy2.redSqr();
          jyd8 = jyd8.redIAdd(jyd8);
          jyd8 = jyd8.redIAdd(jyd8);
          jyd8 = jyd8.redIAdd(jyd8);
          var ny = c.redMul(t2).redISub(jyd8);
          var nz = jy.redAdd(jy).redMul(jz);
          return this.curve.jpoint(nx, ny, nz);
        };
        JPoint.prototype.trpl = function trpl() {
          if (!this.curve.zeroA)
            return this.dbl().add(this);
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var zz = this.z.redSqr();
          var yyyy = yy.redSqr();
          var m = xx.redAdd(xx).redIAdd(xx);
          var mm = m.redSqr();
          var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          e = e.redIAdd(e);
          e = e.redAdd(e).redIAdd(e);
          e = e.redISub(mm);
          var ee = e.redSqr();
          var t = yyyy.redIAdd(yyyy);
          t = t.redIAdd(t);
          t = t.redIAdd(t);
          t = t.redIAdd(t);
          var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
          var yyu4 = yy.redMul(u);
          yyu4 = yyu4.redIAdd(yyu4);
          yyu4 = yyu4.redIAdd(yyu4);
          var nx = this.x.redMul(ee).redISub(yyu4);
          nx = nx.redIAdd(nx);
          nx = nx.redIAdd(nx);
          var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
          ny = ny.redIAdd(ny);
          ny = ny.redIAdd(ny);
          ny = ny.redIAdd(ny);
          var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
          return this.curve.jpoint(nx, ny, nz);
        };
        JPoint.prototype.mul = function mul(k, kbase) {
          k = new BN(k, kbase);
          return this.curve._wnafMul(this, k);
        };
        JPoint.prototype.eq = function eq(p) {
          if (p.type === "affine")
            return this.eq(p.toJ());
          if (this === p)
            return true;
          var z2 = this.z.redSqr();
          var pz2 = p.z.redSqr();
          if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
            return false;
          var z3 = z2.redMul(this.z);
          var pz3 = pz2.redMul(p.z);
          return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
        };
        JPoint.prototype.eqXToP = function eqXToP(x) {
          var zs = this.z.redSqr();
          var rx = x.toRed(this.curve.red).redMul(zs);
          if (this.x.cmp(rx) === 0)
            return true;
          var xc = x.clone();
          var t = this.curve.redN.redMul(zs);
          for (; ; ) {
            xc.iadd(this.curve.n);
            if (xc.cmp(this.curve.p) >= 0)
              return false;
            rx.redIAdd(t);
            if (this.x.cmp(rx) === 0)
              return true;
          }
        };
        JPoint.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return "<EC JPoint Infinity>";
          return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
        };
        JPoint.prototype.isInfinity = function isInfinity() {
          return this.z.cmpn(0) === 0;
        };
      }, { "../utils": 98, "./base": 85, "bn.js": 99, "inherits": 133 }], 90: [function(require2, module3, exports3) {
        "use strict";
        var curves = exports3;
        var hash = require2("hash.js");
        var curve = require2("./curve");
        var utils = require2("./utils");
        var assert = utils.assert;
        function PresetCurve(options) {
          if (options.type === "short")
            this.curve = new curve.short(options);
          else if (options.type === "edwards")
            this.curve = new curve.edwards(options);
          else
            this.curve = new curve.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;
          assert(this.g.validate(), "Invalid curve");
          assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        curves.PresetCurve = PresetCurve;
        function defineCurve(name, options) {
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function() {
              var curve2 = new PresetCurve(options);
              Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve2
              });
              return curve2;
            }
          });
        }
        defineCurve("p192", {
          type: "short",
          prime: "p192",
          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
          hash: hash.sha256,
          gRed: false,
          g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
          ]
        });
        defineCurve("p224", {
          type: "short",
          prime: "p224",
          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
          hash: hash.sha256,
          gRed: false,
          g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
          ]
        });
        defineCurve("p256", {
          type: "short",
          prime: null,
          p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
          a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
          b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
          n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
          hash: hash.sha256,
          gRed: false,
          g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
          ]
        });
        defineCurve("p384", {
          type: "short",
          prime: null,
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
          a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
          b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
          n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
          hash: hash.sha384,
          gRed: false,
          g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
          ]
        });
        defineCurve("p521", {
          type: "short",
          prime: null,
          p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
          a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
          b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
          n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
          hash: hash.sha512,
          gRed: false,
          g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
          ]
        });
        defineCurve("curve25519", {
          type: "mont",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "76d06",
          b: "1",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash.sha256,
          gRed: false,
          g: [
            "9"
          ]
        });
        defineCurve("ed25519", {
          type: "edwards",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "-1",
          c: "1",
          d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash.sha256,
          gRed: false,
          g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
            "6666666666666666666666666666666666666666666666666666666666666658"
          ]
        });
        var pre;
        try {
          pre = require2("./precomputed/secp256k1");
        } catch (e) {
          pre = void 0;
        }
        defineCurve("secp256k1", {
          type: "short",
          prime: "k256",
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
          a: "0",
          b: "7",
          n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
          h: "1",
          hash: hash.sha256,
          beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
          lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
          basis: [
            {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3"
            },
            {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15"
            }
          ],
          gRed: false,
          g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre
          ]
        });
      }, { "./curve": 87, "./precomputed/secp256k1": 97, "./utils": 98, "hash.js": 119 }], 91: [function(require2, module3, exports3) {
        "use strict";
        var BN = require2("bn.js");
        var HmacDRBG = require2("hmac-drbg");
        var utils = require2("../utils");
        var curves = require2("../curves");
        var rand = require2("brorand");
        var assert = utils.assert;
        var KeyPair = require2("./key");
        var Signature = require2("./signature");
        function EC(options) {
          if (!(this instanceof EC))
            return new EC(options);
          if (typeof options === "string") {
            assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
            options = curves[options];
          }
          if (options instanceof curves.PresetCurve)
            options = { curve: options };
          this.curve = options.curve.curve;
          this.n = this.curve.n;
          this.nh = this.n.ushrn(1);
          this.g = this.curve.g;
          this.g = options.curve.g;
          this.g.precompute(options.curve.n.bitLength() + 1);
          this.hash = options.hash || options.curve.hash;
        }
        module3.exports = EC;
        EC.prototype.keyPair = function keyPair(options) {
          return new KeyPair(this, options);
        };
        EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
          return KeyPair.fromPrivate(this, priv, enc);
        };
        EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
          return KeyPair.fromPublic(this, pub, enc);
        };
        EC.prototype.genKeyPair = function genKeyPair(options) {
          if (!options)
            options = {};
          var drbg = new HmacDRBG({
            hash: this.hash,
            pers: options.pers,
            persEnc: options.persEnc || "utf8",
            entropy: options.entropy || rand(this.hash.hmacStrength),
            entropyEnc: options.entropy && options.entropyEnc || "utf8",
            nonce: this.n.toArray()
          });
          var bytes = this.n.byteLength();
          var ns2 = this.n.sub(new BN(2));
          for (; ; ) {
            var priv = new BN(drbg.generate(bytes));
            if (priv.cmp(ns2) > 0)
              continue;
            priv.iaddn(1);
            return this.keyFromPrivate(priv);
          }
        };
        EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
          var delta = msg.byteLength() * 8 - this.n.bitLength();
          if (delta > 0)
            msg = msg.ushrn(delta);
          if (!truncOnly && msg.cmp(this.n) >= 0)
            return msg.sub(this.n);
          else
            return msg;
        };
        EC.prototype.sign = function sign(msg, key, enc, options) {
          if (typeof enc === "object") {
            options = enc;
            enc = null;
          }
          if (!options)
            options = {};
          key = this.keyFromPrivate(key, enc);
          msg = this._truncateToN(new BN(msg, 16));
          var bytes = this.n.byteLength();
          var bkey = key.getPrivate().toArray("be", bytes);
          var nonce = msg.toArray("be", bytes);
          var drbg = new HmacDRBG({
            hash: this.hash,
            entropy: bkey,
            nonce,
            pers: options.pers,
            persEnc: options.persEnc || "utf8"
          });
          var ns1 = this.n.sub(new BN(1));
          for (var iter = 0; ; iter++) {
            var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
            k = this._truncateToN(k, true);
            if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
              continue;
            var kp = this.g.mul(k);
            if (kp.isInfinity())
              continue;
            var kpX = kp.getX();
            var r = kpX.umod(this.n);
            if (r.cmpn(0) === 0)
              continue;
            var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
            s = s.umod(this.n);
            if (s.cmpn(0) === 0)
              continue;
            var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
            if (options.canonical && s.cmp(this.nh) > 0) {
              s = this.n.sub(s);
              recoveryParam ^= 1;
            }
            return new Signature({ r, s, recoveryParam });
          }
        };
        EC.prototype.verify = function verify(msg, signature, key, enc) {
          msg = this._truncateToN(new BN(msg, 16));
          key = this.keyFromPublic(key, enc);
          signature = new Signature(signature, "hex");
          var r = signature.r;
          var s = signature.s;
          if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
            return false;
          if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
            return false;
          var sinv = s.invm(this.n);
          var u1 = sinv.mul(msg).umod(this.n);
          var u2 = sinv.mul(r).umod(this.n);
          var p;
          if (!this.curve._maxwellTrick) {
            p = this.g.mulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity())
              return false;
            return p.getX().umod(this.n).cmp(r) === 0;
          }
          p = this.g.jmulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity())
            return false;
          return p.eqXToP(r);
        };
        EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
          assert((3 & j) === j, "The recovery param is more than two bits");
          signature = new Signature(signature, enc);
          var n = this.n;
          var e = new BN(msg);
          var r = signature.r;
          var s = signature.s;
          var isYOdd = j & 1;
          var isSecondKey = j >> 1;
          if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
            throw new Error("Unable to find sencond key candinate");
          if (isSecondKey)
            r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
          else
            r = this.curve.pointFromX(r, isYOdd);
          var rInv = signature.r.invm(n);
          var s1 = n.sub(e).mul(rInv).umod(n);
          var s2 = s.mul(rInv).umod(n);
          return this.g.mulAdd(s1, r, s2);
        };
        EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
          signature = new Signature(signature, enc);
          if (signature.recoveryParam !== null)
            return signature.recoveryParam;
          for (var i = 0; i < 4; i++) {
            var Qprime;
            try {
              Qprime = this.recoverPubKey(e, signature, i);
            } catch (e2) {
              continue;
            }
            if (Qprime.eq(Q))
              return i;
          }
          throw new Error("Unable to find valid recovery factor");
        };
      }, { "../curves": 90, "../utils": 98, "./key": 92, "./signature": 93, "bn.js": 99, "brorand": 18, "hmac-drbg": 131 }], 92: [function(require2, module3, exports3) {
        "use strict";
        var BN = require2("bn.js");
        var utils = require2("../utils");
        var assert = utils.assert;
        function KeyPair(ec, options) {
          this.ec = ec;
          this.priv = null;
          this.pub = null;
          if (options.priv)
            this._importPrivate(options.priv, options.privEnc);
          if (options.pub)
            this._importPublic(options.pub, options.pubEnc);
        }
        module3.exports = KeyPair;
        KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
          if (pub instanceof KeyPair)
            return pub;
          return new KeyPair(ec, {
            pub,
            pubEnc: enc
          });
        };
        KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
          if (priv instanceof KeyPair)
            return priv;
          return new KeyPair(ec, {
            priv,
            privEnc: enc
          });
        };
        KeyPair.prototype.validate = function validate() {
          var pub = this.getPublic();
          if (pub.isInfinity())
            return { result: false, reason: "Invalid public key" };
          if (!pub.validate())
            return { result: false, reason: "Public key is not a point" };
          if (!pub.mul(this.ec.curve.n).isInfinity())
            return { result: false, reason: "Public key * N != O" };
          return { result: true, reason: null };
        };
        KeyPair.prototype.getPublic = function getPublic(compact, enc) {
          if (typeof compact === "string") {
            enc = compact;
            compact = null;
          }
          if (!this.pub)
            this.pub = this.ec.g.mul(this.priv);
          if (!enc)
            return this.pub;
          return this.pub.encode(enc, compact);
        };
        KeyPair.prototype.getPrivate = function getPrivate(enc) {
          if (enc === "hex")
            return this.priv.toString(16, 2);
          else
            return this.priv;
        };
        KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
          this.priv = new BN(key, enc || 16);
          this.priv = this.priv.umod(this.ec.curve.n);
        };
        KeyPair.prototype._importPublic = function _importPublic(key, enc) {
          if (key.x || key.y) {
            if (this.ec.curve.type === "mont") {
              assert(key.x, "Need x coordinate");
            } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
              assert(key.x && key.y, "Need both x and y coordinate");
            }
            this.pub = this.ec.curve.point(key.x, key.y);
            return;
          }
          this.pub = this.ec.curve.decodePoint(key, enc);
        };
        KeyPair.prototype.derive = function derive(pub) {
          if (!pub.validate()) {
            assert(pub.validate(), "public point not validated");
          }
          return pub.mul(this.priv).getX();
        };
        KeyPair.prototype.sign = function sign(msg, enc, options) {
          return this.ec.sign(msg, this, enc, options);
        };
        KeyPair.prototype.verify = function verify(msg, signature) {
          return this.ec.verify(msg, signature, this);
        };
        KeyPair.prototype.inspect = function inspect() {
          return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
        };
      }, { "../utils": 98, "bn.js": 99 }], 93: [function(require2, module3, exports3) {
        "use strict";
        var BN = require2("bn.js");
        var utils = require2("../utils");
        var assert = utils.assert;
        function Signature(options, enc) {
          if (options instanceof Signature)
            return options;
          if (this._importDER(options, enc))
            return;
          assert(options.r && options.s, "Signature without r or s");
          this.r = new BN(options.r, 16);
          this.s = new BN(options.s, 16);
          if (options.recoveryParam === void 0)
            this.recoveryParam = null;
          else
            this.recoveryParam = options.recoveryParam;
        }
        module3.exports = Signature;
        function Position() {
          this.place = 0;
        }
        function getLength(buf, p) {
          var initial = buf[p.place++];
          if (!(initial & 128)) {
            return initial;
          }
          var octetLen = initial & 15;
          if (octetLen === 0 || octetLen > 4) {
            return false;
          }
          var val = 0;
          for (var i = 0, off = p.place; i < octetLen; i++, off++) {
            val <<= 8;
            val |= buf[off];
            val >>>= 0;
          }
          if (val <= 127) {
            return false;
          }
          p.place = off;
          return val;
        }
        function rmPadding(buf) {
          var i = 0;
          var len = buf.length - 1;
          while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
            i++;
          }
          if (i === 0) {
            return buf;
          }
          return buf.slice(i);
        }
        Signature.prototype._importDER = function _importDER(data, enc) {
          data = utils.toArray(data, enc);
          var p = new Position();
          if (data[p.place++] !== 48) {
            return false;
          }
          var len = getLength(data, p);
          if (len === false) {
            return false;
          }
          if (len + p.place !== data.length) {
            return false;
          }
          if (data[p.place++] !== 2) {
            return false;
          }
          var rlen = getLength(data, p);
          if (rlen === false) {
            return false;
          }
          var r = data.slice(p.place, rlen + p.place);
          p.place += rlen;
          if (data[p.place++] !== 2) {
            return false;
          }
          var slen = getLength(data, p);
          if (slen === false) {
            return false;
          }
          if (data.length !== slen + p.place) {
            return false;
          }
          var s = data.slice(p.place, slen + p.place);
          if (r[0] === 0) {
            if (r[1] & 128) {
              r = r.slice(1);
            } else {
              return false;
            }
          }
          if (s[0] === 0) {
            if (s[1] & 128) {
              s = s.slice(1);
            } else {
              return false;
            }
          }
          this.r = new BN(r);
          this.s = new BN(s);
          this.recoveryParam = null;
          return true;
        };
        function constructLength(arr, len) {
          if (len < 128) {
            arr.push(len);
            return;
          }
          var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
          arr.push(octets | 128);
          while (--octets) {
            arr.push(len >>> (octets << 3) & 255);
          }
          arr.push(len);
        }
        Signature.prototype.toDER = function toDER(enc) {
          var r = this.r.toArray();
          var s = this.s.toArray();
          if (r[0] & 128)
            r = [0].concat(r);
          if (s[0] & 128)
            s = [0].concat(s);
          r = rmPadding(r);
          s = rmPadding(s);
          while (!s[0] && !(s[1] & 128)) {
            s = s.slice(1);
          }
          var arr = [2];
          constructLength(arr, r.length);
          arr = arr.concat(r);
          arr.push(2);
          constructLength(arr, s.length);
          var backHalf = arr.concat(s);
          var res = [48];
          constructLength(res, backHalf.length);
          res = res.concat(backHalf);
          return utils.encode(res, enc);
        };
      }, { "../utils": 98, "bn.js": 99 }], 94: [function(require2, module3, exports3) {
        "use strict";
        var hash = require2("hash.js");
        var curves = require2("../curves");
        var utils = require2("../utils");
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var KeyPair = require2("./key");
        var Signature = require2("./signature");
        function EDDSA(curve) {
          assert(curve === "ed25519", "only tested with ed25519 so far");
          if (!(this instanceof EDDSA))
            return new EDDSA(curve);
          curve = curves[curve].curve;
          this.curve = curve;
          this.g = curve.g;
          this.g.precompute(curve.n.bitLength() + 1);
          this.pointClass = curve.point().constructor;
          this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
          this.hash = hash.sha512;
        }
        module3.exports = EDDSA;
        EDDSA.prototype.sign = function sign(message, secret) {
          message = parseBytes(message);
          var key = this.keyFromSecret(secret);
          var r = this.hashInt(key.messagePrefix(), message);
          var R = this.g.mul(r);
          var Rencoded = this.encodePoint(R);
          var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
          var S = r.add(s_).umod(this.curve.n);
          return this.makeSignature({ R, S, Rencoded });
        };
        EDDSA.prototype.verify = function verify(message, sig, pub) {
          message = parseBytes(message);
          sig = this.makeSignature(sig);
          var key = this.keyFromPublic(pub);
          var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
          var SG = this.g.mul(sig.S());
          var RplusAh = sig.R().add(key.pub().mul(h));
          return RplusAh.eq(SG);
        };
        EDDSA.prototype.hashInt = function hashInt() {
          var hash2 = this.hash();
          for (var i = 0; i < arguments.length; i++)
            hash2.update(arguments[i]);
          return utils.intFromLE(hash2.digest()).umod(this.curve.n);
        };
        EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
          return KeyPair.fromPublic(this, pub);
        };
        EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
          return KeyPair.fromSecret(this, secret);
        };
        EDDSA.prototype.makeSignature = function makeSignature(sig) {
          if (sig instanceof Signature)
            return sig;
          return new Signature(this, sig);
        };
        EDDSA.prototype.encodePoint = function encodePoint(point) {
          var enc = point.getY().toArray("le", this.encodingLength);
          enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
          return enc;
        };
        EDDSA.prototype.decodePoint = function decodePoint(bytes) {
          bytes = utils.parseBytes(bytes);
          var lastIx = bytes.length - 1;
          var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
          var xIsOdd = (bytes[lastIx] & 128) !== 0;
          var y = utils.intFromLE(normed);
          return this.curve.pointFromY(y, xIsOdd);
        };
        EDDSA.prototype.encodeInt = function encodeInt(num) {
          return num.toArray("le", this.encodingLength);
        };
        EDDSA.prototype.decodeInt = function decodeInt(bytes) {
          return utils.intFromLE(bytes);
        };
        EDDSA.prototype.isPoint = function isPoint(val) {
          return val instanceof this.pointClass;
        };
      }, { "../curves": 90, "../utils": 98, "./key": 95, "./signature": 96, "hash.js": 119 }], 95: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var cachedProperty = utils.cachedProperty;
        function KeyPair(eddsa, params) {
          this.eddsa = eddsa;
          this._secret = parseBytes(params.secret);
          if (eddsa.isPoint(params.pub))
            this._pub = params.pub;
          else
            this._pubBytes = parseBytes(params.pub);
        }
        KeyPair.fromPublic = function fromPublic(eddsa, pub) {
          if (pub instanceof KeyPair)
            return pub;
          return new KeyPair(eddsa, { pub });
        };
        KeyPair.fromSecret = function fromSecret(eddsa, secret) {
          if (secret instanceof KeyPair)
            return secret;
          return new KeyPair(eddsa, { secret });
        };
        KeyPair.prototype.secret = function secret() {
          return this._secret;
        };
        cachedProperty(KeyPair, "pubBytes", function pubBytes() {
          return this.eddsa.encodePoint(this.pub());
        });
        cachedProperty(KeyPair, "pub", function pub() {
          if (this._pubBytes)
            return this.eddsa.decodePoint(this._pubBytes);
          return this.eddsa.g.mul(this.priv());
        });
        cachedProperty(KeyPair, "privBytes", function privBytes() {
          var eddsa = this.eddsa;
          var hash = this.hash();
          var lastIx = eddsa.encodingLength - 1;
          var a = hash.slice(0, eddsa.encodingLength);
          a[0] &= 248;
          a[lastIx] &= 127;
          a[lastIx] |= 64;
          return a;
        });
        cachedProperty(KeyPair, "priv", function priv() {
          return this.eddsa.decodeInt(this.privBytes());
        });
        cachedProperty(KeyPair, "hash", function hash() {
          return this.eddsa.hash().update(this.secret()).digest();
        });
        cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
          return this.hash().slice(this.eddsa.encodingLength);
        });
        KeyPair.prototype.sign = function sign(message) {
          assert(this._secret, "KeyPair can only verify");
          return this.eddsa.sign(message, this);
        };
        KeyPair.prototype.verify = function verify(message, sig) {
          return this.eddsa.verify(message, sig, this);
        };
        KeyPair.prototype.getSecret = function getSecret(enc) {
          assert(this._secret, "KeyPair is public only");
          return utils.encode(this.secret(), enc);
        };
        KeyPair.prototype.getPublic = function getPublic(enc) {
          return utils.encode(this.pubBytes(), enc);
        };
        module3.exports = KeyPair;
      }, { "../utils": 98 }], 96: [function(require2, module3, exports3) {
        "use strict";
        var BN = require2("bn.js");
        var utils = require2("../utils");
        var assert = utils.assert;
        var cachedProperty = utils.cachedProperty;
        var parseBytes = utils.parseBytes;
        function Signature(eddsa, sig) {
          this.eddsa = eddsa;
          if (typeof sig !== "object")
            sig = parseBytes(sig);
          if (Array.isArray(sig)) {
            sig = {
              R: sig.slice(0, eddsa.encodingLength),
              S: sig.slice(eddsa.encodingLength)
            };
          }
          assert(sig.R && sig.S, "Signature without R or S");
          if (eddsa.isPoint(sig.R))
            this._R = sig.R;
          if (sig.S instanceof BN)
            this._S = sig.S;
          this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
          this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
        }
        cachedProperty(Signature, "S", function S() {
          return this.eddsa.decodeInt(this.Sencoded());
        });
        cachedProperty(Signature, "R", function R() {
          return this.eddsa.decodePoint(this.Rencoded());
        });
        cachedProperty(Signature, "Rencoded", function Rencoded() {
          return this.eddsa.encodePoint(this.R());
        });
        cachedProperty(Signature, "Sencoded", function Sencoded() {
          return this.eddsa.encodeInt(this.S());
        });
        Signature.prototype.toBytes = function toBytes() {
          return this.Rencoded().concat(this.Sencoded());
        };
        Signature.prototype.toHex = function toHex() {
          return utils.encode(this.toBytes(), "hex").toUpperCase();
        };
        module3.exports = Signature;
      }, { "../utils": 98, "bn.js": 99 }], 97: [function(require2, module3, exports3) {
        module3.exports = {
          doubles: {
            step: 4,
            points: [
              [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
              ],
              [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
              ],
              [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
              ],
              [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
              ],
              [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
              ],
              [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
              ],
              [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
              ],
              [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
              ],
              [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
              ],
              [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
              ],
              [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
              ],
              [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
              ],
              [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
              ],
              [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
              ],
              [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
              ],
              [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
              ],
              [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
              ],
              [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
              ],
              [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
              ],
              [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
              ],
              [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
              ],
              [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
              ],
              [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
              ],
              [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
              ],
              [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
              ],
              [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
              ],
              [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
              ],
              [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
              ],
              [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
              ],
              [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
              ],
              [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
              ],
              [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
              ],
              [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
              ],
              [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
              ],
              [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
              ],
              [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
              ],
              [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
              ],
              [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
              ],
              [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
              ],
              [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
              ],
              [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
              ],
              [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
              ],
              [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
              ],
              [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
              ],
              [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
              ],
              [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
              ],
              [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
              ],
              [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
              ],
              [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
              ],
              [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
              ],
              [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
              ],
              [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
              ],
              [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
              ],
              [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
              ],
              [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
              ],
              [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
              ],
              [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
              ],
              [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
              ],
              [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
              ],
              [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
              ],
              [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
              ],
              [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
              ],
              [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
              ],
              [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
              ],
              [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
              ]
            ]
          },
          naf: {
            wnd: 7,
            points: [
              [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
              ],
              [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
              ],
              [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
              ],
              [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
              ],
              [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
              ],
              [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
              ],
              [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
              ],
              [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
              ],
              [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
              ],
              [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
              ],
              [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
              ],
              [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
              ],
              [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
              ],
              [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
              ],
              [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
              ],
              [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
              ],
              [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
              ],
              [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
              ],
              [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
              ],
              [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
              ],
              [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
              ],
              [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
              ],
              [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
              ],
              [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
              ],
              [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
              ],
              [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
              ],
              [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
              ],
              [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
              ],
              [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
              ],
              [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
              ],
              [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
              ],
              [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
              ],
              [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
              ],
              [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
              ],
              [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
              ],
              [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
              ],
              [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
              ],
              [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
              ],
              [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
              ],
              [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
              ],
              [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
              ],
              [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
              ],
              [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
              ],
              [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
              ],
              [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
              ],
              [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
              ],
              [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
              ],
              [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
              ],
              [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
              ],
              [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
              ],
              [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
              ],
              [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
              ],
              [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
              ],
              [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
              ],
              [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
              ],
              [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
              ],
              [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
              ],
              [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
              ],
              [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
              ],
              [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
              ],
              [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
              ],
              [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
              ],
              [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
              ],
              [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
              ],
              [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
              ],
              [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
              ],
              [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
              ],
              [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
              ],
              [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
              ],
              [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
              ],
              [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
              ],
              [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
              ],
              [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
              ],
              [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
              ],
              [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
              ],
              [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
              ],
              [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
              ],
              [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
              ],
              [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
              ],
              [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
              ],
              [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
              ],
              [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
              ],
              [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
              ],
              [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
              ],
              [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
              ],
              [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
              ],
              [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
              ],
              [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
              ],
              [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
              ],
              [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
              ],
              [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
              ],
              [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
              ],
              [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
              ],
              [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
              ],
              [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
              ],
              [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
              ],
              [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
              ],
              [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
              ],
              [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
              ],
              [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
              ],
              [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
              ],
              [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
              ],
              [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
              ],
              [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
              ],
              [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
              ],
              [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
              ],
              [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
              ],
              [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
              ],
              [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
              ],
              [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
              ],
              [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
              ],
              [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
              ],
              [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
              ],
              [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
              ],
              [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
              ],
              [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
              ],
              [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
              ],
              [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
              ],
              [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
              ],
              [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
              ],
              [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
              ],
              [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
              ],
              [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
              ],
              [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
              ],
              [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
              ],
              [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
              ],
              [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
              ]
            ]
          }
        };
      }, {}], 98: [function(require2, module3, exports3) {
        "use strict";
        var utils = exports3;
        var BN = require2("bn.js");
        var minAssert = require2("minimalistic-assert");
        var minUtils = require2("minimalistic-crypto-utils");
        utils.assert = minAssert;
        utils.toArray = minUtils.toArray;
        utils.zero2 = minUtils.zero2;
        utils.toHex = minUtils.toHex;
        utils.encode = minUtils.encode;
        function getNAF(num, w, bits) {
          var naf = new Array(Math.max(num.bitLength(), bits) + 1);
          naf.fill(0);
          var ws = 1 << w + 1;
          var k = num.clone();
          for (var i = 0; i < naf.length; i++) {
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
              if (mod > (ws >> 1) - 1)
                z = (ws >> 1) - mod;
              else
                z = mod;
              k.isubn(z);
            } else {
              z = 0;
            }
            naf[i] = z;
            k.iushrn(1);
          }
          return naf;
        }
        utils.getNAF = getNAF;
        function getJSF(k1, k2) {
          var jsf = [
            [],
            []
          ];
          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          var m8;
          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
            var m14 = k1.andln(3) + d1 & 3;
            var m24 = k2.andln(3) + d2 & 3;
            if (m14 === 3)
              m14 = -1;
            if (m24 === 3)
              m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
              u1 = 0;
            } else {
              m8 = k1.andln(7) + d1 & 7;
              if ((m8 === 3 || m8 === 5) && m24 === 2)
                u1 = -m14;
              else
                u1 = m14;
            }
            jsf[0].push(u1);
            var u2;
            if ((m24 & 1) === 0) {
              u2 = 0;
            } else {
              m8 = k2.andln(7) + d2 & 7;
              if ((m8 === 3 || m8 === 5) && m14 === 2)
                u2 = -m24;
              else
                u2 = m24;
            }
            jsf[1].push(u2);
            if (2 * d1 === u1 + 1)
              d1 = 1 - d1;
            if (2 * d2 === u2 + 1)
              d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
          }
          return jsf;
        }
        utils.getJSF = getJSF;
        function cachedProperty(obj, name, computer) {
          var key = "_" + name;
          obj.prototype[name] = function cachedProperty2() {
            return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
          };
        }
        utils.cachedProperty = cachedProperty;
        function parseBytes(bytes) {
          return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
        }
        utils.parseBytes = parseBytes;
        function intFromLE(bytes) {
          return new BN(bytes, "hex", "le");
        }
        utils.intFromLE = intFromLE;
      }, { "bn.js": 99, "minimalistic-assert": 137, "minimalistic-crypto-utils": 138 }], 99: [function(require2, module3, exports3) {
        arguments[4][15][0].apply(exports3, arguments);
      }, { "buffer": 19, "dup": 15 }], 100: [function(require2, module3, exports3) {
        module3.exports = {
          "name": "elliptic",
          "version": "6.5.4",
          "description": "EC cryptography",
          "main": "lib/elliptic.js",
          "files": [
            "lib"
          ],
          "scripts": {
            "lint": "eslint lib test",
            "lint:fix": "npm run lint -- --fix",
            "unit": "istanbul test _mocha --reporter=spec test/index.js",
            "test": "npm run lint && npm run unit",
            "version": "grunt dist && git add dist/"
          },
          "repository": {
            "type": "git",
            "url": "git@github.com:indutny/elliptic"
          },
          "keywords": [
            "EC",
            "Elliptic",
            "curve",
            "Cryptography"
          ],
          "author": "Fedor Indutny <fedor@indutny.com>",
          "license": "MIT",
          "bugs": {
            "url": "https://github.com/indutny/elliptic/issues"
          },
          "homepage": "https://github.com/indutny/elliptic",
          "devDependencies": {
            "brfs": "^2.0.2",
            "coveralls": "^3.1.0",
            "eslint": "^7.6.0",
            "grunt": "^1.2.1",
            "grunt-browserify": "^5.3.0",
            "grunt-cli": "^1.3.2",
            "grunt-contrib-connect": "^3.0.0",
            "grunt-contrib-copy": "^1.0.0",
            "grunt-contrib-uglify": "^5.0.0",
            "grunt-mocha-istanbul": "^5.0.2",
            "grunt-saucelabs": "^9.0.1",
            "istanbul": "^0.4.5",
            "mocha": "^8.0.1"
          },
          "dependencies": {
            "bn.js": "^4.11.9",
            "brorand": "^1.1.0",
            "hash.js": "^1.0.0",
            "hmac-drbg": "^1.0.1",
            "inherits": "^2.0.4",
            "minimalistic-assert": "^1.0.1",
            "minimalistic-crypto-utils": "^1.0.1"
          }
        };
      }, {}], 101: [function(require2, module3, exports3) {
        "use strict";
        var R = typeof Reflect === "object" ? Reflect : null;
        var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
          return Function.prototype.apply.call(target, receiver, args);
        };
        var ReflectOwnKeys;
        if (R && typeof R.ownKeys === "function") {
          ReflectOwnKeys = R.ownKeys;
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
          };
        } else {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target);
          };
        }
        function ProcessEmitWarning(warning) {
          if (console && console.warn)
            console.warn(warning);
        }
        var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
          return value !== value;
        };
        function EventEmitter() {
          EventEmitter.init.call(this);
        }
        module3.exports = EventEmitter;
        module3.exports.once = once;
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = void 0;
        EventEmitter.prototype._eventsCount = 0;
        EventEmitter.prototype._maxListeners = void 0;
        var defaultMaxListeners = 10;
        function checkListener(listener) {
          if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
        }
        Object.defineProperty(EventEmitter, "defaultMaxListeners", {
          enumerable: true,
          get: function() {
            return defaultMaxListeners;
          },
          set: function(arg) {
            if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
            }
            defaultMaxListeners = arg;
          }
        });
        EventEmitter.init = function() {
          if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          }
          this._maxListeners = this._maxListeners || void 0;
        };
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
          if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
          }
          this._maxListeners = n;
          return this;
        };
        function _getMaxListeners(that) {
          if (that._maxListeners === void 0)
            return EventEmitter.defaultMaxListeners;
          return that._maxListeners;
        }
        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return _getMaxListeners(this);
        };
        EventEmitter.prototype.emit = function emit(type) {
          var args = [];
          for (var i = 1; i < arguments.length; i++)
            args.push(arguments[i]);
          var doError = type === "error";
          var events = this._events;
          if (events !== void 0)
            doError = doError && events.error === void 0;
          else if (!doError)
            return false;
          if (doError) {
            var er;
            if (args.length > 0)
              er = args[0];
            if (er instanceof Error) {
              throw er;
            }
            var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
            err.context = er;
            throw err;
          }
          var handler = events[type];
          if (handler === void 0)
            return false;
          if (typeof handler === "function") {
            ReflectApply(handler, this, args);
          } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i = 0; i < len; ++i)
              ReflectApply(listeners[i], this, args);
          }
          return true;
        };
        function _addListener(target, type, listener, prepend) {
          var m;
          var events;
          var existing;
          checkListener(listener);
          events = target._events;
          if (events === void 0) {
            events = target._events = /* @__PURE__ */ Object.create(null);
            target._eventsCount = 0;
          } else {
            if (events.newListener !== void 0) {
              target.emit("newListener", type, listener.listener ? listener.listener : listener);
              events = target._events;
            }
            existing = events[type];
          }
          if (existing === void 0) {
            existing = events[type] = listener;
            ++target._eventsCount;
          } else {
            if (typeof existing === "function") {
              existing = events[type] = prepend ? [listener, existing] : [existing, listener];
            } else if (prepend) {
              existing.unshift(listener);
            } else {
              existing.push(listener);
            }
            m = _getMaxListeners(target);
            if (m > 0 && existing.length > m && !existing.warned) {
              existing.warned = true;
              var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              w.name = "MaxListenersExceededWarning";
              w.emitter = target;
              w.type = type;
              w.count = existing.length;
              ProcessEmitWarning(w);
            }
          }
          return target;
        }
        EventEmitter.prototype.addListener = function addListener(type, listener) {
          return _addListener(this, type, listener, false);
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
        function onceWrapper() {
          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            if (arguments.length === 0)
              return this.listener.call(this.target);
            return this.listener.apply(this.target, arguments);
          }
        }
        function _onceWrap(target, type, listener) {
          var state = { fired: false, wrapFn: void 0, target, type, listener };
          var wrapped = onceWrapper.bind(state);
          wrapped.listener = listener;
          state.wrapFn = wrapped;
          return wrapped;
        }
        EventEmitter.prototype.once = function once2(type, listener) {
          checkListener(listener);
          this.on(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
          var list, events, position, i, originalListener;
          checkListener(listener);
          events = this._events;
          if (events === void 0)
            return this;
          list = events[type];
          if (list === void 0)
            return this;
          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit("removeListener", type, list.listener || listener);
            }
          } else if (typeof list !== "function") {
            position = -1;
            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }
            if (position < 0)
              return this;
            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }
            if (list.length === 1)
              events[type] = list[0];
            if (events.removeListener !== void 0)
              this.emit("removeListener", type, originalListener || listener);
          }
          return this;
        };
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
          var listeners, events, i;
          events = this._events;
          if (events === void 0)
            return this;
          if (events.removeListener === void 0) {
            if (arguments.length === 0) {
              this._events = /* @__PURE__ */ Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== void 0) {
              if (--this._eventsCount === 0)
                this._events = /* @__PURE__ */ Object.create(null);
              else
                delete events[type];
            }
            return this;
          }
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === "removeListener")
                continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners("removeListener");
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
            return this;
          }
          listeners = events[type];
          if (typeof listeners === "function") {
            this.removeListener(type, listeners);
          } else if (listeners !== void 0) {
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }
          return this;
        };
        function _listeners(target, type, unwrap) {
          var events = target._events;
          if (events === void 0)
            return [];
          var evlistener = events[type];
          if (evlistener === void 0)
            return [];
          if (typeof evlistener === "function")
            return unwrap ? [evlistener.listener || evlistener] : [evlistener];
          return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }
        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true);
        };
        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false);
        };
        EventEmitter.listenerCount = function(emitter, type) {
          if (typeof emitter.listenerCount === "function") {
            return emitter.listenerCount(type);
          } else {
            return listenerCount.call(emitter, type);
          }
        };
        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
          var events = this._events;
          if (events !== void 0) {
            var evlistener = events[type];
            if (typeof evlistener === "function") {
              return 1;
            } else if (evlistener !== void 0) {
              return evlistener.length;
            }
          }
          return 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
        };
        function arrayClone(arr, n) {
          var copy = new Array(n);
          for (var i = 0; i < n; ++i)
            copy[i] = arr[i];
          return copy;
        }
        function spliceOne(list, index) {
          for (; index + 1 < list.length; index++)
            list[index] = list[index + 1];
          list.pop();
        }
        function unwrapListeners(arr) {
          var ret = new Array(arr.length);
          for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i];
          }
          return ret;
        }
        function once(emitter, name) {
          return new Promise(function(resolve, reject) {
            function errorListener(err) {
              emitter.removeListener(name, resolver);
              reject(err);
            }
            function resolver() {
              if (typeof emitter.removeListener === "function") {
                emitter.removeListener("error", errorListener);
              }
              resolve([].slice.call(arguments));
            }
            ;
            eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
            if (name !== "error") {
              addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
            }
          });
        }
        function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
          if (typeof emitter.on === "function") {
            eventTargetAgnosticAddListener(emitter, "error", handler, flags);
          }
        }
        function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
          if (typeof emitter.on === "function") {
            if (flags.once) {
              emitter.once(name, listener);
            } else {
              emitter.on(name, listener);
            }
          } else if (typeof emitter.addEventListener === "function") {
            emitter.addEventListener(name, function wrapListener(arg) {
              if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
              }
              listener(arg);
            });
          } else {
            throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
          }
        }
      }, {}], 102: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var MD5 = require2("md5.js");
        function EVP_BytesToKey(password, salt, keyBits, ivLen) {
          if (!Buffer2.isBuffer(password))
            password = Buffer2.from(password, "binary");
          if (salt) {
            if (!Buffer2.isBuffer(salt))
              salt = Buffer2.from(salt, "binary");
            if (salt.length !== 8)
              throw new RangeError("salt should be Buffer with 8 byte length");
          }
          var keyLen = keyBits / 8;
          var key = Buffer2.alloc(keyLen);
          var iv = Buffer2.alloc(ivLen || 0);
          var tmp = Buffer2.alloc(0);
          while (keyLen > 0 || ivLen > 0) {
            var hash = new MD5();
            hash.update(tmp);
            hash.update(password);
            if (salt)
              hash.update(salt);
            tmp = hash.digest();
            var used = 0;
            if (keyLen > 0) {
              var keyStart = key.length - keyLen;
              used = Math.min(keyLen, tmp.length);
              tmp.copy(key, keyStart, 0, used);
              keyLen -= used;
            }
            if (used < tmp.length && ivLen > 0) {
              var ivStart = iv.length - ivLen;
              var length = Math.min(ivLen, tmp.length - used);
              tmp.copy(iv, ivStart, used, used + length);
              ivLen -= length;
            }
          }
          tmp.fill(0);
          return { key, iv };
        }
        module3.exports = EVP_BytesToKey;
      }, { "md5.js": 134, "safe-buffer": 188 }], 103: [function(require2, module3, exports3) {
        "use strict";
        var Buffer2 = require2("safe-buffer").Buffer;
        var Transform = require2("readable-stream").Transform;
        var inherits = require2("inherits");
        function throwIfNotStringOrBuffer(val, prefix) {
          if (!Buffer2.isBuffer(val) && typeof val !== "string") {
            throw new TypeError(prefix + " must be a string or a buffer");
          }
        }
        function HashBase(blockSize) {
          Transform.call(this);
          this._block = Buffer2.allocUnsafe(blockSize);
          this._blockSize = blockSize;
          this._blockOffset = 0;
          this._length = [0, 0, 0, 0];
          this._finalized = false;
        }
        inherits(HashBase, Transform);
        HashBase.prototype._transform = function(chunk, encoding, callback) {
          var error = null;
          try {
            this.update(chunk, encoding);
          } catch (err) {
            error = err;
          }
          callback(error);
        };
        HashBase.prototype._flush = function(callback) {
          var error = null;
          try {
            this.push(this.digest());
          } catch (err) {
            error = err;
          }
          callback(error);
        };
        HashBase.prototype.update = function(data, encoding) {
          throwIfNotStringOrBuffer(data, "Data");
          if (this._finalized)
            throw new Error("Digest already called");
          if (!Buffer2.isBuffer(data))
            data = Buffer2.from(data, encoding);
          var block = this._block;
          var offset = 0;
          while (this._blockOffset + data.length - offset >= this._blockSize) {
            for (var i = this._blockOffset; i < this._blockSize; )
              block[i++] = data[offset++];
            this._update();
            this._blockOffset = 0;
          }
          while (offset < data.length)
            block[this._blockOffset++] = data[offset++];
          for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
            this._length[j] += carry;
            carry = this._length[j] / 4294967296 | 0;
            if (carry > 0)
              this._length[j] -= 4294967296 * carry;
          }
          return this;
        };
        HashBase.prototype._update = function() {
          throw new Error("_update is not implemented");
        };
        HashBase.prototype.digest = function(encoding) {
          if (this._finalized)
            throw new Error("Digest already called");
          this._finalized = true;
          var digest = this._digest();
          if (encoding !== void 0)
            digest = digest.toString(encoding);
          this._block.fill(0);
          this._blockOffset = 0;
          for (var i = 0; i < 4; ++i)
            this._length[i] = 0;
          return digest;
        };
        HashBase.prototype._digest = function() {
          throw new Error("_digest is not implemented");
        };
        module3.exports = HashBase;
      }, { "inherits": 133, "readable-stream": 118, "safe-buffer": 188 }], 104: [function(require2, module3, exports3) {
        arguments[4][47][0].apply(exports3, arguments);
      }, { "dup": 47 }], 105: [function(require2, module3, exports3) {
        arguments[4][48][0].apply(exports3, arguments);
      }, { "./_stream_readable": 107, "./_stream_writable": 109, "_process": 151, "dup": 48, "inherits": 133 }], 106: [function(require2, module3, exports3) {
        arguments[4][49][0].apply(exports3, arguments);
      }, { "./_stream_transform": 108, "dup": 49, "inherits": 133 }], 107: [function(require2, module3, exports3) {
        arguments[4][50][0].apply(exports3, arguments);
      }, { "../errors": 104, "./_stream_duplex": 105, "./internal/streams/async_iterator": 110, "./internal/streams/buffer_list": 111, "./internal/streams/destroy": 112, "./internal/streams/from": 114, "./internal/streams/state": 116, "./internal/streams/stream": 117, "_process": 151, "buffer": 63, "dup": 50, "events": 101, "inherits": 133, "string_decoder/": 213, "util": 19 }], 108: [function(require2, module3, exports3) {
        arguments[4][51][0].apply(exports3, arguments);
      }, { "../errors": 104, "./_stream_duplex": 105, "dup": 51, "inherits": 133 }], 109: [function(require2, module3, exports3) {
        arguments[4][52][0].apply(exports3, arguments);
      }, { "../errors": 104, "./_stream_duplex": 105, "./internal/streams/destroy": 112, "./internal/streams/state": 116, "./internal/streams/stream": 117, "_process": 151, "buffer": 63, "dup": 52, "inherits": 133, "util-deprecate": 214 }], 110: [function(require2, module3, exports3) {
        arguments[4][53][0].apply(exports3, arguments);
      }, { "./end-of-stream": 113, "_process": 151, "dup": 53 }], 111: [function(require2, module3, exports3) {
        arguments[4][54][0].apply(exports3, arguments);
      }, { "buffer": 63, "dup": 54, "util": 19 }], 112: [function(require2, module3, exports3) {
        arguments[4][55][0].apply(exports3, arguments);
      }, { "_process": 151, "dup": 55 }], 113: [function(require2, module3, exports3) {
        arguments[4][56][0].apply(exports3, arguments);
      }, { "../../../errors": 104, "dup": 56 }], 114: [function(require2, module3, exports3) {
        arguments[4][57][0].apply(exports3, arguments);
      }, { "dup": 57 }], 115: [function(require2, module3, exports3) {
        arguments[4][58][0].apply(exports3, arguments);
      }, { "../../../errors": 104, "./end-of-stream": 113, "dup": 58 }], 116: [function(require2, module3, exports3) {
        arguments[4][59][0].apply(exports3, arguments);
      }, { "../../../errors": 104, "dup": 59 }], 117: [function(require2, module3, exports3) {
        arguments[4][60][0].apply(exports3, arguments);
      }, { "dup": 60, "events": 101 }], 118: [function(require2, module3, exports3) {
        arguments[4][61][0].apply(exports3, arguments);
      }, { "./lib/_stream_duplex.js": 105, "./lib/_stream_passthrough.js": 106, "./lib/_stream_readable.js": 107, "./lib/_stream_transform.js": 108, "./lib/_stream_writable.js": 109, "./lib/internal/streams/end-of-stream.js": 113, "./lib/internal/streams/pipeline.js": 115, "dup": 61 }], 119: [function(require2, module3, exports3) {
        var hash = exports3;
        hash.utils = require2("./hash/utils");
        hash.common = require2("./hash/common");
        hash.sha = require2("./hash/sha");
        hash.ripemd = require2("./hash/ripemd");
        hash.hmac = require2("./hash/hmac");
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;
      }, { "./hash/common": 120, "./hash/hmac": 121, "./hash/ripemd": 122, "./hash/sha": 123, "./hash/utils": 130 }], 120: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("./utils");
        var assert = require2("minimalistic-assert");
        function BlockHash() {
          this.pending = null;
          this.pendingTotal = 0;
          this.blockSize = this.constructor.blockSize;
          this.outSize = this.constructor.outSize;
          this.hmacStrength = this.constructor.hmacStrength;
          this.padLength = this.constructor.padLength / 8;
          this.endian = "big";
          this._delta8 = this.blockSize / 8;
          this._delta32 = this.blockSize / 32;
        }
        exports3.BlockHash = BlockHash;
        BlockHash.prototype.update = function update(msg, enc) {
          msg = utils.toArray(msg, enc);
          if (!this.pending)
            this.pending = msg;
          else
            this.pending = this.pending.concat(msg);
          this.pendingTotal += msg.length;
          if (this.pending.length >= this._delta8) {
            msg = this.pending;
            var r = msg.length % this._delta8;
            this.pending = msg.slice(msg.length - r, msg.length);
            if (this.pending.length === 0)
              this.pending = null;
            msg = utils.join32(msg, 0, msg.length - r, this.endian);
            for (var i = 0; i < msg.length; i += this._delta32)
              this._update(msg, i, i + this._delta32);
          }
          return this;
        };
        BlockHash.prototype.digest = function digest(enc) {
          this.update(this._pad());
          assert(this.pending === null);
          return this._digest(enc);
        };
        BlockHash.prototype._pad = function pad() {
          var len = this.pendingTotal;
          var bytes = this._delta8;
          var k = bytes - (len + this.padLength) % bytes;
          var res = new Array(k + this.padLength);
          res[0] = 128;
          for (var i = 1; i < k; i++)
            res[i] = 0;
          len <<= 3;
          if (this.endian === "big") {
            for (var t = 8; t < this.padLength; t++)
              res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = len >>> 24 & 255;
            res[i++] = len >>> 16 & 255;
            res[i++] = len >>> 8 & 255;
            res[i++] = len & 255;
          } else {
            res[i++] = len & 255;
            res[i++] = len >>> 8 & 255;
            res[i++] = len >>> 16 & 255;
            res[i++] = len >>> 24 & 255;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            for (t = 8; t < this.padLength; t++)
              res[i++] = 0;
          }
          return res;
        };
      }, { "./utils": 130, "minimalistic-assert": 137 }], 121: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("./utils");
        var assert = require2("minimalistic-assert");
        function Hmac(hash, key, enc) {
          if (!(this instanceof Hmac))
            return new Hmac(hash, key, enc);
          this.Hash = hash;
          this.blockSize = hash.blockSize / 8;
          this.outSize = hash.outSize / 8;
          this.inner = null;
          this.outer = null;
          this._init(utils.toArray(key, enc));
        }
        module3.exports = Hmac;
        Hmac.prototype._init = function init(key) {
          if (key.length > this.blockSize)
            key = new this.Hash().update(key).digest();
          assert(key.length <= this.blockSize);
          for (var i = key.length; i < this.blockSize; i++)
            key.push(0);
          for (i = 0; i < key.length; i++)
            key[i] ^= 54;
          this.inner = new this.Hash().update(key);
          for (i = 0; i < key.length; i++)
            key[i] ^= 106;
          this.outer = new this.Hash().update(key);
        };
        Hmac.prototype.update = function update(msg, enc) {
          this.inner.update(msg, enc);
          return this;
        };
        Hmac.prototype.digest = function digest(enc) {
          this.outer.update(this.inner.digest());
          return this.outer.digest(enc);
        };
      }, { "./utils": 130, "minimalistic-assert": 137 }], 122: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("./utils");
        var common = require2("./common");
        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_3 = utils.sum32_3;
        var sum32_4 = utils.sum32_4;
        var BlockHash = common.BlockHash;
        function RIPEMD160() {
          if (!(this instanceof RIPEMD160))
            return new RIPEMD160();
          BlockHash.call(this);
          this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
          this.endian = "little";
        }
        utils.inherits(RIPEMD160, BlockHash);
        exports3.ripemd160 = RIPEMD160;
        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;
        RIPEMD160.prototype._update = function update(msg, start) {
          var A = this.h[0];
          var B = this.h[1];
          var C = this.h[2];
          var D = this.h[3];
          var E = this.h[4];
          var Ah = A;
          var Bh = B;
          var Ch = C;
          var Dh = D;
          var Eh = E;
          for (var j = 0; j < 80; j++) {
            var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
            A = E;
            E = D;
            D = rotl32(C, 10);
            C = B;
            B = T;
            T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
            Ah = Eh;
            Eh = Dh;
            Dh = rotl32(Ch, 10);
            Ch = Bh;
            Bh = T;
          }
          T = sum32_3(this.h[1], C, Dh);
          this.h[1] = sum32_3(this.h[2], D, Eh);
          this.h[2] = sum32_3(this.h[3], E, Ah);
          this.h[3] = sum32_3(this.h[4], A, Bh);
          this.h[4] = sum32_3(this.h[0], B, Ch);
          this.h[0] = T;
        };
        RIPEMD160.prototype._digest = function digest(enc) {
          if (enc === "hex")
            return utils.toHex32(this.h, "little");
          else
            return utils.split32(this.h, "little");
        };
        function f(j, x, y, z) {
          if (j <= 15)
            return x ^ y ^ z;
          else if (j <= 31)
            return x & y | ~x & z;
          else if (j <= 47)
            return (x | ~y) ^ z;
          else if (j <= 63)
            return x & z | y & ~z;
          else
            return x ^ (y | ~z);
        }
        function K(j) {
          if (j <= 15)
            return 0;
          else if (j <= 31)
            return 1518500249;
          else if (j <= 47)
            return 1859775393;
          else if (j <= 63)
            return 2400959708;
          else
            return 2840853838;
        }
        function Kh(j) {
          if (j <= 15)
            return 1352829926;
          else if (j <= 31)
            return 1548603684;
          else if (j <= 47)
            return 1836072691;
          else if (j <= 63)
            return 2053994217;
          else
            return 0;
        }
        var r = [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ];
        var rh = [
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ];
        var s = [
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ];
        var sh = [
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ];
      }, { "./common": 120, "./utils": 130 }], 123: [function(require2, module3, exports3) {
        "use strict";
        exports3.sha1 = require2("./sha/1");
        exports3.sha224 = require2("./sha/224");
        exports3.sha256 = require2("./sha/256");
        exports3.sha384 = require2("./sha/384");
        exports3.sha512 = require2("./sha/512");
      }, { "./sha/1": 124, "./sha/224": 125, "./sha/256": 126, "./sha/384": 127, "./sha/512": 128 }], 124: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var common = require2("../common");
        var shaCommon = require2("./common");
        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_5 = utils.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash = common.BlockHash;
        var sha1_K = [
          1518500249,
          1859775393,
          2400959708,
          3395469782
        ];
        function SHA1() {
          if (!(this instanceof SHA1))
            return new SHA1();
          BlockHash.call(this);
          this.h = [
            1732584193,
            4023233417,
            2562383102,
            271733878,
            3285377520
          ];
          this.W = new Array(80);
        }
        utils.inherits(SHA1, BlockHash);
        module3.exports = SHA1;
        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;
        SHA1.prototype._update = function _update(msg, start) {
          var W = this.W;
          for (var i = 0; i < 16; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i++)
            W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];
          for (i = 0; i < W.length; i++) {
            var s = ~~(i / 20);
            var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
            e = d;
            d = c;
            c = rotl32(b, 30);
            b = a;
            a = t;
          }
          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
        };
        SHA1.prototype._digest = function digest(enc) {
          if (enc === "hex")
            return utils.toHex32(this.h, "big");
          else
            return utils.split32(this.h, "big");
        };
      }, { "../common": 120, "../utils": 130, "./common": 129 }], 125: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var SHA256 = require2("./256");
        function SHA224() {
          if (!(this instanceof SHA224))
            return new SHA224();
          SHA256.call(this);
          this.h = [
            3238371032,
            914150663,
            812702999,
            4144912697,
            4290775857,
            1750603025,
            1694076839,
            3204075428
          ];
        }
        utils.inherits(SHA224, SHA256);
        module3.exports = SHA224;
        SHA224.blockSize = 512;
        SHA224.outSize = 224;
        SHA224.hmacStrength = 192;
        SHA224.padLength = 64;
        SHA224.prototype._digest = function digest(enc) {
          if (enc === "hex")
            return utils.toHex32(this.h.slice(0, 7), "big");
          else
            return utils.split32(this.h.slice(0, 7), "big");
        };
      }, { "../utils": 130, "./256": 126 }], 126: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var common = require2("../common");
        var shaCommon = require2("./common");
        var assert = require2("minimalistic-assert");
        var sum32 = utils.sum32;
        var sum32_4 = utils.sum32_4;
        var sum32_5 = utils.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;
        var BlockHash = common.BlockHash;
        var sha256_K = [
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ];
        function SHA256() {
          if (!(this instanceof SHA256))
            return new SHA256();
          BlockHash.call(this);
          this.h = [
            1779033703,
            3144134277,
            1013904242,
            2773480762,
            1359893119,
            2600822924,
            528734635,
            1541459225
          ];
          this.k = sha256_K;
          this.W = new Array(64);
        }
        utils.inherits(SHA256, BlockHash);
        module3.exports = SHA256;
        SHA256.blockSize = 512;
        SHA256.outSize = 256;
        SHA256.hmacStrength = 192;
        SHA256.padLength = 64;
        SHA256.prototype._update = function _update(msg, start) {
          var W = this.W;
          for (var i = 0; i < 16; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i++)
            W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];
          var f = this.h[5];
          var g = this.h[6];
          var h = this.h[7];
          assert(this.k.length === W.length);
          for (i = 0; i < W.length; i++) {
            var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
            var T2 = sum32(s0_256(a), maj32(a, b, c));
            h = g;
            g = f;
            f = e;
            e = sum32(d, T1);
            d = c;
            c = b;
            b = a;
            a = sum32(T1, T2);
          }
          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
          this.h[5] = sum32(this.h[5], f);
          this.h[6] = sum32(this.h[6], g);
          this.h[7] = sum32(this.h[7], h);
        };
        SHA256.prototype._digest = function digest(enc) {
          if (enc === "hex")
            return utils.toHex32(this.h, "big");
          else
            return utils.split32(this.h, "big");
        };
      }, { "../common": 120, "../utils": 130, "./common": 129, "minimalistic-assert": 137 }], 127: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var SHA512 = require2("./512");
        function SHA384() {
          if (!(this instanceof SHA384))
            return new SHA384();
          SHA512.call(this);
          this.h = [
            3418070365,
            3238371032,
            1654270250,
            914150663,
            2438529370,
            812702999,
            355462360,
            4144912697,
            1731405415,
            4290775857,
            2394180231,
            1750603025,
            3675008525,
            1694076839,
            1203062813,
            3204075428
          ];
        }
        utils.inherits(SHA384, SHA512);
        module3.exports = SHA384;
        SHA384.blockSize = 1024;
        SHA384.outSize = 384;
        SHA384.hmacStrength = 192;
        SHA384.padLength = 128;
        SHA384.prototype._digest = function digest(enc) {
          if (enc === "hex")
            return utils.toHex32(this.h.slice(0, 12), "big");
          else
            return utils.split32(this.h.slice(0, 12), "big");
        };
      }, { "../utils": 130, "./512": 128 }], 128: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var common = require2("../common");
        var assert = require2("minimalistic-assert");
        var rotr64_hi = utils.rotr64_hi;
        var rotr64_lo = utils.rotr64_lo;
        var shr64_hi = utils.shr64_hi;
        var shr64_lo = utils.shr64_lo;
        var sum64 = utils.sum64;
        var sum64_hi = utils.sum64_hi;
        var sum64_lo = utils.sum64_lo;
        var sum64_4_hi = utils.sum64_4_hi;
        var sum64_4_lo = utils.sum64_4_lo;
        var sum64_5_hi = utils.sum64_5_hi;
        var sum64_5_lo = utils.sum64_5_lo;
        var BlockHash = common.BlockHash;
        var sha512_K = [
          1116352408,
          3609767458,
          1899447441,
          602891725,
          3049323471,
          3964484399,
          3921009573,
          2173295548,
          961987163,
          4081628472,
          1508970993,
          3053834265,
          2453635748,
          2937671579,
          2870763221,
          3664609560,
          3624381080,
          2734883394,
          310598401,
          1164996542,
          607225278,
          1323610764,
          1426881987,
          3590304994,
          1925078388,
          4068182383,
          2162078206,
          991336113,
          2614888103,
          633803317,
          3248222580,
          3479774868,
          3835390401,
          2666613458,
          4022224774,
          944711139,
          264347078,
          2341262773,
          604807628,
          2007800933,
          770255983,
          1495990901,
          1249150122,
          1856431235,
          1555081692,
          3175218132,
          1996064986,
          2198950837,
          2554220882,
          3999719339,
          2821834349,
          766784016,
          2952996808,
          2566594879,
          3210313671,
          3203337956,
          3336571891,
          1034457026,
          3584528711,
          2466948901,
          113926993,
          3758326383,
          338241895,
          168717936,
          666307205,
          1188179964,
          773529912,
          1546045734,
          1294757372,
          1522805485,
          1396182291,
          2643833823,
          1695183700,
          2343527390,
          1986661051,
          1014477480,
          2177026350,
          1206759142,
          2456956037,
          344077627,
          2730485921,
          1290863460,
          2820302411,
          3158454273,
          3259730800,
          3505952657,
          3345764771,
          106217008,
          3516065817,
          3606008344,
          3600352804,
          1432725776,
          4094571909,
          1467031594,
          275423344,
          851169720,
          430227734,
          3100823752,
          506948616,
          1363258195,
          659060556,
          3750685593,
          883997877,
          3785050280,
          958139571,
          3318307427,
          1322822218,
          3812723403,
          1537002063,
          2003034995,
          1747873779,
          3602036899,
          1955562222,
          1575990012,
          2024104815,
          1125592928,
          2227730452,
          2716904306,
          2361852424,
          442776044,
          2428436474,
          593698344,
          2756734187,
          3733110249,
          3204031479,
          2999351573,
          3329325298,
          3815920427,
          3391569614,
          3928383900,
          3515267271,
          566280711,
          3940187606,
          3454069534,
          4118630271,
          4000239992,
          116418474,
          1914138554,
          174292421,
          2731055270,
          289380356,
          3203993006,
          460393269,
          320620315,
          685471733,
          587496836,
          852142971,
          1086792851,
          1017036298,
          365543100,
          1126000580,
          2618297676,
          1288033470,
          3409855158,
          1501505948,
          4234509866,
          1607167915,
          987167468,
          1816402316,
          1246189591
        ];
        function SHA512() {
          if (!(this instanceof SHA512))
            return new SHA512();
          BlockHash.call(this);
          this.h = [
            1779033703,
            4089235720,
            3144134277,
            2227873595,
            1013904242,
            4271175723,
            2773480762,
            1595750129,
            1359893119,
            2917565137,
            2600822924,
            725511199,
            528734635,
            4215389547,
            1541459225,
            327033209
          ];
          this.k = sha512_K;
          this.W = new Array(160);
        }
        utils.inherits(SHA512, BlockHash);
        module3.exports = SHA512;
        SHA512.blockSize = 1024;
        SHA512.outSize = 512;
        SHA512.hmacStrength = 192;
        SHA512.padLength = 128;
        SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
          var W = this.W;
          for (var i = 0; i < 32; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i += 2) {
            var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
            var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
            var c1_hi = W[i - 14];
            var c1_lo = W[i - 13];
            var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
            var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
            var c3_hi = W[i - 32];
            var c3_lo = W[i - 31];
            W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
            W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
          }
        };
        SHA512.prototype._update = function _update(msg, start) {
          this._prepareBlock(msg, start);
          var W = this.W;
          var ah = this.h[0];
          var al = this.h[1];
          var bh = this.h[2];
          var bl = this.h[3];
          var ch = this.h[4];
          var cl = this.h[5];
          var dh = this.h[6];
          var dl = this.h[7];
          var eh = this.h[8];
          var el = this.h[9];
          var fh = this.h[10];
          var fl = this.h[11];
          var gh = this.h[12];
          var gl = this.h[13];
          var hh = this.h[14];
          var hl = this.h[15];
          assert(this.k.length === W.length);
          for (var i = 0; i < W.length; i += 2) {
            var c0_hi = hh;
            var c0_lo = hl;
            var c1_hi = s1_512_hi(eh, el);
            var c1_lo = s1_512_lo(eh, el);
            var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
            var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
            var c3_hi = this.k[i];
            var c3_lo = this.k[i + 1];
            var c4_hi = W[i];
            var c4_lo = W[i + 1];
            var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
            var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
            c0_hi = s0_512_hi(ah, al);
            c0_lo = s0_512_lo(ah, al);
            c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
            c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
            var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
            var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            eh = sum64_hi(dh, dl, T1_hi, T1_lo);
            el = sum64_lo(dl, dl, T1_hi, T1_lo);
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
            al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
          }
          sum64(this.h, 0, ah, al);
          sum64(this.h, 2, bh, bl);
          sum64(this.h, 4, ch, cl);
          sum64(this.h, 6, dh, dl);
          sum64(this.h, 8, eh, el);
          sum64(this.h, 10, fh, fl);
          sum64(this.h, 12, gh, gl);
          sum64(this.h, 14, hh, hl);
        };
        SHA512.prototype._digest = function digest(enc) {
          if (enc === "hex")
            return utils.toHex32(this.h, "big");
          else
            return utils.split32(this.h, "big");
        };
        function ch64_hi(xh, xl, yh, yl, zh) {
          var r = xh & yh ^ ~xh & zh;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function ch64_lo(xh, xl, yh, yl, zh, zl) {
          var r = xl & yl ^ ~xl & zl;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function maj64_hi(xh, xl, yh, yl, zh) {
          var r = xh & yh ^ xh & zh ^ yh & zh;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function maj64_lo(xh, xl, yh, yl, zh, zl) {
          var r = xl & yl ^ xl & zl ^ yl & zl;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function s0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 28);
          var c1_hi = rotr64_hi(xl, xh, 2);
          var c2_hi = rotr64_hi(xl, xh, 7);
          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function s0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 28);
          var c1_lo = rotr64_lo(xl, xh, 2);
          var c2_lo = rotr64_lo(xl, xh, 7);
          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function s1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 14);
          var c1_hi = rotr64_hi(xh, xl, 18);
          var c2_hi = rotr64_hi(xl, xh, 9);
          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function s1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 14);
          var c1_lo = rotr64_lo(xh, xl, 18);
          var c2_lo = rotr64_lo(xl, xh, 9);
          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function g0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 1);
          var c1_hi = rotr64_hi(xh, xl, 8);
          var c2_hi = shr64_hi(xh, xl, 7);
          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function g0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 1);
          var c1_lo = rotr64_lo(xh, xl, 8);
          var c2_lo = shr64_lo(xh, xl, 7);
          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function g1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 19);
          var c1_hi = rotr64_hi(xl, xh, 29);
          var c2_hi = shr64_hi(xh, xl, 6);
          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 4294967296;
          return r;
        }
        function g1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 19);
          var c1_lo = rotr64_lo(xl, xh, 29);
          var c2_lo = shr64_lo(xh, xl, 6);
          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 4294967296;
          return r;
        }
      }, { "../common": 120, "../utils": 130, "minimalistic-assert": 137 }], 129: [function(require2, module3, exports3) {
        "use strict";
        var utils = require2("../utils");
        var rotr32 = utils.rotr32;
        function ft_1(s, x, y, z) {
          if (s === 0)
            return ch32(x, y, z);
          if (s === 1 || s === 3)
            return p32(x, y, z);
          if (s === 2)
            return maj32(x, y, z);
        }
        exports3.ft_1 = ft_1;
        function ch32(x, y, z) {
          return x & y ^ ~x & z;
        }
        exports3.ch32 = ch32;
        function maj32(x, y, z) {
          return x & y ^ x & z ^ y & z;
        }
        exports3.maj32 = maj32;
        function p32(x, y, z) {
          return x ^ y ^ z;
        }
        exports3.p32 = p32;
        function s0_256(x) {
          return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }
        exports3.s0_256 = s0_256;
        function s1_256(x) {
          return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }
        exports3.s1_256 = s1_256;
        function g0_256(x) {
          return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
        }
        exports3.g0_256 = g0_256;
        function g1_256(x) {
          return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
        }
        exports3.g1_256 = g1_256;
      }, { "../utils": 130 }], 130: [function(require2, module3, exports3) {
        "use strict";
        var assert = require2("minimalistic-assert");
        var inherits = require2("inherits");
        exports3.inherits = inherits;
        function isSurrogatePair(msg, i) {
          if ((msg.charCodeAt(i) & 64512) !== 55296) {
            return false;
          }
          if (i < 0 || i + 1 >= msg.length) {
            return false;
          }
          return (msg.charCodeAt(i + 1) & 64512) === 56320;
        }
        function toArray(msg, enc) {
          if (Array.isArray(msg))
            return msg.slice();
          if (!msg)
            return [];
          var res = [];
          if (typeof msg === "string") {
            if (!enc) {
              var p = 0;
              for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                if (c < 128) {
                  res[p++] = c;
                } else if (c < 2048) {
                  res[p++] = c >> 6 | 192;
                  res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                  c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                  res[p++] = c >> 18 | 240;
                  res[p++] = c >> 12 & 63 | 128;
                  res[p++] = c >> 6 & 63 | 128;
                  res[p++] = c & 63 | 128;
                } else {
                  res[p++] = c >> 12 | 224;
                  res[p++] = c >> 6 & 63 | 128;
                  res[p++] = c & 63 | 128;
                }
              }
            } else if (enc === "hex") {
              msg = msg.replace(/[^a-z0-9]+/ig, "");
              if (msg.length % 2 !== 0)
                msg = "0" + msg;
              for (i = 0; i < msg.length; i += 2)
                res.push(parseInt(msg[i] + msg[i + 1], 16));
            }
          } else {
            for (i = 0; i < msg.length; i++)
              res[i] = msg[i] | 0;
          }
          return res;
        }
        exports3.toArray = toArray;
        function toHex(msg) {
          var res = "";
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        exports3.toHex = toHex;
        function htonl(w) {
          var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
          return res >>> 0;
        }
        exports3.htonl = htonl;
        function toHex32(msg, endian) {
          var res = "";
          for (var i = 0; i < msg.length; i++) {
            var w = msg[i];
            if (endian === "little")
              w = htonl(w);
            res += zero8(w.toString(16));
          }
          return res;
        }
        exports3.toHex32 = toHex32;
        function zero2(word) {
          if (word.length === 1)
            return "0" + word;
          else
            return word;
        }
        exports3.zero2 = zero2;
        function zero8(word) {
          if (word.length === 7)
            return "0" + word;
          else if (word.length === 6)
            return "00" + word;
          else if (word.length === 5)
            return "000" + word;
          else if (word.length === 4)
            return "0000" + word;
          else if (word.length === 3)
            return "00000" + word;
          else if (word.length === 2)
            return "000000" + word;
          else if (word.length === 1)
            return "0000000" + word;
          else
            return word;
        }
        exports3.zero8 = zero8;
        function join32(msg, start, end, endian) {
          var len = end - start;
          assert(len % 4 === 0);
          var res = new Array(len / 4);
          for (var i = 0, k = start; i < res.length; i++, k += 4) {
            var w;
            if (endian === "big")
              w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
            else
              w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
            res[i] = w >>> 0;
          }
          return res;
        }
        exports3.join32 = join32;
        function split32(msg, endian) {
          var res = new Array(msg.length * 4);
          for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
            var m = msg[i];
            if (endian === "big") {
              res[k] = m >>> 24;
              res[k + 1] = m >>> 16 & 255;
              res[k + 2] = m >>> 8 & 255;
              res[k + 3] = m & 255;
            } else {
              res[k + 3] = m >>> 24;
              res[k + 2] = m >>> 16 & 255;
              res[k + 1] = m >>> 8 & 255;
              res[k] = m & 255;
            }
          }
          return res;
        }
        exports3.split32 = split32;
        function rotr32(w, b) {
          return w >>> b | w << 32 - b;
        }
        exports3.rotr32 = rotr32;
        function rotl32(w, b) {
          return w << b | w >>> 32 - b;
        }
        exports3.rotl32 = rotl32;
        function sum32(a, b) {
          return a + b >>> 0;
        }
        exports3.sum32 = sum32;
        function sum32_3(a, b, c) {
          return a + b + c >>> 0;
        }
        exports3.sum32_3 = sum32_3;
        function sum32_4(a, b, c, d) {
          return a + b + c + d >>> 0;
        }
        exports3.sum32_4 = sum32_4;
        function sum32_5(a, b, c, d, e) {
          return a + b + c + d + e >>> 0;
        }
        exports3.sum32_5 = sum32_5;
        function sum64(buf, pos, ah, al) {
          var bh = buf[pos];
          var bl = buf[pos + 1];
          var lo = al + bl >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          buf[pos] = hi >>> 0;
          buf[pos + 1] = lo;
        }
        exports3.sum64 = sum64;
        function sum64_hi(ah, al, bh, bl) {
          var lo = al + bl >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          return hi >>> 0;
        }
        exports3.sum64_hi = sum64_hi;
        function sum64_lo(ah, al, bh, bl) {
          var lo = al + bl;
          return lo >>> 0;
        }
        exports3.sum64_lo = sum64_lo;
        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
          var carry = 0;
          var lo = al;
          lo = lo + bl >>> 0;
          carry += lo < al ? 1 : 0;
          lo = lo + cl >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = lo + dl >>> 0;
          carry += lo < dl ? 1 : 0;
          var hi = ah + bh + ch + dh + carry;
          return hi >>> 0;
        }
        exports3.sum64_4_hi = sum64_4_hi;
        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
          var lo = al + bl + cl + dl;
          return lo >>> 0;
        }
        exports3.sum64_4_lo = sum64_4_lo;
        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var carry = 0;
          var lo = al;
          lo = lo + bl >>> 0;
          carry += lo < al ? 1 : 0;
          lo = lo + cl >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = lo + dl >>> 0;
          carry += lo < dl ? 1 : 0;
          lo = lo + el >>> 0;
          carry += lo < el ? 1 : 0;
          var hi = ah + bh + ch + dh + eh + carry;
          return hi >>> 0;
        }
        exports3.sum64_5_hi = sum64_5_hi;
        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var lo = al + bl + cl + dl + el;
          return lo >>> 0;
        }
        exports3.sum64_5_lo = sum64_5_lo;
        function rotr64_hi(ah, al, num) {
          var r = al << 32 - num | ah >>> num;
          return r >>> 0;
        }
        exports3.rotr64_hi = rotr64_hi;
        function rotr64_lo(ah, al, num) {
          var r = ah << 32 - num | al >>> num;
          return r >>> 0;
        }
        exports3.rotr64_lo = rotr64_lo;
        function shr64_hi(ah, al, num) {
          return ah >>> num;
        }
        exports3.shr64_hi = shr64_hi;
        function shr64_lo(ah, al, num) {
          var r = ah << 32 - num | al >>> num;
          return r >>> 0;
        }
        exports3.shr64_lo = shr64_lo;
      }, { "inherits": 133, "minimalistic-assert": 137 }], 131: [function(require2, module3, exports3) {
        "use strict";
        var hash = require2("hash.js");
        var utils = require2("minimalistic-crypto-utils");
        var assert = require2("minimalistic-assert");
        function HmacDRBG(options) {
          if (!(this instanceof HmacDRBG))
            return new HmacDRBG(options);
          this.hash = options.hash;
          this.predResist = !!options.predResist;
          this.outLen = this.hash.outSize;
          this.minEntropy = options.minEntropy || this.hash.hmacStrength;
          this._reseed = null;
          this.reseedInterval = null;
          this.K = null;
          this.V = null;
          var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
          var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
          var pers = utils.toArray(options.pers, options.persEnc || "hex");
          assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
          this._init(entropy, nonce, pers);
        }
        module3.exports = HmacDRBG;
        HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
          var seed = entropy.concat(nonce).concat(pers);
          this.K = new Array(this.outLen / 8);
          this.V = new Array(this.outLen / 8);
          for (var i = 0; i < this.V.length; i++) {
            this.K[i] = 0;
            this.V[i] = 1;
          }
          this._update(seed);
          this._reseed = 1;
          this.reseedInterval = 281474976710656;
        };
        HmacDRBG.prototype._hmac = function hmac() {
          return new hash.hmac(this.hash, this.K);
        };
        HmacDRBG.prototype._update = function update(seed) {
          var kmac = this._hmac().update(this.V).update([0]);
          if (seed)
            kmac = kmac.update(seed);
          this.K = kmac.digest();
          this.V = this._hmac().update(this.V).digest();
          if (!seed)
            return;
          this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
          this.V = this._hmac().update(this.V).digest();
        };
        HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
          if (typeof entropyEnc !== "string") {
            addEnc = add;
            add = entropyEnc;
            entropyEnc = null;
          }
          entropy = utils.toArray(entropy, entropyEnc);
          add = utils.toArray(add, addEnc);
          assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
          this._update(entropy.concat(add || []));
          this._reseed = 1;
        };
        HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
          if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");
          if (typeof enc !== "string") {
            addEnc = add;
            add = enc;
            enc = null;
          }
          if (add) {
            add = utils.toArray(add, addEnc || "hex");
            this._update(add);
          }
          var temp = [];
          while (temp.length < len) {
            this.V = this._hmac().update(this.V).digest();
            temp = temp.concat(this.V);
          }
          var res = temp.slice(0, len);
          this._update(add);
          this._reseed++;
          return utils.encode(res, enc);
        };
      }, { "hash.js": 119, "minimalistic-assert": 137, "minimalistic-crypto-utils": 138 }], 132: [function(require2, module3, exports3) {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports3.read = function(buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];
          i += d;
          e = s & (1 << -nBits) - 1;
          s >>= -nBits;
          nBits += eLen;
          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
          }
          m = e & (1 << -nBits) - 1;
          e >>= -nBits;
          nBits += mLen;
          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
          }
          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };
        exports3.write = function(buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
          value = Math.abs(value);
          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }
            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }
          for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
          }
          e = e << mLen | m;
          eLen += mLen;
          for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
          }
          buffer[offset + i - d] |= s * 128;
        };
      }, {}], 133: [function(require2, module3, exports3) {
        if (typeof Object.create === "function") {
          module3.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }
          };
        } else {
          module3.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      }, {}], 134: [function(require2, module3, exports3) {
        "use strict";
        var inherits = require2("inherits");
        var HashBase = require2("hash-base");
        var Buffer2 = require2("safe-buffer").Buffer;
        var ARRAY16 = new Array(16);
        function MD5() {
          HashBase.call(this, 64);
          this._a = 1732584193;
          this._b = 4023233417;
          this._c = 2562383102;
          this._d = 271733878;
        }
        inherits(MD5, HashBase);
        MD5.prototype._update = function() {
          var M = ARRAY16;
          for (var i = 0; i < 16; ++i)
            M[i] = this._block.readInt32LE(i * 4);
          var a = this._a;
          var b = this._b;
          var c = this._c;
          var d = this._d;
          a = fnF(a, b, c, d, M[0], 3614090360, 7);
          d = fnF(d, a, b, c, M[1], 3905402710, 12);
          c = fnF(c, d, a, b, M[2], 606105819, 17);
          b = fnF(b, c, d, a, M[3], 3250441966, 22);
          a = fnF(a, b, c, d, M[4], 4118548399, 7);
          d = fnF(d, a, b, c, M[5], 1200080426, 12);
          c = fnF(c, d, a, b, M[6], 2821735955, 17);
          b = fnF(b, c, d, a, M[7], 4249261313, 22);
          a = fnF(a, b, c, d, M[8], 1770035416, 7);
          d = fnF(d, a, b, c, M[9], 2336552879, 12);
          c = fnF(c, d, a, b, M[10], 4294925233, 17);
          b = fnF(b, c, d, a, M[11], 2304563134, 22);
          a = fnF(a, b, c, d, M[12], 1804603682, 7);
          d = fnF(d, a, b, c, M[13], 4254626195, 12);
          c = fnF(c, d, a, b, M[14], 2792965006, 17);
          b = fnF(b, c, d, a, M[15], 1236535329, 22);
          a = fnG(a, b, c, d, M[1], 4129170786, 5);
          d = fnG(d, a, b, c, M[6], 3225465664, 9);
          c = fnG(c, d, a, b, M[11], 643717713, 14);
          b = fnG(b, c, d, a, M[0], 3921069994, 20);
          a = fnG(a, b, c, d, M[5], 3593408605, 5);
          d = fnG(d, a, b, c, M[10], 38016083, 9);
          c = fnG(c, d, a, b, M[15], 3634488961, 14);
          b = fnG(b, c, d, a, M[4], 3889429448, 20);
          a = fnG(a, b, c, d, M[9], 568446438, 5);
          d = fnG(d, a, b, c, M[14], 3275163606, 9);
          c = fnG(c, d, a, b, M[3], 4107603335, 14);
          b = fnG(b, c, d, a, M[8], 1163531501, 20);
          a = fnG(a, b, c, d, M[13], 2850285829, 5);
          d = fnG(d, a, b, c, M[2], 4243563512, 9);
          c = fnG(c, d, a, b, M[7], 1735328473, 14);
          b = fnG(b, c, d, a, M[12], 2368359562, 20);
          a = fnH(a, b, c, d, M[5], 4294588738, 4);
          d = fnH(d, a, b, c, M[8], 2272392833, 11);
          c = fnH(c, d, a, b, M[11], 1839030562, 16);
          b = fnH(b, c, d, a, M[14], 4259657740, 23);
          a = fnH(a, b, c, d, M[1], 2763975236, 4);
          d = fnH(d, a, b, c, M[4], 1272893353, 11);
          c = fnH(c, d, a, b, M[7], 4139469664, 16);
          b = fnH(b, c, d, a, M[10], 3200236656, 23);
          a = fnH(a, b, c, d, M[13], 681279174, 4);
          d = fnH(d, a, b, c, M[0], 3936430074, 11);
          c = fnH(c, d, a, b, M[3], 3572445317, 16);
          b = fnH(b, c, d, a, M[6], 76029189, 23);
          a = fnH(a, b, c, d, M[9], 3654602809, 4);
          d = fnH(d, a, b, c, M[12], 3873151461, 11);
          c = fnH(c, d, a, b, M[15], 530742520, 16);
          b = fnH(b, c, d, a, M[2], 3299628645, 23);
          a = fnI(a, b, c, d, M[0], 4096336452, 6);
          d = fnI(d, a, b, c, M[7], 1126891415, 10);
          c = fnI(c, d, a, b, M[14], 2878612391, 15);
          b = fnI(b, c, d, a, M[5], 4237533241, 21);
          a = fnI(a, b, c, d, M[12], 1700485571, 6);
          d = fnI(d, a, b, c, M[3], 2399980690, 10);
          c = fnI(c, d, a, b, M[10], 4293915773, 15);
          b = fnI(b, c, d, a, M[1], 2240044497, 21);
          a = fnI(a, b, c, d, M[8], 1873313359, 6);
          d = fnI(d, a, b, c, M[15], 4264355552, 10);
          c = fnI(c, d, a, b, M[6], 2734768916, 15);
          b = fnI(b, c, d, a, M[13], 1309151649, 21);
          a = fnI(a, b, c, d, M[4], 4149444226, 6);
          d = fnI(d, a, b, c, M[11], 3174756917, 10);
          c = fnI(c, d, a, b, M[2], 718787259, 15);
          b = fnI(b, c, d, a, M[9], 3951481745, 21);
          this._a = this._a + a | 0;
          this._b = this._b + b | 0;
          this._c = this._c + c | 0;
          this._d = this._d + d | 0;
        };
        MD5.prototype._digest = function() {
          this._block[this._blockOffset++] = 128;
          if (this._blockOffset > 56) {
            this._block.fill(0, this._blockOffset, 64);
            this._update();
            this._blockOffset = 0;
          }
          this._block.fill(0, this._blockOffset, 56);
          this._block.writeUInt32LE(this._length[0], 56);
          this._block.writeUInt32LE(this._length[1], 60);
          this._update();
          var buffer = Buffer2.allocUnsafe(16);
          buffer.writeInt32LE(this._a, 0);
          buffer.writeInt32LE(this._b, 4);
          buffer.writeInt32LE(this._c, 8);
          buffer.writeInt32LE(this._d, 12);
          return buffer;
        };
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        function fnF(a, b, c, d, m, k, s) {
          return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
        }
        function fnG(a, b, c, d, m, k, s) {
          return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
        }
        function fnH(a, b, c, d, m, k, s) {
          return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
        }
        function fnI(a, b, c, d, m, k, s) {
          return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
        }
        module3.exports = MD5;
      }, { "hash-base": 103, "inherits": 133, "safe-buffer": 188 }], 135: [function(require2, module3, exports3) {
        var bn = require2("bn.js");
        var brorand = require2("brorand");
        function MillerRabin(rand) {
          this.rand = rand || new brorand.Rand();
        }
        module3.exports = MillerRabin;
        MillerRabin.create = function create(rand) {
          return new MillerRabin(rand);
        };
        MillerRabin.prototype._randbelow = function _randbelow(n) {
          var len = n.bitLength();
          var min_bytes = Math.ceil(len / 8);
          do
            var a = new bn(this.rand.generate(min_bytes));
          while (a.cmp(n) >= 0);
          return a;
        };
        MillerRabin.prototype._randrange = function _randrange(start, stop) {
          var size = stop.sub(start);
          return start.add(this._randbelow(size));
        };
        MillerRabin.prototype.test = function test(n, k, cb) {
          var len = n.bitLength();
          var red = bn.mont(n);
          var rone = new bn(1).toRed(red);
          if (!k)
            k = Math.max(1, len / 48 | 0);
          var n1 = n.subn(1);
          for (var s = 0; !n1.testn(s); s++) {
          }
          var d = n.shrn(s);
          var rn1 = n1.toRed(red);
          var prime = true;
          for (; k > 0; k--) {
            var a = this._randrange(new bn(2), n1);
            if (cb)
              cb(a);
            var x = a.toRed(red).redPow(d);
            if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
              continue;
            for (var i = 1; i < s; i++) {
              x = x.redSqr();
              if (x.cmp(rone) === 0)
                return false;
              if (x.cmp(rn1) === 0)
                break;
            }
            if (i === s)
              return false;
          }
          return prime;
        };
        MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
          var len = n.bitLength();
          var red = bn.mont(n);
          var rone = new bn(1).toRed(red);
          if (!k)
            k = Math.max(1, len / 48 | 0);
          var n1 = n.subn(1);
          for (var s = 0; !n1.testn(s); s++) {
          }
          var d = n.shrn(s);
          var rn1 = n1.toRed(red);
          for (; k > 0; k--) {
            var a = this._randrange(new bn(2), n1);
            var g = n.gcd(a);
            if (g.cmpn(1) !== 0)
              return g;
            var x = a.toRed(red).redPow(d);
            if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
              continue;
            for (var i = 1; i < s; i++) {
              x = x.redSqr();
              if (x.cmp(rone) === 0)
                return x.fromRed().subn(1).gcd(n);
              if (x.cmp(rn1) === 0)
                break;
            }
            if (i === s) {
              x = x.redSqr();
              return x.fromRed().subn(1).gcd(n);
            }
          }
          return false;
        };
      }, { "bn.js": 136, "brorand": 18 }], 136: [function(require2, module3, exports3) {
        arguments[4][15][0].apply(exports3, arguments);
      }, { "buffer": 19, "dup": 15 }], 137: [function(require2, module3, exports3) {
        module3.exports = assert;
        function assert(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        assert.equal = function assertEqual(l, r, msg) {
          if (l != r)
            throw new Error(msg || "Assertion failed: " + l + " != " + r);
        };
      }, {}], 138: [function(require2, module3, exports3) {
        "use strict";
        var utils = exports3;
        function toArray(msg, enc) {
          if (Array.isArray(msg))
            return msg.slice();
          if (!msg)
            return [];
          var res = [];
          if (typeof msg !== "string") {
            for (var i = 0; i < msg.length; i++)
              res[i] = msg[i] | 0;
            return res;
          }
          if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0)
              msg = "0" + msg;
            for (var i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          } else {
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              var hi = c >> 8;
              var lo = c & 255;
              if (hi)
                res.push(hi, lo);
              else
                res.push(lo);
            }
          }
          return res;
        }
        utils.toArray = toArray;
        function zero2(word) {
          if (word.length === 1)
            return "0" + word;
          else
            return word;
        }
        utils.zero2 = zero2;
        function toHex(msg) {
          var res = "";
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        utils.toHex = toHex;
        utils.encode = function encode(arr, enc) {
          if (enc === "hex")
            return toHex(arr);
          else
            return arr;
        };
      }, {}], 139: [function(require2, module3, exports3) {
        module3.exports = {
          "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
          "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
          "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
          "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
          "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
          "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
          "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
          "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
          "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
          "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
          "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
          "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
        };
      }, {}], 140: [function(require2, module3, exports3) {
        "use strict";
        var asn1 = require2("asn1.js");
        exports3.certificate = require2("./certificate");
        var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
          this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
        });
        exports3.RSAPrivateKey = RSAPrivateKey;
        var RSAPublicKey = asn1.define("RSAPublicKey", function() {
          this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
        });
        exports3.RSAPublicKey = RSAPublicKey;
        var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
          this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
        });
        exports3.PublicKey = PublicKey;
        var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
          this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
        });
        var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
          this.seq().obj(this.key("version").int(), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
        });
        exports3.PrivateKey = PrivateKeyInfo;
        var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
          this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
        });
        exports3.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
        var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
          this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
        });
        exports3.DSAPrivateKey = DSAPrivateKey;
        exports3.DSAparam = asn1.define("DSAparam", function() {
          this.int();
        });
        var ECPrivateKey = asn1.define("ECPrivateKey", function() {
          this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
        });
        exports3.ECPrivateKey = ECPrivateKey;
        var ECParameters = asn1.define("ECParameters", function() {
          this.choice({
            namedCurve: this.objid()
          });
        });
        exports3.signature = asn1.define("signature", function() {
          this.seq().obj(this.key("r").int(), this.key("s").int());
        });
      }, { "./certificate": 141, "asn1.js": 1 }], 141: [function(require2, module3, exports3) {
        "use strict";
        var asn = require2("asn1.js");
        var Time = asn.define("Time", function() {
          this.choice({
            utcTime: this.utctime(),
            generalTime: this.gentime()
          });
        });
        var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
          this.seq().obj(this.key("type").objid(), this.key("value").any());
        });
        var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
          this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
        });
        var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
          this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
        });
        var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
          this.setof(AttributeTypeValue);
        });
        var RDNSequence = asn.define("RDNSequence", function() {
          this.seqof(RelativeDistinguishedName);
        });
        var Name = asn.define("Name", function() {
          this.choice({
            rdnSequence: this.use(RDNSequence)
          });
        });
        var Validity = asn.define("Validity", function() {
          this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
        });
        var Extension = asn.define("Extension", function() {
          this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
        });
        var TBSCertificate = asn.define("TBSCertificate", function() {
          this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
        });
        var X509Certificate = asn.define("X509Certificate", function() {
          this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
        });
        module3.exports = X509Certificate;
      }, { "asn1.js": 1 }], 142: [function(require2, module3, exports3) {
        var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
        var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
        var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
        var evp = require2("evp_bytestokey");
        var ciphers = require2("browserify-aes");
        var Buffer2 = require2("safe-buffer").Buffer;
        module3.exports = function(okey, password) {
          var key = okey.toString();
          var match = key.match(findProc);
          var decrypted;
          if (!match) {
            var match2 = key.match(fullRegex);
            decrypted = Buffer2.from(match2[2].replace(/[\r\n]/g, ""), "base64");
          } else {
            var suite = "aes" + match[1];
            var iv = Buffer2.from(match[2], "hex");
            var cipherText = Buffer2.from(match[3].replace(/[\r\n]/g, ""), "base64");
            var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
            var out = [];
            var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
            out.push(cipher.update(cipherText));
            out.push(cipher.final());
            decrypted = Buffer2.concat(out);
          }
          var tag = key.match(startRegex)[1];
          return {
            tag,
            data: decrypted
          };
        };
      }, { "browserify-aes": 22, "evp_bytestokey": 102, "safe-buffer": 188 }], 143: [function(require2, module3, exports3) {
        var asn1 = require2("./asn1");
        var aesid = require2("./aesid.json");
        var fixProc = require2("./fixProc");
        var ciphers = require2("browserify-aes");
        var compat = require2("pbkdf2");
        var Buffer2 = require2("safe-buffer").Buffer;
        module3.exports = parseKeys;
        function parseKeys(buffer) {
          var password;
          if (typeof buffer === "object" && !Buffer2.isBuffer(buffer)) {
            password = buffer.passphrase;
            buffer = buffer.key;
          }
          if (typeof buffer === "string") {
            buffer = Buffer2.from(buffer);
          }
          var stripped = fixProc(buffer, password);
          var type = stripped.tag;
          var data = stripped.data;
          var subtype, ndata;
          switch (type) {
            case "CERTIFICATE":
              ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
            case "PUBLIC KEY":
              if (!ndata) {
                ndata = asn1.PublicKey.decode(data, "der");
              }
              subtype = ndata.algorithm.algorithm.join(".");
              switch (subtype) {
                case "1.2.840.113549.1.1.1":
                  return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
                case "1.2.840.10045.2.1":
                  ndata.subjectPrivateKey = ndata.subjectPublicKey;
                  return {
                    type: "ec",
                    data: ndata
                  };
                case "1.2.840.10040.4.1":
                  ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
                  return {
                    type: "dsa",
                    data: ndata.algorithm.params
                  };
                default:
                  throw new Error("unknown key id " + subtype);
              }
            case "ENCRYPTED PRIVATE KEY":
              data = asn1.EncryptedPrivateKey.decode(data, "der");
              data = decrypt(data, password);
            case "PRIVATE KEY":
              ndata = asn1.PrivateKey.decode(data, "der");
              subtype = ndata.algorithm.algorithm.join(".");
              switch (subtype) {
                case "1.2.840.113549.1.1.1":
                  return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
                case "1.2.840.10045.2.1":
                  return {
                    curve: ndata.algorithm.curve,
                    privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
                  };
                case "1.2.840.10040.4.1":
                  ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
                  return {
                    type: "dsa",
                    params: ndata.algorithm.params
                  };
                default:
                  throw new Error("unknown key id " + subtype);
              }
            case "RSA PUBLIC KEY":
              return asn1.RSAPublicKey.decode(data, "der");
            case "RSA PRIVATE KEY":
              return asn1.RSAPrivateKey.decode(data, "der");
            case "DSA PRIVATE KEY":
              return {
                type: "dsa",
                params: asn1.DSAPrivateKey.decode(data, "der")
              };
            case "EC PRIVATE KEY":
              data = asn1.ECPrivateKey.decode(data, "der");
              return {
                curve: data.parameters.value,
                privateKey: data.privateKey
              };
            default:
              throw new Error("unknown key type " + type);
          }
        }
        parseKeys.signature = asn1.signature;
        function decrypt(data, password) {
          var salt = data.algorithm.decrypt.kde.kdeparams.salt;
          var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
          var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
          var iv = data.algorithm.decrypt.cipher.iv;
          var cipherText = data.subjectPrivateKey;
          var keylen = parseInt(algo.split("-")[1], 10) / 8;
          var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
          var cipher = ciphers.createDecipheriv(algo, key, iv);
          var out = [];
          out.push(cipher.update(cipherText));
          out.push(cipher.final());
          return Buffer2.concat(out);
        }
      }, { "./aesid.json": 139, "./asn1": 140, "./fixProc": 142, "browserify-aes": 22, "pbkdf2": 145, "safe-buffer": 188 }], 144: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            "use strict";
            function assertPath(path) {
              if (typeof path !== "string") {
                throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
              }
            }
            function normalizeStringPosix(path, allowAboveRoot) {
              var res = "";
              var lastSegmentLength = 0;
              var lastSlash = -1;
              var dots = 0;
              var code;
              for (var i = 0; i <= path.length; ++i) {
                if (i < path.length)
                  code = path.charCodeAt(i);
                else if (code === 47)
                  break;
                else
                  code = 47;
                if (code === 47) {
                  if (lastSlash === i - 1 || dots === 1) {
                  } else if (lastSlash !== i - 1 && dots === 2) {
                    if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                      if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf("/");
                        if (lastSlashIndex !== res.length - 1) {
                          if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                          } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                          }
                          lastSlash = i;
                          dots = 0;
                          continue;
                        }
                      } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                      }
                    }
                    if (allowAboveRoot) {
                      if (res.length > 0)
                        res += "/..";
                      else
                        res = "..";
                      lastSegmentLength = 2;
                    }
                  } else {
                    if (res.length > 0)
                      res += "/" + path.slice(lastSlash + 1, i);
                    else
                      res = path.slice(lastSlash + 1, i);
                    lastSegmentLength = i - lastSlash - 1;
                  }
                  lastSlash = i;
                  dots = 0;
                } else if (code === 46 && dots !== -1) {
                  ++dots;
                } else {
                  dots = -1;
                }
              }
              return res;
            }
            function _format(sep, pathObject) {
              var dir = pathObject.dir || pathObject.root;
              var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
              if (!dir) {
                return base;
              }
              if (dir === pathObject.root) {
                return dir + base;
              }
              return dir + sep + base;
            }
            var posix = {
              resolve: function resolve() {
                var resolvedPath = "";
                var resolvedAbsolute = false;
                var cwd;
                for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                  var path;
                  if (i >= 0)
                    path = arguments[i];
                  else {
                    if (cwd === void 0)
                      cwd = process.cwd();
                    path = cwd;
                  }
                  assertPath(path);
                  if (path.length === 0) {
                    continue;
                  }
                  resolvedPath = path + "/" + resolvedPath;
                  resolvedAbsolute = path.charCodeAt(0) === 47;
                }
                resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
                if (resolvedAbsolute) {
                  if (resolvedPath.length > 0)
                    return "/" + resolvedPath;
                  else
                    return "/";
                } else if (resolvedPath.length > 0) {
                  return resolvedPath;
                } else {
                  return ".";
                }
              },
              normalize: function normalize(path) {
                assertPath(path);
                if (path.length === 0)
                  return ".";
                var isAbsolute = path.charCodeAt(0) === 47;
                var trailingSeparator = path.charCodeAt(path.length - 1) === 47;
                path = normalizeStringPosix(path, !isAbsolute);
                if (path.length === 0 && !isAbsolute)
                  path = ".";
                if (path.length > 0 && trailingSeparator)
                  path += "/";
                if (isAbsolute)
                  return "/" + path;
                return path;
              },
              isAbsolute: function isAbsolute(path) {
                assertPath(path);
                return path.length > 0 && path.charCodeAt(0) === 47;
              },
              join: function join() {
                if (arguments.length === 0)
                  return ".";
                var joined;
                for (var i = 0; i < arguments.length; ++i) {
                  var arg = arguments[i];
                  assertPath(arg);
                  if (arg.length > 0) {
                    if (joined === void 0)
                      joined = arg;
                    else
                      joined += "/" + arg;
                  }
                }
                if (joined === void 0)
                  return ".";
                return posix.normalize(joined);
              },
              relative: function relative(from, to) {
                assertPath(from);
                assertPath(to);
                if (from === to)
                  return "";
                from = posix.resolve(from);
                to = posix.resolve(to);
                if (from === to)
                  return "";
                var fromStart = 1;
                for (; fromStart < from.length; ++fromStart) {
                  if (from.charCodeAt(fromStart) !== 47)
                    break;
                }
                var fromEnd = from.length;
                var fromLen = fromEnd - fromStart;
                var toStart = 1;
                for (; toStart < to.length; ++toStart) {
                  if (to.charCodeAt(toStart) !== 47)
                    break;
                }
                var toEnd = to.length;
                var toLen = toEnd - toStart;
                var length = fromLen < toLen ? fromLen : toLen;
                var lastCommonSep = -1;
                var i = 0;
                for (; i <= length; ++i) {
                  if (i === length) {
                    if (toLen > length) {
                      if (to.charCodeAt(toStart + i) === 47) {
                        return to.slice(toStart + i + 1);
                      } else if (i === 0) {
                        return to.slice(toStart + i);
                      }
                    } else if (fromLen > length) {
                      if (from.charCodeAt(fromStart + i) === 47) {
                        lastCommonSep = i;
                      } else if (i === 0) {
                        lastCommonSep = 0;
                      }
                    }
                    break;
                  }
                  var fromCode = from.charCodeAt(fromStart + i);
                  var toCode = to.charCodeAt(toStart + i);
                  if (fromCode !== toCode)
                    break;
                  else if (fromCode === 47)
                    lastCommonSep = i;
                }
                var out = "";
                for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
                  if (i === fromEnd || from.charCodeAt(i) === 47) {
                    if (out.length === 0)
                      out += "..";
                    else
                      out += "/..";
                  }
                }
                if (out.length > 0)
                  return out + to.slice(toStart + lastCommonSep);
                else {
                  toStart += lastCommonSep;
                  if (to.charCodeAt(toStart) === 47)
                    ++toStart;
                  return to.slice(toStart);
                }
              },
              _makeLong: function _makeLong(path) {
                return path;
              },
              dirname: function dirname(path) {
                assertPath(path);
                if (path.length === 0)
                  return ".";
                var code = path.charCodeAt(0);
                var hasRoot = code === 47;
                var end = -1;
                var matchedSlash = true;
                for (var i = path.length - 1; i >= 1; --i) {
                  code = path.charCodeAt(i);
                  if (code === 47) {
                    if (!matchedSlash) {
                      end = i;
                      break;
                    }
                  } else {
                    matchedSlash = false;
                  }
                }
                if (end === -1)
                  return hasRoot ? "/" : ".";
                if (hasRoot && end === 1)
                  return "//";
                return path.slice(0, end);
              },
              basename: function basename(path, ext) {
                if (ext !== void 0 && typeof ext !== "string")
                  throw new TypeError('"ext" argument must be a string');
                assertPath(path);
                var start = 0;
                var end = -1;
                var matchedSlash = true;
                var i;
                if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
                  if (ext.length === path.length && ext === path)
                    return "";
                  var extIdx = ext.length - 1;
                  var firstNonSlashEnd = -1;
                  for (i = path.length - 1; i >= 0; --i) {
                    var code = path.charCodeAt(i);
                    if (code === 47) {
                      if (!matchedSlash) {
                        start = i + 1;
                        break;
                      }
                    } else {
                      if (firstNonSlashEnd === -1) {
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                      }
                      if (extIdx >= 0) {
                        if (code === ext.charCodeAt(extIdx)) {
                          if (--extIdx === -1) {
                            end = i;
                          }
                        } else {
                          extIdx = -1;
                          end = firstNonSlashEnd;
                        }
                      }
                    }
                  }
                  if (start === end)
                    end = firstNonSlashEnd;
                  else if (end === -1)
                    end = path.length;
                  return path.slice(start, end);
                } else {
                  for (i = path.length - 1; i >= 0; --i) {
                    if (path.charCodeAt(i) === 47) {
                      if (!matchedSlash) {
                        start = i + 1;
                        break;
                      }
                    } else if (end === -1) {
                      matchedSlash = false;
                      end = i + 1;
                    }
                  }
                  if (end === -1)
                    return "";
                  return path.slice(start, end);
                }
              },
              extname: function extname(path) {
                assertPath(path);
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var preDotState = 0;
                for (var i = path.length - 1; i >= 0; --i) {
                  var code = path.charCodeAt(i);
                  if (code === 47) {
                    if (!matchedSlash) {
                      startPart = i + 1;
                      break;
                    }
                    continue;
                  }
                  if (end === -1) {
                    matchedSlash = false;
                    end = i + 1;
                  }
                  if (code === 46) {
                    if (startDot === -1)
                      startDot = i;
                    else if (preDotState !== 1)
                      preDotState = 1;
                  } else if (startDot !== -1) {
                    preDotState = -1;
                  }
                }
                if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                  return "";
                }
                return path.slice(startDot, end);
              },
              format: function format(pathObject) {
                if (pathObject === null || typeof pathObject !== "object") {
                  throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
                }
                return _format("/", pathObject);
              },
              parse: function parse(path) {
                assertPath(path);
                var ret = { root: "", dir: "", base: "", ext: "", name: "" };
                if (path.length === 0)
                  return ret;
                var code = path.charCodeAt(0);
                var isAbsolute = code === 47;
                var start;
                if (isAbsolute) {
                  ret.root = "/";
                  start = 1;
                } else {
                  start = 0;
                }
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var i = path.length - 1;
                var preDotState = 0;
                for (; i >= start; --i) {
                  code = path.charCodeAt(i);
                  if (code === 47) {
                    if (!matchedSlash) {
                      startPart = i + 1;
                      break;
                    }
                    continue;
                  }
                  if (end === -1) {
                    matchedSlash = false;
                    end = i + 1;
                  }
                  if (code === 46) {
                    if (startDot === -1)
                      startDot = i;
                    else if (preDotState !== 1)
                      preDotState = 1;
                  } else if (startDot !== -1) {
                    preDotState = -1;
                  }
                }
                if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                  if (end !== -1) {
                    if (startPart === 0 && isAbsolute)
                      ret.base = ret.name = path.slice(1, end);
                    else
                      ret.base = ret.name = path.slice(startPart, end);
                  }
                } else {
                  if (startPart === 0 && isAbsolute) {
                    ret.name = path.slice(1, startDot);
                    ret.base = path.slice(1, end);
                  } else {
                    ret.name = path.slice(startPart, startDot);
                    ret.base = path.slice(startPart, end);
                  }
                  ret.ext = path.slice(startDot, end);
                }
                if (startPart > 0)
                  ret.dir = path.slice(0, startPart - 1);
                else if (isAbsolute)
                  ret.dir = "/";
                return ret;
              },
              sep: "/",
              delimiter: ":",
              win32: null,
              posix: null
            };
            posix.posix = posix;
            module3.exports = posix;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 151 }], 145: [function(require2, module3, exports3) {
        exports3.pbkdf2 = require2("./lib/async");
        exports3.pbkdf2Sync = require2("./lib/sync");
      }, { "./lib/async": 146, "./lib/sync": 149 }], 146: [function(require2, module3, exports3) {
        (function(global2) {
          (function() {
            var Buffer2 = require2("safe-buffer").Buffer;
            var checkParameters = require2("./precondition");
            var defaultEncoding = require2("./default-encoding");
            var sync = require2("./sync");
            var toBuffer = require2("./to-buffer");
            var ZERO_BUF;
            var subtle = global2.crypto && global2.crypto.subtle;
            var toBrowser = {
              sha: "SHA-1",
              "sha-1": "SHA-1",
              sha1: "SHA-1",
              sha256: "SHA-256",
              "sha-256": "SHA-256",
              sha384: "SHA-384",
              "sha-384": "SHA-384",
              "sha-512": "SHA-512",
              sha512: "SHA-512"
            };
            var checks = [];
            function checkNative(algo) {
              if (global2.process && !global2.process.browser) {
                return Promise.resolve(false);
              }
              if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                return Promise.resolve(false);
              }
              if (checks[algo] !== void 0) {
                return checks[algo];
              }
              ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
              var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
                return true;
              }).catch(function() {
                return false;
              });
              checks[algo] = prom;
              return prom;
            }
            var nextTick;
            function getNextTick() {
              if (nextTick) {
                return nextTick;
              }
              if (global2.process && global2.process.nextTick) {
                nextTick = global2.process.nextTick;
              } else if (global2.queueMicrotask) {
                nextTick = global2.queueMicrotask;
              } else if (global2.setImmediate) {
                nextTick = global2.setImmediate;
              } else {
                nextTick = global2.setTimeout;
              }
              return nextTick;
            }
            function browserPbkdf2(password, salt, iterations, length, algo) {
              return subtle.importKey("raw", password, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(key) {
                return subtle.deriveBits({
                  name: "PBKDF2",
                  salt,
                  iterations,
                  hash: {
                    name: algo
                  }
                }, key, length << 3);
              }).then(function(res) {
                return Buffer2.from(res);
              });
            }
            function resolvePromise(promise, callback) {
              promise.then(function(out) {
                getNextTick()(function() {
                  callback(null, out);
                });
              }, function(e) {
                getNextTick()(function() {
                  callback(e);
                });
              });
            }
            module3.exports = function(password, salt, iterations, keylen, digest, callback) {
              if (typeof digest === "function") {
                callback = digest;
                digest = void 0;
              }
              digest = digest || "sha1";
              var algo = toBrowser[digest.toLowerCase()];
              if (!algo || typeof global2.Promise !== "function") {
                getNextTick()(function() {
                  var out;
                  try {
                    out = sync(password, salt, iterations, keylen, digest);
                  } catch (e) {
                    return callback(e);
                  }
                  callback(null, out);
                });
                return;
              }
              checkParameters(iterations, keylen);
              password = toBuffer(password, defaultEncoding, "Password");
              salt = toBuffer(salt, defaultEncoding, "Salt");
              if (typeof callback !== "function")
                throw new Error("No callback provided to pbkdf2");
              resolvePromise(checkNative(algo).then(function(resp) {
                if (resp)
                  return browserPbkdf2(password, salt, iterations, keylen, algo);
                return sync(password, salt, iterations, keylen, digest);
              }), callback);
            };
          }).call(this);
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "./default-encoding": 147, "./precondition": 148, "./sync": 149, "./to-buffer": 150, "safe-buffer": 188 }], 147: [function(require2, module3, exports3) {
        (function(process, global2) {
          (function() {
            var defaultEncoding;
            if (global2.process && global2.process.browser) {
              defaultEncoding = "utf-8";
            } else if (global2.process && global2.process.version) {
              var pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
              defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
            } else {
              defaultEncoding = "utf-8";
            }
            module3.exports = defaultEncoding;
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "_process": 151 }], 148: [function(require2, module3, exports3) {
        var MAX_ALLOC = Math.pow(2, 30) - 1;
        module3.exports = function(iterations, keylen) {
          if (typeof iterations !== "number") {
            throw new TypeError("Iterations not a number");
          }
          if (iterations < 0) {
            throw new TypeError("Bad iterations");
          }
          if (typeof keylen !== "number") {
            throw new TypeError("Key length not a number");
          }
          if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
            throw new TypeError("Bad key length");
          }
        };
      }, {}], 149: [function(require2, module3, exports3) {
        var md5 = require2("create-hash/md5");
        var RIPEMD160 = require2("ripemd160");
        var sha = require2("sha.js");
        var Buffer2 = require2("safe-buffer").Buffer;
        var checkParameters = require2("./precondition");
        var defaultEncoding = require2("./default-encoding");
        var toBuffer = require2("./to-buffer");
        var ZEROS = Buffer2.alloc(128);
        var sizes = {
          md5: 16,
          sha1: 20,
          sha224: 28,
          sha256: 32,
          sha384: 48,
          sha512: 64,
          rmd160: 20,
          ripemd160: 20
        };
        function Hmac(alg, key, saltLen) {
          var hash = getDigest(alg);
          var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
          if (key.length > blocksize) {
            key = hash(key);
          } else if (key.length < blocksize) {
            key = Buffer2.concat([key, ZEROS], blocksize);
          }
          var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
          var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 54;
            opad[i] = key[i] ^ 92;
          }
          var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
          ipad.copy(ipad1, 0, 0, blocksize);
          this.ipad1 = ipad1;
          this.ipad2 = ipad;
          this.opad = opad;
          this.alg = alg;
          this.blocksize = blocksize;
          this.hash = hash;
          this.size = sizes[alg];
        }
        Hmac.prototype.run = function(data, ipad) {
          data.copy(ipad, this.blocksize);
          var h = this.hash(ipad);
          h.copy(this.opad, this.blocksize);
          return this.hash(this.opad);
        };
        function getDigest(alg) {
          function shaFunc(data) {
            return sha(alg).update(data).digest();
          }
          function rmd160Func(data) {
            return new RIPEMD160().update(data).digest();
          }
          if (alg === "rmd160" || alg === "ripemd160")
            return rmd160Func;
          if (alg === "md5")
            return md5;
          return shaFunc;
        }
        function pbkdf2(password, salt, iterations, keylen, digest) {
          checkParameters(iterations, keylen);
          password = toBuffer(password, defaultEncoding, "Password");
          salt = toBuffer(salt, defaultEncoding, "Salt");
          digest = digest || "sha1";
          var hmac = new Hmac(digest, password, salt.length);
          var DK = Buffer2.allocUnsafe(keylen);
          var block1 = Buffer2.allocUnsafe(salt.length + 4);
          salt.copy(block1, 0, 0, salt.length);
          var destPos = 0;
          var hLen = sizes[digest];
          var l = Math.ceil(keylen / hLen);
          for (var i = 1; i <= l; i++) {
            block1.writeUInt32BE(i, salt.length);
            var T = hmac.run(block1, hmac.ipad1);
            var U = T;
            for (var j = 1; j < iterations; j++) {
              U = hmac.run(U, hmac.ipad2);
              for (var k = 0; k < hLen; k++)
                T[k] ^= U[k];
            }
            T.copy(DK, destPos);
            destPos += hLen;
          }
          return DK;
        }
        module3.exports = pbkdf2;
      }, { "./default-encoding": 147, "./precondition": 148, "./to-buffer": 150, "create-hash/md5": 69, "ripemd160": 187, "safe-buffer": 188, "sha.js": 191 }], 150: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        module3.exports = function(thing, encoding, name) {
          if (Buffer2.isBuffer(thing)) {
            return thing;
          } else if (typeof thing === "string") {
            return Buffer2.from(thing, encoding);
          } else if (ArrayBuffer.isView(thing)) {
            return Buffer2.from(thing.buffer);
          } else {
            throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
          }
        };
      }, { "safe-buffer": 188 }], 151: [function(require2, module3, exports3) {
        var process = module3.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e2) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e2) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {
        }
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      }, {}], 152: [function(require2, module3, exports3) {
        exports3.publicEncrypt = require2("./publicEncrypt");
        exports3.privateDecrypt = require2("./privateDecrypt");
        exports3.privateEncrypt = function privateEncrypt(key, buf) {
          return exports3.publicEncrypt(key, buf, true);
        };
        exports3.publicDecrypt = function publicDecrypt(key, buf) {
          return exports3.privateDecrypt(key, buf, true);
        };
      }, { "./privateDecrypt": 155, "./publicEncrypt": 156 }], 153: [function(require2, module3, exports3) {
        var createHash = require2("create-hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        module3.exports = function(seed, len) {
          var t = Buffer2.alloc(0);
          var i = 0;
          var c;
          while (t.length < len) {
            c = i2ops(i++);
            t = Buffer2.concat([t, createHash("sha1").update(seed).update(c).digest()]);
          }
          return t.slice(0, len);
        };
        function i2ops(c) {
          var out = Buffer2.allocUnsafe(4);
          out.writeUInt32BE(c, 0);
          return out;
        }
      }, { "create-hash": 68, "safe-buffer": 188 }], 154: [function(require2, module3, exports3) {
        arguments[4][15][0].apply(exports3, arguments);
      }, { "buffer": 19, "dup": 15 }], 155: [function(require2, module3, exports3) {
        var parseKeys = require2("parse-asn1");
        var mgf = require2("./mgf");
        var xor = require2("./xor");
        var BN = require2("bn.js");
        var crt = require2("browserify-rsa");
        var createHash = require2("create-hash");
        var withPublic = require2("./withPublic");
        var Buffer2 = require2("safe-buffer").Buffer;
        module3.exports = function privateDecrypt(privateKey, enc, reverse) {
          var padding;
          if (privateKey.padding) {
            padding = privateKey.padding;
          } else if (reverse) {
            padding = 1;
          } else {
            padding = 4;
          }
          var key = parseKeys(privateKey);
          var k = key.modulus.byteLength();
          if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
            throw new Error("decryption error");
          }
          var msg;
          if (reverse) {
            msg = withPublic(new BN(enc), key);
          } else {
            msg = crt(enc, key);
          }
          var zBuffer = Buffer2.alloc(k - msg.length);
          msg = Buffer2.concat([zBuffer, msg], k);
          if (padding === 4) {
            return oaep(key, msg);
          } else if (padding === 1) {
            return pkcs1(key, msg, reverse);
          } else if (padding === 3) {
            return msg;
          } else {
            throw new Error("unknown padding");
          }
        };
        function oaep(key, msg) {
          var k = key.modulus.byteLength();
          var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
          var hLen = iHash.length;
          if (msg[0] !== 0) {
            throw new Error("decryption error");
          }
          var maskedSeed = msg.slice(1, hLen + 1);
          var maskedDb = msg.slice(hLen + 1);
          var seed = xor(maskedSeed, mgf(maskedDb, hLen));
          var db = xor(maskedDb, mgf(seed, k - hLen - 1));
          if (compare(iHash, db.slice(0, hLen))) {
            throw new Error("decryption error");
          }
          var i = hLen;
          while (db[i] === 0) {
            i++;
          }
          if (db[i++] !== 1) {
            throw new Error("decryption error");
          }
          return db.slice(i);
        }
        function pkcs1(key, msg, reverse) {
          var p1 = msg.slice(0, 2);
          var i = 2;
          var status = 0;
          while (msg[i++] !== 0) {
            if (i >= msg.length) {
              status++;
              break;
            }
          }
          var ps = msg.slice(2, i - 1);
          if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
            status++;
          }
          if (ps.length < 8) {
            status++;
          }
          if (status) {
            throw new Error("decryption error");
          }
          return msg.slice(i);
        }
        function compare(a, b) {
          a = Buffer2.from(a);
          b = Buffer2.from(b);
          var dif = 0;
          var len = a.length;
          if (a.length !== b.length) {
            dif++;
            len = Math.min(a.length, b.length);
          }
          var i = -1;
          while (++i < len) {
            dif += a[i] ^ b[i];
          }
          return dif;
        }
      }, { "./mgf": 153, "./withPublic": 157, "./xor": 158, "bn.js": 154, "browserify-rsa": 40, "create-hash": 68, "parse-asn1": 143, "safe-buffer": 188 }], 156: [function(require2, module3, exports3) {
        var parseKeys = require2("parse-asn1");
        var randomBytes = require2("randombytes");
        var createHash = require2("create-hash");
        var mgf = require2("./mgf");
        var xor = require2("./xor");
        var BN = require2("bn.js");
        var withPublic = require2("./withPublic");
        var crt = require2("browserify-rsa");
        var Buffer2 = require2("safe-buffer").Buffer;
        module3.exports = function publicEncrypt(publicKey, msg, reverse) {
          var padding;
          if (publicKey.padding) {
            padding = publicKey.padding;
          } else if (reverse) {
            padding = 1;
          } else {
            padding = 4;
          }
          var key = parseKeys(publicKey);
          var paddedMsg;
          if (padding === 4) {
            paddedMsg = oaep(key, msg);
          } else if (padding === 1) {
            paddedMsg = pkcs1(key, msg, reverse);
          } else if (padding === 3) {
            paddedMsg = new BN(msg);
            if (paddedMsg.cmp(key.modulus) >= 0) {
              throw new Error("data too long for modulus");
            }
          } else {
            throw new Error("unknown padding");
          }
          if (reverse) {
            return crt(paddedMsg, key);
          } else {
            return withPublic(paddedMsg, key);
          }
        };
        function oaep(key, msg) {
          var k = key.modulus.byteLength();
          var mLen = msg.length;
          var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
          var hLen = iHash.length;
          var hLen2 = 2 * hLen;
          if (mLen > k - hLen2 - 2) {
            throw new Error("message too long");
          }
          var ps = Buffer2.alloc(k - mLen - hLen2 - 2);
          var dblen = k - hLen - 1;
          var seed = randomBytes(hLen);
          var maskedDb = xor(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf(seed, dblen));
          var maskedSeed = xor(seed, mgf(maskedDb, hLen));
          return new BN(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k));
        }
        function pkcs1(key, msg, reverse) {
          var mLen = msg.length;
          var k = key.modulus.byteLength();
          if (mLen > k - 11) {
            throw new Error("message too long");
          }
          var ps;
          if (reverse) {
            ps = Buffer2.alloc(k - mLen - 3, 255);
          } else {
            ps = nonZero(k - mLen - 3);
          }
          return new BN(Buffer2.concat([Buffer2.from([0, reverse ? 1 : 2]), ps, Buffer2.alloc(1), msg], k));
        }
        function nonZero(len) {
          var out = Buffer2.allocUnsafe(len);
          var i = 0;
          var cache = randomBytes(len * 2);
          var cur = 0;
          var num;
          while (i < len) {
            if (cur === cache.length) {
              cache = randomBytes(len * 2);
              cur = 0;
            }
            num = cache[cur++];
            if (num) {
              out[i++] = num;
            }
          }
          return out;
        }
      }, { "./mgf": 153, "./withPublic": 157, "./xor": 158, "bn.js": 154, "browserify-rsa": 40, "create-hash": 68, "parse-asn1": 143, "randombytes": 185, "safe-buffer": 188 }], 157: [function(require2, module3, exports3) {
        var BN = require2("bn.js");
        var Buffer2 = require2("safe-buffer").Buffer;
        function withPublic(paddedMsg, key) {
          return Buffer2.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
        }
        module3.exports = withPublic;
      }, { "bn.js": 154, "safe-buffer": 188 }], 158: [function(require2, module3, exports3) {
        module3.exports = function xor(a, b) {
          var len = a.length;
          var i = -1;
          while (++i < len) {
            a[i] ^= b[i];
          }
          return a;
        };
      }, {}], 159: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.awaitEachYieldedPromise = exports3.maybeAsync = exports3.maybeAsyncFn = void 0;
        function* awaitYield(value) {
          return yield value;
        }
        function awaitYieldOf(generator) {
          return awaitYield(awaitEachYieldedPromise(generator));
        }
        const AwaitYield = awaitYield;
        AwaitYield.of = awaitYieldOf;
        function maybeAsyncFn(that, fn) {
          return (...args) => {
            const generator = fn.call(that, AwaitYield, ...args);
            return awaitEachYieldedPromise(generator);
          };
        }
        exports3.maybeAsyncFn = maybeAsyncFn;
        class Example {
          constructor() {
            this.maybeAsyncMethod = maybeAsyncFn(this, function* (awaited, a) {
              yield* awaited(new Promise((resolve) => setTimeout(resolve, a)));
              return 5;
            });
          }
        }
        function maybeAsync(that, startGenerator) {
          const generator = startGenerator.call(that, AwaitYield);
          return awaitEachYieldedPromise(generator);
        }
        exports3.maybeAsync = maybeAsync;
        function awaitEachYieldedPromise(gen) {
          function handleNextStep(step) {
            if (step.done) {
              return step.value;
            }
            if (step.value instanceof Promise) {
              return step.value.then((value) => handleNextStep(gen.next(value)), (error) => handleNextStep(gen.throw(error)));
            }
            return handleNextStep(gen.next(step.value));
          }
          return handleNextStep(gen.next());
        }
        exports3.awaitEachYieldedPromise = awaitEachYieldedPromise;
      }, {}], 160: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSAsyncContext = void 0;
        const context_1 = require2("./context");
        const debug_1 = require2("./debug");
        const types_1 = require2("./types");
        class QuickJSAsyncContext extends context_1.QuickJSContext {
          async evalCodeAsync(code, filename = "eval.js", options) {
            const detectModule = options === void 0 ? 1 : 0;
            const flags = (0, types_1.evalOptionsToFlags)(options);
            let resultPtr = 0;
            try {
              resultPtr = await this.memory.newHeapCharPointer(code).consume((charHandle) => this.ffi.QTS_Eval_MaybeAsync(this.ctx.value, charHandle.value, filename, detectModule, flags));
            } catch (error) {
              (0, debug_1.debugLog)("QTS_Eval_MaybeAsync threw", error);
              throw error;
            }
            const errorPtr = this.ffi.QTS_ResolveException(this.ctx.value, resultPtr);
            if (errorPtr) {
              this.ffi.QTS_FreeValuePointer(this.ctx.value, resultPtr);
              return { error: this.memory.heapValueHandle(errorPtr) };
            }
            return { value: this.memory.heapValueHandle(resultPtr) };
          }
          newAsyncifiedFunction(name, fn) {
            return this.newFunction(name, fn);
          }
        }
        exports3.QuickJSAsyncContext = QuickJSAsyncContext;
      }, { "./context": 161, "./debug": 162, "./types": 182 }], 161: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSContext = void 0;
        const debug_1 = require2("./debug");
        const deferred_promise_1 = require2("./deferred-promise");
        const errors_1 = require2("./errors");
        const lifetime_1 = require2("./lifetime");
        const memory_1 = require2("./memory");
        const types_1 = require2("./types");
        class ContextMemory extends memory_1.ModuleMemory {
          constructor(args) {
            var _a;
            super(args.module);
            this.scope = new lifetime_1.Scope();
            this.copyJSValue = (ptr) => {
              return this.ffi.QTS_DupValuePointer(this.ctx.value, ptr);
            };
            this.freeJSValue = (ptr) => {
              this.ffi.QTS_FreeValuePointer(this.ctx.value, ptr);
            };
            (_a = args.ownedLifetimes) === null || _a === void 0 ? void 0 : _a.forEach((lifetime) => this.scope.manage(lifetime));
            this.owner = args.owner;
            this.module = args.module;
            this.ffi = args.ffi;
            this.rt = args.rt;
            this.ctx = this.scope.manage(args.ctx);
          }
          get alive() {
            return this.scope.alive;
          }
          dispose() {
            return this.scope.dispose();
          }
          manage(lifetime) {
            return this.scope.manage(lifetime);
          }
          consumeJSCharPointer(ptr) {
            const str = this.module.UTF8ToString(ptr);
            this.ffi.QTS_FreeCString(this.ctx.value, ptr);
            return str;
          }
          heapValueHandle(ptr) {
            return new lifetime_1.Lifetime(ptr, this.copyJSValue, this.freeJSValue, this.owner);
          }
        }
        class QuickJSContext {
          constructor(args) {
            this._undefined = void 0;
            this._null = void 0;
            this._false = void 0;
            this._true = void 0;
            this._global = void 0;
            this.fnNextId = 0;
            this.fnMap = /* @__PURE__ */ new Map();
            this.cToHostCallbacks = {
              callFunction: (ctx, this_ptr, argc, argv, fn_id) => {
                if (ctx !== this.ctx.value) {
                  throw new Error("QuickJSContext instance received C -> JS call with mismatched ctx");
                }
                const fn = this.fnMap.get(fn_id);
                if (!fn) {
                  throw new Error(`QuickJSContext had no callback with id ${fn_id}`);
                }
                return lifetime_1.Scope.withScopeMaybeAsync(this, function* (awaited, scope) {
                  const thisHandle = scope.manage(new lifetime_1.WeakLifetime(this_ptr, this.memory.copyJSValue, this.memory.freeJSValue, this.runtime));
                  const argHandles = new Array(argc);
                  for (let i = 0; i < argc; i++) {
                    const ptr = this.ffi.QTS_ArgvGetJSValueConstPointer(argv, i);
                    argHandles[i] = scope.manage(new lifetime_1.WeakLifetime(ptr, this.memory.copyJSValue, this.memory.freeJSValue, this.runtime));
                  }
                  try {
                    const result = yield* awaited(fn.apply(thisHandle, argHandles));
                    if (result) {
                      if ("error" in result && result.error) {
                        (0, debug_1.debugLog)("throw error", result.error);
                        throw result.error;
                      }
                      const handle = scope.manage(result instanceof lifetime_1.Lifetime ? result : result.value);
                      return this.ffi.QTS_DupValuePointer(this.ctx.value, handle.value);
                    }
                    return 0;
                  } catch (error) {
                    return this.errorToHandle(error).consume((errorHandle) => this.ffi.QTS_Throw(this.ctx.value, errorHandle.value));
                  }
                });
              }
            };
            this.runtime = args.runtime;
            this.module = args.module;
            this.ffi = args.ffi;
            this.rt = args.rt;
            this.ctx = args.ctx;
            this.memory = new ContextMemory(Object.assign(Object.assign({}, args), { owner: this.runtime }));
            args.callbacks.setContextCallbacks(this.ctx.value, this.cToHostCallbacks);
            this.dump = this.dump.bind(this);
            this.getString = this.getString.bind(this);
            this.getNumber = this.getNumber.bind(this);
            this.resolvePromise = this.resolvePromise.bind(this);
          }
          get alive() {
            return this.memory.alive;
          }
          dispose() {
            this.memory.dispose();
          }
          get undefined() {
            if (this._undefined) {
              return this._undefined;
            }
            const ptr = this.ffi.QTS_GetUndefined();
            return this._undefined = new lifetime_1.StaticLifetime(ptr);
          }
          get null() {
            if (this._null) {
              return this._null;
            }
            const ptr = this.ffi.QTS_GetNull();
            return this._null = new lifetime_1.StaticLifetime(ptr);
          }
          get true() {
            if (this._true) {
              return this._true;
            }
            const ptr = this.ffi.QTS_GetTrue();
            return this._true = new lifetime_1.StaticLifetime(ptr);
          }
          get false() {
            if (this._false) {
              return this._false;
            }
            const ptr = this.ffi.QTS_GetFalse();
            return this._false = new lifetime_1.StaticLifetime(ptr);
          }
          get global() {
            if (this._global) {
              return this._global;
            }
            const ptr = this.ffi.QTS_GetGlobalObject(this.ctx.value);
            this.memory.manage(this.memory.heapValueHandle(ptr));
            this._global = new lifetime_1.StaticLifetime(ptr, this.runtime);
            return this._global;
          }
          newNumber(num) {
            return this.memory.heapValueHandle(this.ffi.QTS_NewFloat64(this.ctx.value, num));
          }
          newString(str) {
            const ptr = this.memory.newHeapCharPointer(str).consume((charHandle) => this.ffi.QTS_NewString(this.ctx.value, charHandle.value));
            return this.memory.heapValueHandle(ptr);
          }
          newObject(prototype) {
            if (prototype) {
              this.runtime.assertOwned(prototype);
            }
            const ptr = prototype ? this.ffi.QTS_NewObjectProto(this.ctx.value, prototype.value) : this.ffi.QTS_NewObject(this.ctx.value);
            return this.memory.heapValueHandle(ptr);
          }
          newArray() {
            const ptr = this.ffi.QTS_NewArray(this.ctx.value);
            return this.memory.heapValueHandle(ptr);
          }
          newPromise(value) {
            const deferredPromise = lifetime_1.Scope.withScope((scope) => {
              const mutablePointerArray = scope.manage(this.memory.newMutablePointerArray(2));
              const promisePtr = this.ffi.QTS_NewPromiseCapability(this.ctx.value, mutablePointerArray.value.ptr);
              const promiseHandle = this.memory.heapValueHandle(promisePtr);
              const [resolveHandle, rejectHandle] = Array.from(mutablePointerArray.value.typedArray).map((jsvaluePtr) => this.memory.heapValueHandle(jsvaluePtr));
              return new deferred_promise_1.QuickJSDeferredPromise({
                context: this,
                promiseHandle,
                resolveHandle,
                rejectHandle
              });
            });
            if (value && typeof value === "function") {
              value = new Promise(value);
            }
            if (value) {
              Promise.resolve(value).then(deferredPromise.resolve, (error) => error instanceof lifetime_1.Lifetime ? deferredPromise.reject(error) : this.newError(error).consume(deferredPromise.reject));
            }
            return deferredPromise;
          }
          newFunction(name, fn) {
            const fnId = ++this.fnNextId;
            this.fnMap.set(fnId, fn);
            return this.memory.heapValueHandle(this.ffi.QTS_NewFunction(this.ctx.value, fnId, name));
          }
          newError(error) {
            const errorHandle = this.memory.heapValueHandle(this.ffi.QTS_NewError(this.ctx.value));
            if (error && typeof error === "object") {
              if (error.name !== void 0) {
                this.newString(error.name).consume((handle) => this.setProp(errorHandle, "name", handle));
              }
              if (error.message !== void 0) {
                this.newString(error.message).consume((handle) => this.setProp(errorHandle, "message", handle));
              }
            } else if (typeof error === "string") {
              this.newString(error).consume((handle) => this.setProp(errorHandle, "message", handle));
            } else if (error !== void 0) {
              this.newString(String(error)).consume((handle) => this.setProp(errorHandle, "message", handle));
            }
            return errorHandle;
          }
          typeof(handle) {
            this.runtime.assertOwned(handle);
            return this.memory.consumeHeapCharPointer(this.ffi.QTS_Typeof(this.ctx.value, handle.value));
          }
          getNumber(handle) {
            this.runtime.assertOwned(handle);
            return this.ffi.QTS_GetFloat64(this.ctx.value, handle.value);
          }
          getString(handle) {
            this.runtime.assertOwned(handle);
            return this.memory.consumeJSCharPointer(this.ffi.QTS_GetString(this.ctx.value, handle.value));
          }
          resolvePromise(promiseLikeHandle) {
            this.runtime.assertOwned(promiseLikeHandle);
            const vmResolveResult = lifetime_1.Scope.withScope((scope) => {
              const vmPromise = scope.manage(this.getProp(this.global, "Promise"));
              const vmPromiseResolve = scope.manage(this.getProp(vmPromise, "resolve"));
              return this.callFunction(vmPromiseResolve, vmPromise, promiseLikeHandle);
            });
            if (vmResolveResult.error) {
              return Promise.resolve(vmResolveResult);
            }
            return new Promise((resolve) => {
              lifetime_1.Scope.withScope((scope) => {
                const resolveHandle = scope.manage(this.newFunction("resolve", (value) => {
                  resolve({ value: value && value.dup() });
                }));
                const rejectHandle = scope.manage(this.newFunction("reject", (error) => {
                  resolve({ error: error && error.dup() });
                }));
                const promiseHandle = scope.manage(vmResolveResult.value);
                const promiseThenHandle = scope.manage(this.getProp(promiseHandle, "then"));
                this.unwrapResult(this.callFunction(promiseThenHandle, promiseHandle, resolveHandle, rejectHandle)).dispose();
              });
            });
          }
          getProp(handle, key) {
            this.runtime.assertOwned(handle);
            const ptr = this.borrowPropertyKey(key).consume((quickJSKey) => this.ffi.QTS_GetProp(this.ctx.value, handle.value, quickJSKey.value));
            const result = this.memory.heapValueHandle(ptr);
            return result;
          }
          setProp(handle, key, value) {
            this.runtime.assertOwned(handle);
            this.borrowPropertyKey(key).consume((quickJSKey) => this.ffi.QTS_SetProp(this.ctx.value, handle.value, quickJSKey.value, value.value));
          }
          defineProp(handle, key, descriptor) {
            this.runtime.assertOwned(handle);
            lifetime_1.Scope.withScope((scope) => {
              const quickJSKey = scope.manage(this.borrowPropertyKey(key));
              const value = descriptor.value || this.undefined;
              const configurable = Boolean(descriptor.configurable);
              const enumerable = Boolean(descriptor.enumerable);
              const hasValue = Boolean(descriptor.value);
              const get = descriptor.get ? scope.manage(this.newFunction(descriptor.get.name, descriptor.get)) : this.undefined;
              const set = descriptor.set ? scope.manage(this.newFunction(descriptor.set.name, descriptor.set)) : this.undefined;
              this.ffi.QTS_DefineProp(this.ctx.value, handle.value, quickJSKey.value, value.value, get.value, set.value, configurable, enumerable, hasValue);
            });
          }
          callFunction(func, thisVal, ...args) {
            this.runtime.assertOwned(func);
            const resultPtr = this.memory.toPointerArray(args).consume((argsArrayPtr) => this.ffi.QTS_Call(this.ctx.value, func.value, thisVal.value, args.length, argsArrayPtr.value));
            const errorPtr = this.ffi.QTS_ResolveException(this.ctx.value, resultPtr);
            if (errorPtr) {
              this.ffi.QTS_FreeValuePointer(this.ctx.value, resultPtr);
              return { error: this.memory.heapValueHandle(errorPtr) };
            }
            return { value: this.memory.heapValueHandle(resultPtr) };
          }
          evalCode(code, filename = "eval.js", options) {
            const detectModule = options === void 0 ? 1 : 0;
            const flags = (0, types_1.evalOptionsToFlags)(options);
            const resultPtr = this.memory.newHeapCharPointer(code).consume((charHandle) => this.ffi.QTS_Eval(this.ctx.value, charHandle.value, filename, detectModule, flags));
            const errorPtr = this.ffi.QTS_ResolveException(this.ctx.value, resultPtr);
            if (errorPtr) {
              this.ffi.QTS_FreeValuePointer(this.ctx.value, resultPtr);
              return { error: this.memory.heapValueHandle(errorPtr) };
            }
            return { value: this.memory.heapValueHandle(resultPtr) };
          }
          throw(error) {
            return this.errorToHandle(error).consume((handle) => this.ffi.QTS_Throw(this.ctx.value, handle.value));
          }
          borrowPropertyKey(key) {
            if (typeof key === "number") {
              return this.newNumber(key);
            }
            if (typeof key === "string") {
              return this.newString(key);
            }
            return new lifetime_1.StaticLifetime(key.value, this.runtime);
          }
          getMemory(rt) {
            if (rt === this.rt.value) {
              return this.memory;
            } else {
              throw new Error("Private API. Cannot get memory from a different runtime");
            }
          }
          dump(handle) {
            this.runtime.assertOwned(handle);
            const type = this.typeof(handle);
            if (type === "string") {
              return this.getString(handle);
            } else if (type === "number") {
              return this.getNumber(handle);
            } else if (type === "undefined") {
              return void 0;
            }
            const str = this.memory.consumeJSCharPointer(this.ffi.QTS_Dump(this.ctx.value, handle.value));
            try {
              return JSON.parse(str);
            } catch (err) {
              return str;
            }
          }
          unwrapResult(result) {
            if (result.error) {
              const context = "context" in result.error ? result.error.context : this;
              const cause = result.error.consume((error) => this.dump(error));
              if (cause && typeof cause === "object" && typeof cause.message === "string") {
                const { message, name, stack } = cause;
                const exception = new errors_1.QuickJSUnwrapError("");
                const hostStack = exception.stack;
                if (typeof name === "string") {
                  exception.name = cause.name;
                }
                if (typeof stack === "string") {
                  exception.stack = `${name}: ${message}
${cause.stack}Host: ${hostStack}`;
                }
                Object.assign(exception, { cause, context, message });
                throw exception;
              }
              throw new errors_1.QuickJSUnwrapError(cause, context);
            }
            return result.value;
          }
          errorToHandle(error) {
            if (error instanceof lifetime_1.Lifetime) {
              return error;
            }
            return this.newError(error);
          }
        }
        exports3.QuickJSContext = QuickJSContext;
      }, { "./debug": 162, "./deferred-promise": 163, "./errors": 164, "./lifetime": 174, "./memory": 175, "./types": 182 }], 162: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            "use strict";
            Object.defineProperty(exports3, "__esModule", { value: true });
            exports3.debugLog = exports3.QTS_DEBUG = void 0;
            exports3.QTS_DEBUG = Boolean(process.env.QTS_DEBUG);
            exports3.debugLog = exports3.QTS_DEBUG ? console.log.bind(console) : () => {
            };
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 151 }], 163: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSDeferredPromise = void 0;
        class QuickJSDeferredPromise {
          constructor(args) {
            this.resolve = (value) => {
              if (!this.resolveHandle.alive) {
                return;
              }
              this.context.unwrapResult(this.context.callFunction(this.resolveHandle, this.context.undefined, value || this.context.undefined)).dispose();
              this.disposeResolvers();
              this.onSettled();
            };
            this.reject = (value) => {
              if (!this.rejectHandle.alive) {
                return;
              }
              this.context.unwrapResult(this.context.callFunction(this.rejectHandle, this.context.undefined, value || this.context.undefined)).dispose();
              this.disposeResolvers();
              this.onSettled();
            };
            this.dispose = () => {
              if (this.handle.alive) {
                this.handle.dispose();
              }
              this.disposeResolvers();
            };
            this.context = args.context;
            this.owner = args.context.runtime;
            this.handle = args.promiseHandle;
            this.settled = new Promise((resolve) => {
              this.onSettled = resolve;
            });
            this.resolveHandle = args.resolveHandle;
            this.rejectHandle = args.rejectHandle;
          }
          get alive() {
            return this.handle.alive || this.resolveHandle.alive || this.rejectHandle.alive;
          }
          disposeResolvers() {
            if (this.resolveHandle.alive) {
              this.resolveHandle.dispose();
            }
            if (this.rejectHandle.alive) {
              this.rejectHandle.dispose();
            }
          }
        }
        exports3.QuickJSDeferredPromise = QuickJSDeferredPromise;
      }, {}], 164: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSMemoryLeakDetected = exports3.QuickJSAsyncifySuspended = exports3.QuickJSAsyncifyError = exports3.QuickJSNotImplemented = exports3.QuickJSUseAfterFree = exports3.QuickJSWrongOwner = exports3.QuickJSUnwrapError = void 0;
        class QuickJSUnwrapError extends Error {
          constructor(cause, context) {
            super(String(cause));
            this.cause = cause;
            this.context = context;
            this.name = "QuickJSUnwrapError";
          }
        }
        exports3.QuickJSUnwrapError = QuickJSUnwrapError;
        class QuickJSWrongOwner extends Error {
          constructor() {
            super(...arguments);
            this.name = "QuickJSWrongOwner";
          }
        }
        exports3.QuickJSWrongOwner = QuickJSWrongOwner;
        class QuickJSUseAfterFree extends Error {
          constructor() {
            super(...arguments);
            this.name = "QuickJSUseAfterFree";
          }
        }
        exports3.QuickJSUseAfterFree = QuickJSUseAfterFree;
        class QuickJSNotImplemented extends Error {
          constructor() {
            super(...arguments);
            this.name = "QuickJSNotImplemented";
          }
        }
        exports3.QuickJSNotImplemented = QuickJSNotImplemented;
        class QuickJSAsyncifyError extends Error {
          constructor() {
            super(...arguments);
            this.name = "QuickJSAsyncifyError";
          }
        }
        exports3.QuickJSAsyncifyError = QuickJSAsyncifyError;
        class QuickJSAsyncifySuspended extends Error {
          constructor() {
            super(...arguments);
            this.name = "QuickJSAsyncifySuspended";
          }
        }
        exports3.QuickJSAsyncifySuspended = QuickJSAsyncifySuspended;
        class QuickJSMemoryLeakDetected extends Error {
          constructor() {
            super(...arguments);
            this.name = "QuickJSMemoryLeakDetected";
          }
        }
        exports3.QuickJSMemoryLeakDetected = QuickJSMemoryLeakDetected;
      }, {}], 165: [function(require2, module3, exports3) {
        (function(process, Buffer2, __filename, __argument0, __argument1, __argument2, __argument3, __dirname) {
          (function() {
            "use strict";
            var QuickJSRaw = (() => {
              var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
              if (typeof __filename !== "undefined")
                _scriptDir = _scriptDir || __filename;
              return function(QuickJSRaw2) {
                QuickJSRaw2 = QuickJSRaw2 || {};
                var Module = typeof QuickJSRaw2 != "undefined" ? QuickJSRaw2 : {};
                var readyPromiseResolve, readyPromiseReject;
                Module["ready"] = new Promise(function(resolve, reject) {
                  readyPromiseResolve = resolve;
                  readyPromiseReject = reject;
                });
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Throw")) {
                  Object.defineProperty(Module["ready"], "_QTS_Throw", { configurable: true, get: function() {
                    abort("You are getting _QTS_Throw on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Throw", { configurable: true, set: function() {
                    abort("You are setting _QTS_Throw on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewError")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewError", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewError on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewError", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewError on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeSetMemoryLimit")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeSetMemoryLimit", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeSetMemoryLimit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeSetMemoryLimit", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeSetMemoryLimit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeComputeMemoryUsage")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeComputeMemoryUsage", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeComputeMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeComputeMemoryUsage", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeComputeMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeDumpMemoryUsage")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDumpMemoryUsage", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeDumpMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDumpMemoryUsage", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeDumpMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RecoverableLeakCheck")) {
                  Object.defineProperty(Module["ready"], "_QTS_RecoverableLeakCheck", { configurable: true, get: function() {
                    abort("You are getting _QTS_RecoverableLeakCheck on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RecoverableLeakCheck", { configurable: true, set: function() {
                    abort("You are setting _QTS_RecoverableLeakCheck on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_BuildIsSanitizeLeak")) {
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsSanitizeLeak", { configurable: true, get: function() {
                    abort("You are getting _QTS_BuildIsSanitizeLeak on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsSanitizeLeak", { configurable: true, set: function() {
                    abort("You are setting _QTS_BuildIsSanitizeLeak on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetUndefined")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetUndefined", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetUndefined on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetUndefined", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetUndefined on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetNull")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetNull", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetNull on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetNull", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetNull on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetFalse")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetFalse", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetFalse on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetFalse", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetFalse on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetTrue")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetTrue", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetTrue on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetTrue", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetTrue on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewRuntime")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewRuntime", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewRuntime", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeRuntime")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeRuntime", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeRuntime", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewContext")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewContext", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewContext", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeContext")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeContext", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeContext", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeValuePointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeValuePointerRuntime")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointerRuntime", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeValuePointerRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointerRuntime", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeValuePointerRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeVoidPointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeVoidPointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeVoidPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeVoidPointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeVoidPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeCString")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeCString", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeCString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeCString", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeCString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_DupValuePointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_DupValuePointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_DupValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_DupValuePointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_DupValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewObject")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewObject", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewObject", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewObjectProto")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewObjectProto", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewObjectProto on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewObjectProto", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewObjectProto on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewArray")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewArray", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewArray on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewArray", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewArray on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewFloat64")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewFloat64", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewFloat64", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetFloat64")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetFloat64", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetFloat64", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewString")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewString", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewString", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetString")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetString", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetString", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_IsJobPending")) {
                  Object.defineProperty(Module["ready"], "_QTS_IsJobPending", { configurable: true, get: function() {
                    abort("You are getting _QTS_IsJobPending on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_IsJobPending", { configurable: true, set: function() {
                    abort("You are setting _QTS_IsJobPending on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_ExecutePendingJob")) {
                  Object.defineProperty(Module["ready"], "_QTS_ExecutePendingJob", { configurable: true, get: function() {
                    abort("You are getting _QTS_ExecutePendingJob on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_ExecutePendingJob", { configurable: true, set: function() {
                    abort("You are setting _QTS_ExecutePendingJob on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetProp")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetProp", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetProp", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_SetProp")) {
                  Object.defineProperty(Module["ready"], "_QTS_SetProp", { configurable: true, get: function() {
                    abort("You are getting _QTS_SetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_SetProp", { configurable: true, set: function() {
                    abort("You are setting _QTS_SetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_DefineProp")) {
                  Object.defineProperty(Module["ready"], "_QTS_DefineProp", { configurable: true, get: function() {
                    abort("You are getting _QTS_DefineProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_DefineProp", { configurable: true, set: function() {
                    abort("You are setting _QTS_DefineProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Call")) {
                  Object.defineProperty(Module["ready"], "_QTS_Call", { configurable: true, get: function() {
                    abort("You are getting _QTS_Call on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Call", { configurable: true, set: function() {
                    abort("You are setting _QTS_Call on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_ResolveException")) {
                  Object.defineProperty(Module["ready"], "_QTS_ResolveException", { configurable: true, get: function() {
                    abort("You are getting _QTS_ResolveException on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_ResolveException", { configurable: true, set: function() {
                    abort("You are setting _QTS_ResolveException on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Dump")) {
                  Object.defineProperty(Module["ready"], "_QTS_Dump", { configurable: true, get: function() {
                    abort("You are getting _QTS_Dump on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Dump", { configurable: true, set: function() {
                    abort("You are setting _QTS_Dump on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Eval")) {
                  Object.defineProperty(Module["ready"], "_QTS_Eval", { configurable: true, get: function() {
                    abort("You are getting _QTS_Eval on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Eval", { configurable: true, set: function() {
                    abort("You are setting _QTS_Eval on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Typeof")) {
                  Object.defineProperty(Module["ready"], "_QTS_Typeof", { configurable: true, get: function() {
                    abort("You are getting _QTS_Typeof on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Typeof", { configurable: true, set: function() {
                    abort("You are setting _QTS_Typeof on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetGlobalObject")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetGlobalObject", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetGlobalObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetGlobalObject", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetGlobalObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewPromiseCapability")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewPromiseCapability", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewPromiseCapability on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewPromiseCapability", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewPromiseCapability on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_TestStringArg")) {
                  Object.defineProperty(Module["ready"], "_QTS_TestStringArg", { configurable: true, get: function() {
                    abort("You are getting _QTS_TestStringArg on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_TestStringArg", { configurable: true, set: function() {
                    abort("You are setting _QTS_TestStringArg on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_BuildIsDebug")) {
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsDebug", { configurable: true, get: function() {
                    abort("You are getting _QTS_BuildIsDebug on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsDebug", { configurable: true, set: function() {
                    abort("You are setting _QTS_BuildIsDebug on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_BuildIsAsyncify")) {
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsAsyncify", { configurable: true, get: function() {
                    abort("You are getting _QTS_BuildIsAsyncify on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsAsyncify", { configurable: true, set: function() {
                    abort("You are setting _QTS_BuildIsAsyncify on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewFunction")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewFunction", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewFunction on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewFunction", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewFunction on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_ArgvGetJSValueConstPointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_ArgvGetJSValueConstPointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_ArgvGetJSValueConstPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_ArgvGetJSValueConstPointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_ArgvGetJSValueConstPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeEnableInterruptHandler")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableInterruptHandler", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeEnableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableInterruptHandler", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeEnableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeDisableInterruptHandler")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableInterruptHandler", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeDisableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableInterruptHandler", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeDisableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeEnableModuleLoader")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableModuleLoader", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeEnableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableModuleLoader", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeEnableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeDisableModuleLoader")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableModuleLoader", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeDisableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableModuleLoader", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeDisableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_malloc")) {
                  Object.defineProperty(Module["ready"], "_malloc", { configurable: true, get: function() {
                    abort("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_malloc", { configurable: true, set: function() {
                    abort("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_free")) {
                  Object.defineProperty(Module["ready"], "_free", { configurable: true, get: function() {
                    abort("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_free", { configurable: true, set: function() {
                    abort("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "___stdio_exit")) {
                  Object.defineProperty(Module["ready"], "___stdio_exit", { configurable: true, get: function() {
                    abort("You are getting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "___stdio_exit", { configurable: true, set: function() {
                    abort("You are setting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "onRuntimeInitialized")) {
                  Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, get: function() {
                    abort("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, set: function() {
                    abort("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                var moduleOverrides = Object.assign({}, Module);
                var arguments_ = [];
                var thisProgram = "./this.program";
                var quit_ = (status, toThrow) => {
                  throw toThrow;
                };
                var ENVIRONMENT_IS_WEB = typeof window == "object";
                var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
                var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
                var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
                if (Module["ENVIRONMENT"]) {
                  throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
                }
                var scriptDirectory = "";
                function locateFile(path) {
                  if (Module["locateFile"]) {
                    return Module["locateFile"](path, scriptDirectory);
                  }
                  return scriptDirectory + path;
                }
                var read_, readAsync, readBinary, setWindowTitle;
                function logExceptionOnExit(e) {
                  if (e instanceof ExitStatus)
                    return;
                  let toLog = e;
                  if (e && typeof e == "object" && e.stack) {
                    toLog = [e, e.stack];
                  }
                  err("exiting due to exception: " + toLog);
                }
                var fs;
                var nodePath;
                var requireNodeFS;
                if (ENVIRONMENT_IS_NODE) {
                  if (!(typeof process == "object" && typeof require2 == "function"))
                    throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
                  if (ENVIRONMENT_IS_WORKER) {
                    scriptDirectory = require2("path").dirname(scriptDirectory) + "/";
                  } else {
                    scriptDirectory = __dirname + "/";
                  }
                  requireNodeFS = () => {
                    if (!nodePath) {
                      fs = require2("fs");
                      nodePath = require2("path");
                    }
                  };
                  read_ = function shell_read(filename, binary) {
                    requireNodeFS();
                    filename = nodePath["normalize"](filename);
                    return fs.readFileSync(filename, binary ? void 0 : "utf8");
                  };
                  readBinary = (filename) => {
                    var ret = read_(filename, true);
                    if (!ret.buffer) {
                      ret = new Uint8Array(ret);
                    }
                    assert(ret.buffer);
                    return ret;
                  };
                  readAsync = (filename, onload, onerror) => {
                    requireNodeFS();
                    filename = nodePath["normalize"](filename);
                    fs.readFile(filename, function(err2, data) {
                      if (err2)
                        onerror(err2);
                      else
                        onload(data.buffer);
                    });
                  };
                  if (process["argv"].length > 1) {
                    thisProgram = process["argv"][1].replace(/\\/g, "/");
                  }
                  arguments_ = process["argv"].slice(2);
                  process["on"]("unhandledRejection", function(reason) {
                    throw reason;
                  });
                  quit_ = (status, toThrow) => {
                    if (keepRuntimeAlive()) {
                      process["exitCode"] = status;
                      throw toThrow;
                    }
                    logExceptionOnExit(toThrow);
                    process["exit"](status);
                  };
                  Module["inspect"] = function() {
                    return "[Emscripten Module object]";
                  };
                } else if (ENVIRONMENT_IS_SHELL) {
                  if (typeof process == "object" && typeof require2 === "function" || typeof window == "object" || typeof importScripts == "function")
                    throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
                  if (typeof read != "undefined") {
                    read_ = function shell_read(f) {
                      return read(f);
                    };
                  }
                  readBinary = function readBinary2(f) {
                    let data;
                    if (typeof readbuffer == "function") {
                      return new Uint8Array(readbuffer(f));
                    }
                    data = read(f, "binary");
                    assert(typeof data == "object");
                    return data;
                  };
                  readAsync = function readAsync2(f, onload, onerror) {
                    setTimeout(() => onload(readBinary(f)), 0);
                  };
                  if (typeof scriptArgs != "undefined") {
                    arguments_ = scriptArgs;
                  } else if (typeof arguments != "undefined") {
                    arguments_ = arguments;
                  }
                  if (typeof quit == "function") {
                    quit_ = (status, toThrow) => {
                      if (runtimeKeepaliveCounter) {
                        throw toThrow;
                      }
                      logExceptionOnExit(toThrow);
                      quit(status);
                    };
                  }
                  if (typeof print != "undefined") {
                    if (typeof console == "undefined")
                      console = {};
                    console.log = print;
                    console.warn = console.error = typeof printErr != "undefined" ? printErr : print;
                  }
                } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
                  if (ENVIRONMENT_IS_WORKER) {
                    scriptDirectory = self.location.href;
                  } else if (typeof document != "undefined" && document.currentScript) {
                    scriptDirectory = document.currentScript.src;
                  }
                  if (_scriptDir) {
                    scriptDirectory = _scriptDir;
                  }
                  if (scriptDirectory.indexOf("blob:") !== 0) {
                    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
                  } else {
                    scriptDirectory = "";
                  }
                  if (!(typeof window == "object" || typeof importScripts == "function"))
                    throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
                  {
                    read_ = (url) => {
                      var xhr = new XMLHttpRequest();
                      xhr.open("GET", url, false);
                      xhr.send(null);
                      return xhr.responseText;
                    };
                    if (ENVIRONMENT_IS_WORKER) {
                      readBinary = (url) => {
                        var xhr = new XMLHttpRequest();
                        xhr.open("GET", url, false);
                        xhr.responseType = "arraybuffer";
                        xhr.send(null);
                        return new Uint8Array(xhr.response);
                      };
                    }
                    readAsync = (url, onload, onerror) => {
                      var xhr = new XMLHttpRequest();
                      xhr.open("GET", url, true);
                      xhr.responseType = "arraybuffer";
                      xhr.onload = () => {
                        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                          onload(xhr.response);
                          return;
                        }
                        onerror();
                      };
                      xhr.onerror = onerror;
                      xhr.send(null);
                    };
                  }
                  setWindowTitle = (title) => document.title = title;
                } else {
                  throw new Error("environment detection error");
                }
                var out = Module["print"] || console.log.bind(console);
                var err = Module["printErr"] || console.warn.bind(console);
                Object.assign(Module, moduleOverrides);
                moduleOverrides = null;
                checkIncomingModuleAPI();
                if (Module["arguments"])
                  arguments_ = Module["arguments"];
                legacyModuleProp("arguments", "arguments_");
                if (Module["thisProgram"])
                  thisProgram = Module["thisProgram"];
                legacyModuleProp("thisProgram", "thisProgram");
                if (Module["quit"])
                  quit_ = Module["quit"];
                legacyModuleProp("quit", "quit_");
                assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["read"] == "undefined", "Module.read option was removed (modify read_ in JS)");
                assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
                assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
                assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");
                assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
                legacyModuleProp("read", "read_");
                legacyModuleProp("readAsync", "readAsync");
                legacyModuleProp("readBinary", "readBinary");
                legacyModuleProp("setWindowTitle", "setWindowTitle");
                var IDBFS = "IDBFS is no longer included by default; build with -lidbfs.js";
                var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";
                var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";
                var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";
                assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");
                var STACK_ALIGN = 16;
                var POINTER_SIZE = 4;
                function getNativeTypeSize(type) {
                  switch (type) {
                    case "i1":
                    case "i8":
                      return 1;
                    case "i16":
                      return 2;
                    case "i32":
                      return 4;
                    case "i64":
                      return 8;
                    case "float":
                      return 4;
                    case "double":
                      return 8;
                    default: {
                      if (type[type.length - 1] === "*") {
                        return POINTER_SIZE;
                      } else if (type[0] === "i") {
                        const bits = Number(type.substr(1));
                        assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
                        return bits / 8;
                      } else {
                        return 0;
                      }
                    }
                  }
                }
                function warnOnce(text) {
                  if (!warnOnce.shown)
                    warnOnce.shown = {};
                  if (!warnOnce.shown[text]) {
                    warnOnce.shown[text] = 1;
                    err(text);
                  }
                }
                function convertJsFunctionToWasm(func, sig) {
                  if (typeof WebAssembly.Function == "function") {
                    var typeNames = {
                      "i": "i32",
                      "j": "i64",
                      "f": "f32",
                      "d": "f64"
                    };
                    var type = {
                      parameters: [],
                      results: sig[0] == "v" ? [] : [typeNames[sig[0]]]
                    };
                    for (var i = 1; i < sig.length; ++i) {
                      type.parameters.push(typeNames[sig[i]]);
                    }
                    return new WebAssembly.Function(type, func);
                  }
                  var typeSection = [
                    1,
                    0,
                    1,
                    96
                  ];
                  var sigRet = sig.slice(0, 1);
                  var sigParam = sig.slice(1);
                  var typeCodes = {
                    "i": 127,
                    "j": 126,
                    "f": 125,
                    "d": 124
                  };
                  typeSection.push(sigParam.length);
                  for (var i = 0; i < sigParam.length; ++i) {
                    typeSection.push(typeCodes[sigParam[i]]);
                  }
                  if (sigRet == "v") {
                    typeSection.push(0);
                  } else {
                    typeSection = typeSection.concat([1, typeCodes[sigRet]]);
                  }
                  typeSection[1] = typeSection.length - 2;
                  var bytes = new Uint8Array([
                    0,
                    97,
                    115,
                    109,
                    1,
                    0,
                    0,
                    0
                  ].concat(typeSection, [
                    2,
                    7,
                    1,
                    1,
                    101,
                    1,
                    102,
                    0,
                    0,
                    7,
                    5,
                    1,
                    1,
                    102,
                    0,
                    0
                  ]));
                  var module4 = new WebAssembly.Module(bytes);
                  var instance = new WebAssembly.Instance(module4, {
                    "e": {
                      "f": func
                    }
                  });
                  var wrappedFunc = instance.exports["f"];
                  return wrappedFunc;
                }
                var freeTableIndexes = [];
                var functionsInTableMap;
                function getEmptyTableSlot() {
                  if (freeTableIndexes.length) {
                    return freeTableIndexes.pop();
                  }
                  try {
                    wasmTable.grow(1);
                  } catch (err2) {
                    if (!(err2 instanceof RangeError)) {
                      throw err2;
                    }
                    throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
                  }
                  return wasmTable.length - 1;
                }
                function updateTableMap(offset, count) {
                  for (var i = offset; i < offset + count; i++) {
                    var item = getWasmTableEntry(i);
                    if (item) {
                      functionsInTableMap.set(item, i);
                    }
                  }
                }
                function addFunction(func, sig) {
                  assert(typeof func != "undefined");
                  if (!functionsInTableMap) {
                    functionsInTableMap = /* @__PURE__ */ new WeakMap();
                    updateTableMap(0, wasmTable.length);
                  }
                  if (functionsInTableMap.has(func)) {
                    return functionsInTableMap.get(func);
                  }
                  var ret = getEmptyTableSlot();
                  try {
                    setWasmTableEntry(ret, func);
                  } catch (err2) {
                    if (!(err2 instanceof TypeError)) {
                      throw err2;
                    }
                    assert(typeof sig != "undefined", "Missing signature argument to addFunction: " + func);
                    var wrapped = convertJsFunctionToWasm(func, sig);
                    setWasmTableEntry(ret, wrapped);
                  }
                  functionsInTableMap.set(func, ret);
                  return ret;
                }
                function removeFunction(index) {
                  functionsInTableMap.delete(getWasmTableEntry(index));
                  freeTableIndexes.push(index);
                }
                function legacyModuleProp(prop, newName) {
                  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
                    Object.defineProperty(Module, prop, {
                      configurable: true,
                      get: function() {
                        abort("Module." + prop + " has been replaced with plain " + newName + " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
                      }
                    });
                  }
                }
                function ignoredModuleProp(prop) {
                  if (Object.getOwnPropertyDescriptor(Module, prop)) {
                    abort("`Module." + prop + "` was supplied but `" + prop + "` not included in INCOMING_MODULE_JS_API");
                  }
                }
                function unexportedMessage(sym, isFSSybol) {
                  var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
                  if (isFSSybol) {
                    msg += ". Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you";
                  }
                  return msg;
                }
                function unexportedRuntimeSymbol(sym, isFSSybol) {
                  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
                    Object.defineProperty(Module, sym, {
                      configurable: true,
                      get: function() {
                        abort(unexportedMessage(sym, isFSSybol));
                      }
                    });
                  }
                }
                function unexportedRuntimeFunction(sym, isFSSybol) {
                  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
                    Module[sym] = () => abort(unexportedMessage(sym, isFSSybol));
                  }
                }
                var tempRet0 = 0;
                var setTempRet0 = (value) => {
                  tempRet0 = value;
                };
                var getTempRet0 = () => tempRet0;
                var wasmBinary;
                if (Module["wasmBinary"])
                  wasmBinary = Module["wasmBinary"];
                legacyModuleProp("wasmBinary", "wasmBinary");
                var noExitRuntime = Module["noExitRuntime"] || true;
                legacyModuleProp("noExitRuntime", "noExitRuntime");
                if (typeof WebAssembly != "object") {
                  abort("no native wasm support detected");
                }
                function setValue(ptr, value, type = "i8", noSafe) {
                  if (type.charAt(type.length - 1) === "*")
                    type = "i32";
                  switch (type) {
                    case "i1":
                      HEAP8[ptr >> 0] = value;
                      break;
                    case "i8":
                      HEAP8[ptr >> 0] = value;
                      break;
                    case "i16":
                      HEAP16[ptr >> 1] = value;
                      break;
                    case "i32":
                      HEAP32[ptr >> 2] = value;
                      break;
                    case "i64":
                      tempI64 = [value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
                      break;
                    case "float":
                      HEAPF32[ptr >> 2] = value;
                      break;
                    case "double":
                      HEAPF64[ptr >> 3] = value;
                      break;
                    default:
                      abort("invalid type for setValue: " + type);
                  }
                }
                function getValue(ptr, type = "i8", noSafe) {
                  if (type.charAt(type.length - 1) === "*")
                    type = "i32";
                  switch (type) {
                    case "i1":
                      return HEAP8[ptr >> 0];
                    case "i8":
                      return HEAP8[ptr >> 0];
                    case "i16":
                      return HEAP16[ptr >> 1];
                    case "i32":
                      return HEAP32[ptr >> 2];
                    case "i64":
                      return HEAP32[ptr >> 2];
                    case "float":
                      return HEAPF32[ptr >> 2];
                    case "double":
                      return Number(HEAPF64[ptr >> 3]);
                    default:
                      abort("invalid type for getValue: " + type);
                  }
                  return null;
                }
                var wasmMemory;
                var ABORT = false;
                var EXITSTATUS;
                function assert(condition, text) {
                  if (!condition) {
                    abort("Assertion failed" + (text ? ": " + text : ""));
                  }
                }
                function getCFunc(ident) {
                  var func = Module["_" + ident];
                  assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
                  return func;
                }
                function ccall(ident, returnType, argTypes, args, opts) {
                  var toC = {
                    "string": function(str) {
                      var ret2 = 0;
                      if (str !== null && str !== void 0 && str !== 0) {
                        var len = (str.length << 2) + 1;
                        ret2 = stackAlloc(len);
                        stringToUTF8(str, ret2, len);
                      }
                      return ret2;
                    },
                    "array": function(arr) {
                      var ret2 = stackAlloc(arr.length);
                      writeArrayToMemory(arr, ret2);
                      return ret2;
                    }
                  };
                  function convertReturnValue(ret2) {
                    if (returnType === "string")
                      return UTF8ToString(ret2);
                    if (returnType === "boolean")
                      return Boolean(ret2);
                    return ret2;
                  }
                  var func = getCFunc(ident);
                  var cArgs = [];
                  var stack = 0;
                  assert(returnType !== "array", 'Return type should not be "array".');
                  if (args) {
                    for (var i = 0; i < args.length; i++) {
                      var converter = toC[argTypes[i]];
                      if (converter) {
                        if (stack === 0)
                          stack = stackSave();
                        cArgs[i] = converter(args[i]);
                      } else {
                        cArgs[i] = args[i];
                      }
                    }
                  }
                  var previousAsync = Asyncify.currData;
                  var ret = func.apply(null, cArgs);
                  function onDone(ret2) {
                    runtimeKeepalivePop();
                    if (stack !== 0)
                      stackRestore(stack);
                    return convertReturnValue(ret2);
                  }
                  runtimeKeepalivePush();
                  var asyncMode = opts && opts.async;
                  if (Asyncify.currData != previousAsync) {
                    assert(!(previousAsync && Asyncify.currData), "We cannot start an async operation when one is already flight");
                    assert(!(previousAsync && !Asyncify.currData), "We cannot stop an async operation in flight");
                    assert(asyncMode, "The call to " + ident + " is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.");
                    return Asyncify.whenDone().then(onDone);
                  }
                  ret = onDone(ret);
                  if (asyncMode)
                    return Promise.resolve(ret);
                  return ret;
                }
                function cwrap(ident, returnType, argTypes, opts) {
                  return function() {
                    return ccall(ident, returnType, argTypes, arguments, opts);
                  };
                }
                var ALLOC_NORMAL = 0;
                var ALLOC_STACK = 1;
                function allocate(slab, allocator) {
                  var ret;
                  assert(typeof allocator == "number", "allocate no longer takes a type argument");
                  assert(typeof slab != "number", "allocate no longer takes a number as arg0");
                  if (allocator == ALLOC_STACK) {
                    ret = stackAlloc(slab.length);
                  } else {
                    ret = _malloc(slab.length);
                  }
                  if (!slab.subarray && !slab.slice) {
                    slab = new Uint8Array(slab);
                  }
                  HEAPU8.set(slab, ret);
                  return ret;
                }
                var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
                function UTF8ArrayToString(heap, idx, maxBytesToRead) {
                  var endIdx = idx + maxBytesToRead;
                  var endPtr = idx;
                  while (heap[endPtr] && !(endPtr >= endIdx))
                    ++endPtr;
                  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
                    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
                  } else {
                    var str = "";
                    while (idx < endPtr) {
                      var u0 = heap[idx++];
                      if (!(u0 & 128)) {
                        str += String.fromCharCode(u0);
                        continue;
                      }
                      var u1 = heap[idx++] & 63;
                      if ((u0 & 224) == 192) {
                        str += String.fromCharCode((u0 & 31) << 6 | u1);
                        continue;
                      }
                      var u2 = heap[idx++] & 63;
                      if ((u0 & 240) == 224) {
                        u0 = (u0 & 15) << 12 | u1 << 6 | u2;
                      } else {
                        if ((u0 & 248) != 240)
                          warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
                        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
                      }
                      if (u0 < 65536) {
                        str += String.fromCharCode(u0);
                      } else {
                        var ch = u0 - 65536;
                        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                      }
                    }
                  }
                  return str;
                }
                function UTF8ToString(ptr, maxBytesToRead) {
                  ;
                  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
                }
                function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
                  if (!(maxBytesToWrite > 0))
                    return 0;
                  var startIdx = outIdx;
                  var endIdx = outIdx + maxBytesToWrite - 1;
                  for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 55296 && u <= 57343) {
                      var u1 = str.charCodeAt(++i);
                      u = 65536 + ((u & 1023) << 10) | u1 & 1023;
                    }
                    if (u <= 127) {
                      if (outIdx >= endIdx)
                        break;
                      heap[outIdx++] = u;
                    } else if (u <= 2047) {
                      if (outIdx + 1 >= endIdx)
                        break;
                      heap[outIdx++] = 192 | u >> 6;
                      heap[outIdx++] = 128 | u & 63;
                    } else if (u <= 65535) {
                      if (outIdx + 2 >= endIdx)
                        break;
                      heap[outIdx++] = 224 | u >> 12;
                      heap[outIdx++] = 128 | u >> 6 & 63;
                      heap[outIdx++] = 128 | u & 63;
                    } else {
                      if (outIdx + 3 >= endIdx)
                        break;
                      if (u > 1114111)
                        warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
                      heap[outIdx++] = 240 | u >> 18;
                      heap[outIdx++] = 128 | u >> 12 & 63;
                      heap[outIdx++] = 128 | u >> 6 & 63;
                      heap[outIdx++] = 128 | u & 63;
                    }
                  }
                  heap[outIdx] = 0;
                  return outIdx - startIdx;
                }
                function stringToUTF8(str, outPtr, maxBytesToWrite) {
                  assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
                  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
                }
                function lengthBytesUTF8(str) {
                  var len = 0;
                  for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 55296 && u <= 57343)
                      u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
                    if (u <= 127)
                      ++len;
                    else if (u <= 2047)
                      len += 2;
                    else if (u <= 65535)
                      len += 3;
                    else
                      len += 4;
                  }
                  return len;
                }
                function AsciiToString(ptr) {
                  var str = "";
                  while (1) {
                    var ch = HEAPU8[ptr++ >> 0];
                    if (!ch)
                      return str;
                    str += String.fromCharCode(ch);
                  }
                }
                function stringToAscii(str, outPtr) {
                  return writeAsciiToMemory(str, outPtr, false);
                }
                var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : void 0;
                function UTF16ToString(ptr, maxBytesToRead) {
                  assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
                  var endPtr = ptr;
                  var idx = endPtr >> 1;
                  var maxIdx = idx + maxBytesToRead / 2;
                  while (!(idx >= maxIdx) && HEAPU16[idx])
                    ++idx;
                  endPtr = idx << 1;
                  if (endPtr - ptr > 32 && UTF16Decoder) {
                    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
                  } else {
                    var str = "";
                    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
                      var codeUnit = HEAP16[ptr + i * 2 >> 1];
                      if (codeUnit == 0)
                        break;
                      str += String.fromCharCode(codeUnit);
                    }
                    return str;
                  }
                }
                function stringToUTF16(str, outPtr, maxBytesToWrite) {
                  assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
                  assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
                  if (maxBytesToWrite === void 0) {
                    maxBytesToWrite = 2147483647;
                  }
                  if (maxBytesToWrite < 2)
                    return 0;
                  maxBytesToWrite -= 2;
                  var startPtr = outPtr;
                  var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
                  for (var i = 0; i < numCharsToWrite; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    HEAP16[outPtr >> 1] = codeUnit;
                    outPtr += 2;
                  }
                  HEAP16[outPtr >> 1] = 0;
                  return outPtr - startPtr;
                }
                function lengthBytesUTF16(str) {
                  return str.length * 2;
                }
                function UTF32ToString(ptr, maxBytesToRead) {
                  assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
                  var i = 0;
                  var str = "";
                  while (!(i >= maxBytesToRead / 4)) {
                    var utf32 = HEAP32[ptr + i * 4 >> 2];
                    if (utf32 == 0)
                      break;
                    ++i;
                    if (utf32 >= 65536) {
                      var ch = utf32 - 65536;
                      str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                    } else {
                      str += String.fromCharCode(utf32);
                    }
                  }
                  return str;
                }
                function stringToUTF32(str, outPtr, maxBytesToWrite) {
                  assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
                  assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
                  if (maxBytesToWrite === void 0) {
                    maxBytesToWrite = 2147483647;
                  }
                  if (maxBytesToWrite < 4)
                    return 0;
                  var startPtr = outPtr;
                  var endPtr = startPtr + maxBytesToWrite - 4;
                  for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 55296 && codeUnit <= 57343) {
                      var trailSurrogate = str.charCodeAt(++i);
                      codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
                    }
                    HEAP32[outPtr >> 2] = codeUnit;
                    outPtr += 4;
                    if (outPtr + 4 > endPtr)
                      break;
                  }
                  HEAP32[outPtr >> 2] = 0;
                  return outPtr - startPtr;
                }
                function lengthBytesUTF32(str) {
                  var len = 0;
                  for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 55296 && codeUnit <= 57343)
                      ++i;
                    len += 4;
                  }
                  return len;
                }
                function allocateUTF8(str) {
                  var size = lengthBytesUTF8(str) + 1;
                  var ret = _malloc(size);
                  if (ret)
                    stringToUTF8Array(str, HEAP8, ret, size);
                  return ret;
                }
                function allocateUTF8OnStack(str) {
                  var size = lengthBytesUTF8(str) + 1;
                  var ret = stackAlloc(size);
                  stringToUTF8Array(str, HEAP8, ret, size);
                  return ret;
                }
                function writeStringToMemory(string, buffer2, dontAddNull) {
                  warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
                  var lastChar, end;
                  if (dontAddNull) {
                    end = buffer2 + lengthBytesUTF8(string);
                    lastChar = HEAP8[end];
                  }
                  stringToUTF8(string, buffer2, Infinity);
                  if (dontAddNull)
                    HEAP8[end] = lastChar;
                }
                function writeArrayToMemory(array, buffer2) {
                  assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
                  HEAP8.set(array, buffer2);
                }
                function writeAsciiToMemory(str, buffer2, dontAddNull) {
                  for (var i = 0; i < str.length; ++i) {
                    assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));
                    HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
                  }
                  if (!dontAddNull)
                    HEAP8[buffer2 >> 0] = 0;
                }
                var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
                function updateGlobalBufferAndViews(buf) {
                  buffer = buf;
                  Module["HEAP8"] = HEAP8 = new Int8Array(buf);
                  Module["HEAP16"] = HEAP16 = new Int16Array(buf);
                  Module["HEAP32"] = HEAP32 = new Int32Array(buf);
                  Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
                  Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
                  Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
                  Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
                  Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
                }
                var TOTAL_STACK = 5242880;
                if (Module["TOTAL_STACK"])
                  assert(TOTAL_STACK === Module["TOTAL_STACK"], "the stack size can no longer be determined at runtime");
                var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
                legacyModuleProp("INITIAL_MEMORY", "INITIAL_MEMORY");
                assert(INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
                assert(typeof Int32Array != "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray != void 0 && Int32Array.prototype.set != void 0, "JS engine does not provide full typed array support");
                assert(!Module["wasmMemory"], "Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally");
                assert(INITIAL_MEMORY == 16777216, "Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically");
                var wasmTable;
                function writeStackCookie() {
                  var max = _emscripten_stack_get_end();
                  assert((max & 3) == 0);
                  HEAP32[max >> 2] = 34821223;
                  HEAP32[max + 4 >> 2] = 2310721022;
                  HEAP32[0] = 1668509029;
                }
                function checkStackCookie() {
                  if (ABORT)
                    return;
                  var max = _emscripten_stack_get_end();
                  var cookie1 = HEAPU32[max >> 2];
                  var cookie2 = HEAPU32[max + 4 >> 2];
                  if (cookie1 != 34821223 || cookie2 != 2310721022) {
                    abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " 0x" + cookie1.toString(16));
                  }
                  if (HEAP32[0] !== 1668509029)
                    abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
                }
                (function() {
                  var h16 = new Int16Array(1);
                  var h8 = new Int8Array(h16.buffer);
                  h16[0] = 25459;
                  if (h8[0] !== 115 || h8[1] !== 99)
                    throw "Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)";
                })();
                var __ATPRERUN__ = [];
                var __ATINIT__ = [];
                var __ATEXIT__ = [];
                var __ATPOSTRUN__ = [];
                var runtimeInitialized = false;
                var runtimeExited = false;
                var runtimeKeepaliveCounter = 0;
                function keepRuntimeAlive() {
                  return noExitRuntime || runtimeKeepaliveCounter > 0;
                }
                function preRun() {
                  if (Module["preRun"]) {
                    if (typeof Module["preRun"] == "function")
                      Module["preRun"] = [Module["preRun"]];
                    while (Module["preRun"].length) {
                      addOnPreRun(Module["preRun"].shift());
                    }
                  }
                  callRuntimeCallbacks(__ATPRERUN__);
                }
                function initRuntime() {
                  checkStackCookie();
                  assert(!runtimeInitialized);
                  runtimeInitialized = true;
                  if (!Module["noFSInit"] && !FS.init.initialized)
                    FS.init();
                  FS.ignorePermissions = false;
                  TTY.init();
                  callRuntimeCallbacks(__ATINIT__);
                }
                function exitRuntime() {
                  Asyncify.state = Asyncify.State.Disabled;
                  checkStackCookie();
                  runtimeExited = true;
                }
                function postRun() {
                  checkStackCookie();
                  if (Module["postRun"]) {
                    if (typeof Module["postRun"] == "function")
                      Module["postRun"] = [Module["postRun"]];
                    while (Module["postRun"].length) {
                      addOnPostRun(Module["postRun"].shift());
                    }
                  }
                  callRuntimeCallbacks(__ATPOSTRUN__);
                }
                function addOnPreRun(cb) {
                  __ATPRERUN__.unshift(cb);
                }
                function addOnInit(cb) {
                  __ATINIT__.unshift(cb);
                }
                function addOnExit(cb) {
                }
                function addOnPostRun(cb) {
                  __ATPOSTRUN__.unshift(cb);
                }
                assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                var runDependencies = 0;
                var runDependencyWatcher = null;
                var dependenciesFulfilled = null;
                var runDependencyTracking = {};
                function getUniqueRunDependency(id) {
                  var orig = id;
                  while (1) {
                    if (!runDependencyTracking[id])
                      return id;
                    id = orig + Math.random();
                  }
                }
                function addRunDependency(id) {
                  runDependencies++;
                  if (Module["monitorRunDependencies"]) {
                    Module["monitorRunDependencies"](runDependencies);
                  }
                  if (id) {
                    assert(!runDependencyTracking[id]);
                    runDependencyTracking[id] = 1;
                    if (runDependencyWatcher === null && typeof setInterval != "undefined") {
                      runDependencyWatcher = setInterval(function() {
                        if (ABORT) {
                          clearInterval(runDependencyWatcher);
                          runDependencyWatcher = null;
                          return;
                        }
                        var shown = false;
                        for (var dep in runDependencyTracking) {
                          if (!shown) {
                            shown = true;
                            err("still waiting on run dependencies:");
                          }
                          err("dependency: " + dep);
                        }
                        if (shown) {
                          err("(end of list)");
                        }
                      }, 1e4);
                    }
                  } else {
                    err("warning: run dependency added without ID");
                  }
                }
                function removeRunDependency(id) {
                  runDependencies--;
                  if (Module["monitorRunDependencies"]) {
                    Module["monitorRunDependencies"](runDependencies);
                  }
                  if (id) {
                    assert(runDependencyTracking[id]);
                    delete runDependencyTracking[id];
                  } else {
                    err("warning: run dependency removed without ID");
                  }
                  if (runDependencies == 0) {
                    if (runDependencyWatcher !== null) {
                      clearInterval(runDependencyWatcher);
                      runDependencyWatcher = null;
                    }
                    if (dependenciesFulfilled) {
                      var callback = dependenciesFulfilled;
                      dependenciesFulfilled = null;
                      callback();
                    }
                  }
                }
                Module["preloadedImages"] = {};
                Module["preloadedAudios"] = {};
                function abort(what) {
                  {
                    if (Module["onAbort"]) {
                      Module["onAbort"](what);
                    }
                  }
                  what = "Aborted(" + what + ")";
                  err(what);
                  ABORT = true;
                  EXITSTATUS = 1;
                  var e = new WebAssembly.RuntimeError(what);
                  readyPromiseReject(e);
                  throw e;
                }
                var dataURIPrefix = "data:application/octet-stream;base64,";
                function isDataURI(filename) {
                  return filename.startsWith(dataURIPrefix);
                }
                function isFileURI(filename) {
                  return filename.startsWith("file://");
                }
                function createExportWrapper(name, fixedasm) {
                  return function() {
                    var displayName = name;
                    var asm2 = fixedasm;
                    if (!fixedasm) {
                      asm2 = Module["asm"];
                    }
                    assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
                    assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
                    if (!asm2[name]) {
                      assert(asm2[name], "exported native function `" + displayName + "` not found");
                    }
                    return asm2[name].apply(null, arguments);
                  };
                }
                var wasmBinaryFile;
                wasmBinaryFile = "emscripten-module.WASM_DEBUG_ASYNCIFY.wasm";
                if (!isDataURI(wasmBinaryFile)) {
                  wasmBinaryFile = locateFile(wasmBinaryFile);
                }
                function getBinary(file) {
                  try {
                    if (file == wasmBinaryFile && wasmBinary) {
                      return new Uint8Array(wasmBinary);
                    }
                    if (readBinary) {
                      return readBinary(file);
                    } else {
                      throw "both async and sync fetching of the wasm failed";
                    }
                  } catch (err2) {
                    abort(err2);
                  }
                }
                function getBinaryPromise() {
                  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
                    if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) {
                      return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                        if (!response["ok"]) {
                          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                        }
                        return response["arrayBuffer"]();
                      }).catch(function() {
                        return getBinary(wasmBinaryFile);
                      });
                    } else {
                      if (readAsync) {
                        return new Promise(function(resolve, reject) {
                          readAsync(wasmBinaryFile, function(response) {
                            resolve(new Uint8Array(response));
                          }, reject);
                        });
                      }
                    }
                  }
                  return Promise.resolve().then(function() {
                    return getBinary(wasmBinaryFile);
                  });
                }
                function createWasm() {
                  var info = {
                    "env": asmLibraryArg,
                    "wasi_snapshot_preview1": asmLibraryArg
                  };
                  function receiveInstance(instance, module4) {
                    var exports5 = instance.exports;
                    exports5 = Asyncify.instrumentWasmExports(exports5);
                    Module["asm"] = exports5;
                    wasmMemory = Module["asm"]["memory"];
                    assert(wasmMemory, "memory not found in wasm exports");
                    updateGlobalBufferAndViews(wasmMemory.buffer);
                    wasmTable = Module["asm"]["__indirect_function_table"];
                    assert(wasmTable, "table not found in wasm exports");
                    addOnInit(Module["asm"]["__wasm_call_ctors"]);
                    removeRunDependency("wasm-instantiate");
                  }
                  addRunDependency("wasm-instantiate");
                  var trueModule = Module;
                  function receiveInstantiationResult(result) {
                    assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
                    trueModule = null;
                    receiveInstance(result["instance"]);
                  }
                  function instantiateArrayBuffer(receiver) {
                    return getBinaryPromise().then(function(binary) {
                      return WebAssembly.instantiate(binary, info);
                    }).then(function(instance) {
                      return instance;
                    }).then(receiver, function(reason) {
                      err("failed to asynchronously prepare wasm: " + reason);
                      if (isFileURI(wasmBinaryFile)) {
                        err("warning: Loading from a file URI (" + wasmBinaryFile + ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing");
                      }
                      abort(reason);
                    });
                  }
                  function instantiateAsync() {
                    if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch == "function") {
                      return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                        var result = WebAssembly.instantiateStreaming(response, info);
                        return result.then(receiveInstantiationResult, function(reason) {
                          err("wasm streaming compile failed: " + reason);
                          err("falling back to ArrayBuffer instantiation");
                          return instantiateArrayBuffer(receiveInstantiationResult);
                        });
                      });
                    } else {
                      return instantiateArrayBuffer(receiveInstantiationResult);
                    }
                  }
                  if (Module["instantiateWasm"]) {
                    try {
                      var exports4 = Module["instantiateWasm"](info, receiveInstance);
                      exports4 = Asyncify.instrumentWasmExports(exports4);
                      return exports4;
                    } catch (e) {
                      err("Module.instantiateWasm callback failed with error: " + e);
                      return false;
                    }
                  }
                  instantiateAsync().catch(readyPromiseReject);
                  return {};
                }
                var tempDouble;
                var tempI64;
                var ASM_CONSTS = {};
                function qts_host_call_function(ctx, this_ptr, argc, argv, magic_func_id) {
                  const asyncify = { ["handleSleep"]: Asyncify.handleSleep };
                  return Module["callbacks"]["callFunction"](asyncify, ctx, this_ptr, argc, argv, magic_func_id);
                }
                function qts_host_interrupt_handler(rt) {
                  const asyncify = void 0;
                  return Module["callbacks"]["shouldInterrupt"](asyncify, rt);
                }
                function qts_host_load_module_source(rt, ctx, module_name) {
                  const asyncify = { ["handleSleep"]: Asyncify.handleSleep };
                  const moduleNameString = UTF8ToString(module_name);
                  return Module["callbacks"]["loadModuleSource"](asyncify, rt, ctx, moduleNameString);
                }
                function qts_host_normalize_module(rt, ctx, module_base_name, module_name) {
                  const asyncify = { ["handleSleep"]: Asyncify.handleSleep };
                  const moduleBaseNameString = UTF8ToString(module_base_name);
                  const moduleNameString = UTF8ToString(module_name);
                  return Module["callbacks"]["normalizeModule"](asyncify, rt, ctx, moduleBaseNameString, moduleNameString);
                }
                function callRuntimeCallbacks(callbacks) {
                  while (callbacks.length > 0) {
                    var callback = callbacks.shift();
                    if (typeof callback == "function") {
                      callback(Module);
                      continue;
                    }
                    var func = callback.func;
                    if (typeof func == "number") {
                      if (callback.arg === void 0) {
                        (function() {
                          throw 'Internal Error! Attempted to invoke wasm function pointer with signature "v", but no such functions have gotten exported!';
                        })();
                      } else {
                        (function(a1) {
                          throw 'Internal Error! Attempted to invoke wasm function pointer with signature "vi", but no such functions have gotten exported!';
                        })(callback.arg);
                      }
                    } else {
                      func(callback.arg === void 0 ? null : callback.arg);
                    }
                  }
                }
                function withStackSave(f) {
                  var stack = stackSave();
                  var ret = f();
                  stackRestore(stack);
                  return ret;
                }
                function demangle(func) {
                  warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
                  return func;
                }
                function demangleAll(text) {
                  var regex = /\b_Z[\w\d_]+/g;
                  return text.replace(regex, function(x) {
                    var y = demangle(x);
                    return x === y ? x : y + " [" + x + "]";
                  });
                }
                var wasmTableMirror = [];
                function getWasmTableEntry(funcPtr) {
                  var func = wasmTableMirror[funcPtr];
                  if (!func) {
                    if (funcPtr >= wasmTableMirror.length)
                      wasmTableMirror.length = funcPtr + 1;
                    wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
                  }
                  assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
                  return func;
                }
                function handleException(e) {
                  if (e instanceof ExitStatus || e == "unwind") {
                    return EXITSTATUS;
                  }
                  quit_(1, e);
                }
                function jsStackTrace() {
                  var error = new Error();
                  if (!error.stack) {
                    try {
                      throw new Error();
                    } catch (e) {
                      error = e;
                    }
                    if (!error.stack) {
                      return "(no stack trace available)";
                    }
                  }
                  return error.stack.toString();
                }
                function setWasmTableEntry(idx, func) {
                  wasmTable.set(idx, func);
                  wasmTableMirror[idx] = func;
                }
                function stackTrace() {
                  var js = jsStackTrace();
                  if (Module["extraStackTrace"])
                    js += "\n" + Module["extraStackTrace"]();
                  return demangleAll(js);
                }
                function ___assert_fail(condition, filename, line, func) {
                  abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
                }
                function __localtime_js(time, tmPtr) {
                  var date = new Date(HEAP32[time >> 2] * 1e3);
                  HEAP32[tmPtr >> 2] = date.getSeconds();
                  HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
                  HEAP32[tmPtr + 8 >> 2] = date.getHours();
                  HEAP32[tmPtr + 12 >> 2] = date.getDate();
                  HEAP32[tmPtr + 16 >> 2] = date.getMonth();
                  HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
                  HEAP32[tmPtr + 24 >> 2] = date.getDay();
                  var start = new Date(date.getFullYear(), 0, 1);
                  var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
                  HEAP32[tmPtr + 28 >> 2] = yday;
                  HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
                  var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
                  var winterOffset = start.getTimezoneOffset();
                  var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
                  HEAP32[tmPtr + 32 >> 2] = dst;
                }
                function _tzset_impl(timezone, daylight, tzname) {
                  var currentYear = new Date().getFullYear();
                  var winter = new Date(currentYear, 0, 1);
                  var summer = new Date(currentYear, 6, 1);
                  var winterOffset = winter.getTimezoneOffset();
                  var summerOffset = summer.getTimezoneOffset();
                  var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
                  HEAP32[timezone >> 2] = stdTimezoneOffset * 60;
                  HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);
                  function extractZone(date) {
                    var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                    return match ? match[1] : "GMT";
                  }
                  ;
                  var winterName = extractZone(winter);
                  var summerName = extractZone(summer);
                  var winterNamePtr = allocateUTF8(winterName);
                  var summerNamePtr = allocateUTF8(summerName);
                  if (summerOffset < winterOffset) {
                    HEAP32[tzname >> 2] = winterNamePtr;
                    HEAP32[tzname + 4 >> 2] = summerNamePtr;
                  } else {
                    HEAP32[tzname >> 2] = summerNamePtr;
                    HEAP32[tzname + 4 >> 2] = winterNamePtr;
                  }
                }
                function __tzset_js(timezone, daylight, tzname) {
                  if (__tzset_js.called)
                    return;
                  __tzset_js.called = true;
                  _tzset_impl(timezone, daylight, tzname);
                }
                function _abort() {
                  abort("native code called abort()");
                }
                function _emscripten_memcpy_big(dest, src, num) {
                  HEAPU8.copyWithin(dest, src, src + num);
                }
                function _emscripten_get_heap_max() {
                  return 2147483648;
                }
                function emscripten_realloc_buffer(size) {
                  try {
                    wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
                    updateGlobalBufferAndViews(wasmMemory.buffer);
                    return 1;
                  } catch (e) {
                    err("emscripten_realloc_buffer: Attempted to grow heap from " + buffer.byteLength + " bytes to " + size + " bytes, but got error: " + e);
                  }
                }
                function _emscripten_resize_heap(requestedSize) {
                  var oldSize = HEAPU8.length;
                  requestedSize = requestedSize >>> 0;
                  assert(requestedSize > oldSize);
                  var maxHeapSize = _emscripten_get_heap_max();
                  if (requestedSize > maxHeapSize) {
                    err("Cannot enlarge memory, asked to go up to " + requestedSize + " bytes, but the limit is " + maxHeapSize + " bytes!");
                    return false;
                  }
                  let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
                  for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
                    var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
                    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
                    var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
                    var replacement = emscripten_realloc_buffer(newSize);
                    if (replacement) {
                      return true;
                    }
                  }
                  err("Failed to grow the heap from " + oldSize + " bytes to " + newSize + " bytes, not enough memory!");
                  return false;
                }
                var PATH = { splitPath: function(filename) {
                  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                  return splitPathRe.exec(filename).slice(1);
                }, normalizeArray: function(parts, allowAboveRoot) {
                  var up = 0;
                  for (var i = parts.length - 1; i >= 0; i--) {
                    var last = parts[i];
                    if (last === ".") {
                      parts.splice(i, 1);
                    } else if (last === "..") {
                      parts.splice(i, 1);
                      up++;
                    } else if (up) {
                      parts.splice(i, 1);
                      up--;
                    }
                  }
                  if (allowAboveRoot) {
                    for (; up; up--) {
                      parts.unshift("..");
                    }
                  }
                  return parts;
                }, normalize: function(path) {
                  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
                  path = PATH.normalizeArray(path.split("/").filter(function(p) {
                    return !!p;
                  }), !isAbsolute).join("/");
                  if (!path && !isAbsolute) {
                    path = ".";
                  }
                  if (path && trailingSlash) {
                    path += "/";
                  }
                  return (isAbsolute ? "/" : "") + path;
                }, dirname: function(path) {
                  var result = PATH.splitPath(path), root = result[0], dir = result[1];
                  if (!root && !dir) {
                    return ".";
                  }
                  if (dir) {
                    dir = dir.substr(0, dir.length - 1);
                  }
                  return root + dir;
                }, basename: function(path) {
                  if (path === "/")
                    return "/";
                  path = PATH.normalize(path);
                  path = path.replace(/\/$/, "");
                  var lastSlash = path.lastIndexOf("/");
                  if (lastSlash === -1)
                    return path;
                  return path.substr(lastSlash + 1);
                }, extname: function(path) {
                  return PATH.splitPath(path)[3];
                }, join: function() {
                  var paths = Array.prototype.slice.call(arguments, 0);
                  return PATH.normalize(paths.join("/"));
                }, join2: function(l, r) {
                  return PATH.normalize(l + "/" + r);
                } };
                function getRandomDevice() {
                  if (typeof crypto == "object" && typeof crypto["getRandomValues"] == "function") {
                    var randomBuffer = new Uint8Array(1);
                    return function() {
                      crypto.getRandomValues(randomBuffer);
                      return randomBuffer[0];
                    };
                  } else if (ENVIRONMENT_IS_NODE) {
                    try {
                      var crypto_module = require2("crypto");
                      return function() {
                        return crypto_module["randomBytes"](1)[0];
                      };
                    } catch (e) {
                    }
                  }
                  return function() {
                    abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
                  };
                }
                var PATH_FS = { resolve: function() {
                  var resolvedPath = "", resolvedAbsolute = false;
                  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                    var path = i >= 0 ? arguments[i] : FS.cwd();
                    if (typeof path != "string") {
                      throw new TypeError("Arguments to path.resolve must be strings");
                    } else if (!path) {
                      return "";
                    }
                    resolvedPath = path + "/" + resolvedPath;
                    resolvedAbsolute = path.charAt(0) === "/";
                  }
                  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
                    return !!p;
                  }), !resolvedAbsolute).join("/");
                  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
                }, relative: function(from, to) {
                  from = PATH_FS.resolve(from).substr(1);
                  to = PATH_FS.resolve(to).substr(1);
                  function trim(arr) {
                    var start = 0;
                    for (; start < arr.length; start++) {
                      if (arr[start] !== "")
                        break;
                    }
                    var end = arr.length - 1;
                    for (; end >= 0; end--) {
                      if (arr[end] !== "")
                        break;
                    }
                    if (start > end)
                      return [];
                    return arr.slice(start, end - start + 1);
                  }
                  var fromParts = trim(from.split("/"));
                  var toParts = trim(to.split("/"));
                  var length = Math.min(fromParts.length, toParts.length);
                  var samePartsLength = length;
                  for (var i = 0; i < length; i++) {
                    if (fromParts[i] !== toParts[i]) {
                      samePartsLength = i;
                      break;
                    }
                  }
                  var outputParts = [];
                  for (var i = samePartsLength; i < fromParts.length; i++) {
                    outputParts.push("..");
                  }
                  outputParts = outputParts.concat(toParts.slice(samePartsLength));
                  return outputParts.join("/");
                } };
                var TTY = { ttys: [], init: function() {
                }, shutdown: function() {
                }, register: function(dev, ops) {
                  TTY.ttys[dev] = { input: [], output: [], ops };
                  FS.registerDevice(dev, TTY.stream_ops);
                }, stream_ops: { open: function(stream) {
                  var tty = TTY.ttys[stream.node.rdev];
                  if (!tty) {
                    throw new FS.ErrnoError(43);
                  }
                  stream.tty = tty;
                  stream.seekable = false;
                }, close: function(stream) {
                  stream.tty.ops.flush(stream.tty);
                }, flush: function(stream) {
                  stream.tty.ops.flush(stream.tty);
                }, read: function(stream, buffer2, offset, length, pos) {
                  if (!stream.tty || !stream.tty.ops.get_char) {
                    throw new FS.ErrnoError(60);
                  }
                  var bytesRead = 0;
                  for (var i = 0; i < length; i++) {
                    var result;
                    try {
                      result = stream.tty.ops.get_char(stream.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (result === void 0 && bytesRead === 0) {
                      throw new FS.ErrnoError(6);
                    }
                    if (result === null || result === void 0)
                      break;
                    bytesRead++;
                    buffer2[offset + i] = result;
                  }
                  if (bytesRead) {
                    stream.node.timestamp = Date.now();
                  }
                  return bytesRead;
                }, write: function(stream, buffer2, offset, length, pos) {
                  if (!stream.tty || !stream.tty.ops.put_char) {
                    throw new FS.ErrnoError(60);
                  }
                  try {
                    for (var i = 0; i < length; i++) {
                      stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
                    }
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  if (length) {
                    stream.node.timestamp = Date.now();
                  }
                  return i;
                } }, default_tty_ops: { get_char: function(tty) {
                  if (!tty.input.length) {
                    var result = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var BUFSIZE = 256;
                      var buf = Buffer2.alloc(BUFSIZE);
                      var bytesRead = 0;
                      try {
                        bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);
                      } catch (e) {
                        if (e.toString().includes("EOF"))
                          bytesRead = 0;
                        else
                          throw e;
                      }
                      if (bytesRead > 0) {
                        result = buf.slice(0, bytesRead).toString("utf-8");
                      } else {
                        result = null;
                      }
                    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                      result = window.prompt("Input: ");
                      if (result !== null) {
                        result += "\n";
                      }
                    } else if (typeof readline == "function") {
                      result = readline();
                      if (result !== null) {
                        result += "\n";
                      }
                    }
                    if (!result) {
                      return null;
                    }
                    tty.input = intArrayFromString(result, true);
                  }
                  return tty.input.shift();
                }, put_char: function(tty, val) {
                  if (val === null || val === 10) {
                    out(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  } else {
                    if (val != 0)
                      tty.output.push(val);
                  }
                }, flush: function(tty) {
                  if (tty.output && tty.output.length > 0) {
                    out(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  }
                } }, default_tty1_ops: { put_char: function(tty, val) {
                  if (val === null || val === 10) {
                    err(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  } else {
                    if (val != 0)
                      tty.output.push(val);
                  }
                }, flush: function(tty) {
                  if (tty.output && tty.output.length > 0) {
                    err(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  }
                } } };
                function zeroMemory(address, size) {
                  HEAPU8.fill(0, address, address + size);
                }
                function alignMemory(size, alignment) {
                  assert(alignment, "alignment argument is required");
                  return Math.ceil(size / alignment) * alignment;
                }
                function mmapAlloc(size) {
                  abort("internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported");
                }
                var MEMFS = { ops_table: null, mount: function(mount) {
                  return MEMFS.createNode(null, "/", 16384 | 511, 0);
                }, createNode: function(parent, name, mode, dev) {
                  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
                    throw new FS.ErrnoError(63);
                  }
                  if (!MEMFS.ops_table) {
                    MEMFS.ops_table = {
                      dir: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr,
                          lookup: MEMFS.node_ops.lookup,
                          mknod: MEMFS.node_ops.mknod,
                          rename: MEMFS.node_ops.rename,
                          unlink: MEMFS.node_ops.unlink,
                          rmdir: MEMFS.node_ops.rmdir,
                          readdir: MEMFS.node_ops.readdir,
                          symlink: MEMFS.node_ops.symlink
                        },
                        stream: {
                          llseek: MEMFS.stream_ops.llseek
                        }
                      },
                      file: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr
                        },
                        stream: {
                          llseek: MEMFS.stream_ops.llseek,
                          read: MEMFS.stream_ops.read,
                          write: MEMFS.stream_ops.write,
                          allocate: MEMFS.stream_ops.allocate,
                          mmap: MEMFS.stream_ops.mmap,
                          msync: MEMFS.stream_ops.msync
                        }
                      },
                      link: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr,
                          readlink: MEMFS.node_ops.readlink
                        },
                        stream: {}
                      },
                      chrdev: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr
                        },
                        stream: FS.chrdev_stream_ops
                      }
                    };
                  }
                  var node = FS.createNode(parent, name, mode, dev);
                  if (FS.isDir(node.mode)) {
                    node.node_ops = MEMFS.ops_table.dir.node;
                    node.stream_ops = MEMFS.ops_table.dir.stream;
                    node.contents = {};
                  } else if (FS.isFile(node.mode)) {
                    node.node_ops = MEMFS.ops_table.file.node;
                    node.stream_ops = MEMFS.ops_table.file.stream;
                    node.usedBytes = 0;
                    node.contents = null;
                  } else if (FS.isLink(node.mode)) {
                    node.node_ops = MEMFS.ops_table.link.node;
                    node.stream_ops = MEMFS.ops_table.link.stream;
                  } else if (FS.isChrdev(node.mode)) {
                    node.node_ops = MEMFS.ops_table.chrdev.node;
                    node.stream_ops = MEMFS.ops_table.chrdev.stream;
                  }
                  node.timestamp = Date.now();
                  if (parent) {
                    parent.contents[name] = node;
                    parent.timestamp = node.timestamp;
                  }
                  return node;
                }, getFileDataAsTypedArray: function(node) {
                  if (!node.contents)
                    return new Uint8Array(0);
                  if (node.contents.subarray)
                    return node.contents.subarray(0, node.usedBytes);
                  return new Uint8Array(node.contents);
                }, expandFileStorage: function(node, newCapacity) {
                  var prevCapacity = node.contents ? node.contents.length : 0;
                  if (prevCapacity >= newCapacity)
                    return;
                  var CAPACITY_DOUBLING_MAX = 1024 * 1024;
                  newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
                  if (prevCapacity != 0)
                    newCapacity = Math.max(newCapacity, 256);
                  var oldContents = node.contents;
                  node.contents = new Uint8Array(newCapacity);
                  if (node.usedBytes > 0)
                    node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
                }, resizeFileStorage: function(node, newSize) {
                  if (node.usedBytes == newSize)
                    return;
                  if (newSize == 0) {
                    node.contents = null;
                    node.usedBytes = 0;
                  } else {
                    var oldContents = node.contents;
                    node.contents = new Uint8Array(newSize);
                    if (oldContents) {
                      node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
                    }
                    node.usedBytes = newSize;
                  }
                }, node_ops: { getattr: function(node) {
                  var attr = {};
                  attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
                  attr.ino = node.id;
                  attr.mode = node.mode;
                  attr.nlink = 1;
                  attr.uid = 0;
                  attr.gid = 0;
                  attr.rdev = node.rdev;
                  if (FS.isDir(node.mode)) {
                    attr.size = 4096;
                  } else if (FS.isFile(node.mode)) {
                    attr.size = node.usedBytes;
                  } else if (FS.isLink(node.mode)) {
                    attr.size = node.link.length;
                  } else {
                    attr.size = 0;
                  }
                  attr.atime = new Date(node.timestamp);
                  attr.mtime = new Date(node.timestamp);
                  attr.ctime = new Date(node.timestamp);
                  attr.blksize = 4096;
                  attr.blocks = Math.ceil(attr.size / attr.blksize);
                  return attr;
                }, setattr: function(node, attr) {
                  if (attr.mode !== void 0) {
                    node.mode = attr.mode;
                  }
                  if (attr.timestamp !== void 0) {
                    node.timestamp = attr.timestamp;
                  }
                  if (attr.size !== void 0) {
                    MEMFS.resizeFileStorage(node, attr.size);
                  }
                }, lookup: function(parent, name) {
                  throw FS.genericErrors[44];
                }, mknod: function(parent, name, mode, dev) {
                  return MEMFS.createNode(parent, name, mode, dev);
                }, rename: function(old_node, new_dir, new_name) {
                  if (FS.isDir(old_node.mode)) {
                    var new_node;
                    try {
                      new_node = FS.lookupNode(new_dir, new_name);
                    } catch (e) {
                    }
                    if (new_node) {
                      for (var i in new_node.contents) {
                        throw new FS.ErrnoError(55);
                      }
                    }
                  }
                  delete old_node.parent.contents[old_node.name];
                  old_node.parent.timestamp = Date.now();
                  old_node.name = new_name;
                  new_dir.contents[new_name] = old_node;
                  new_dir.timestamp = old_node.parent.timestamp;
                  old_node.parent = new_dir;
                }, unlink: function(parent, name) {
                  delete parent.contents[name];
                  parent.timestamp = Date.now();
                }, rmdir: function(parent, name) {
                  var node = FS.lookupNode(parent, name);
                  for (var i in node.contents) {
                    throw new FS.ErrnoError(55);
                  }
                  delete parent.contents[name];
                  parent.timestamp = Date.now();
                }, readdir: function(node) {
                  var entries = [".", ".."];
                  for (var key in node.contents) {
                    if (!node.contents.hasOwnProperty(key)) {
                      continue;
                    }
                    entries.push(key);
                  }
                  return entries;
                }, symlink: function(parent, newname, oldpath) {
                  var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
                  node.link = oldpath;
                  return node;
                }, readlink: function(node) {
                  if (!FS.isLink(node.mode)) {
                    throw new FS.ErrnoError(28);
                  }
                  return node.link;
                } }, stream_ops: { read: function(stream, buffer2, offset, length, position) {
                  var contents = stream.node.contents;
                  if (position >= stream.node.usedBytes)
                    return 0;
                  var size = Math.min(stream.node.usedBytes - position, length);
                  assert(size >= 0);
                  if (size > 8 && contents.subarray) {
                    buffer2.set(contents.subarray(position, position + size), offset);
                  } else {
                    for (var i = 0; i < size; i++)
                      buffer2[offset + i] = contents[position + i];
                  }
                  return size;
                }, write: function(stream, buffer2, offset, length, position, canOwn) {
                  assert(!(buffer2 instanceof ArrayBuffer));
                  if (buffer2.buffer === HEAP8.buffer) {
                    canOwn = false;
                  }
                  if (!length)
                    return 0;
                  var node = stream.node;
                  node.timestamp = Date.now();
                  if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
                    if (canOwn) {
                      assert(position === 0, "canOwn must imply no weird position inside the file");
                      node.contents = buffer2.subarray(offset, offset + length);
                      node.usedBytes = length;
                      return length;
                    } else if (node.usedBytes === 0 && position === 0) {
                      node.contents = buffer2.slice(offset, offset + length);
                      node.usedBytes = length;
                      return length;
                    } else if (position + length <= node.usedBytes) {
                      node.contents.set(buffer2.subarray(offset, offset + length), position);
                      return length;
                    }
                  }
                  MEMFS.expandFileStorage(node, position + length);
                  if (node.contents.subarray && buffer2.subarray) {
                    node.contents.set(buffer2.subarray(offset, offset + length), position);
                  } else {
                    for (var i = 0; i < length; i++) {
                      node.contents[position + i] = buffer2[offset + i];
                    }
                  }
                  node.usedBytes = Math.max(node.usedBytes, position + length);
                  return length;
                }, llseek: function(stream, offset, whence) {
                  var position = offset;
                  if (whence === 1) {
                    position += stream.position;
                  } else if (whence === 2) {
                    if (FS.isFile(stream.node.mode)) {
                      position += stream.node.usedBytes;
                    }
                  }
                  if (position < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  return position;
                }, allocate: function(stream, offset, length) {
                  MEMFS.expandFileStorage(stream.node, offset + length);
                  stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
                }, mmap: function(stream, address, length, position, prot, flags) {
                  if (address !== 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                  }
                  var ptr;
                  var allocated;
                  var contents = stream.node.contents;
                  if (!(flags & 2) && contents.buffer === buffer) {
                    allocated = false;
                    ptr = contents.byteOffset;
                  } else {
                    if (position > 0 || position + length < contents.length) {
                      if (contents.subarray) {
                        contents = contents.subarray(position, position + length);
                      } else {
                        contents = Array.prototype.slice.call(contents, position, position + length);
                      }
                    }
                    allocated = true;
                    ptr = mmapAlloc(length);
                    if (!ptr) {
                      throw new FS.ErrnoError(48);
                    }
                    HEAP8.set(contents, ptr);
                  }
                  return { ptr, allocated };
                }, msync: function(stream, buffer2, offset, length, mmapFlags) {
                  if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                  }
                  if (mmapFlags & 2) {
                    return 0;
                  }
                  var bytesWritten = MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
                  return 0;
                } } };
                function asyncLoad(url, onload, onerror, noRunDep) {
                  var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
                  readAsync(url, function(arrayBuffer) {
                    assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
                    onload(new Uint8Array(arrayBuffer));
                    if (dep)
                      removeRunDependency(dep);
                  }, function(event) {
                    if (onerror) {
                      onerror();
                    } else {
                      throw 'Loading data file "' + url + '" failed.';
                    }
                  });
                  if (dep)
                    addRunDependency(dep);
                }
                var ERRNO_MESSAGES = { 0: "Success", 1: "Arg list too long", 2: "Permission denied", 3: "Address already in use", 4: "Address not available", 5: "Address family not supported by protocol family", 6: "No more processes", 7: "Socket already connected", 8: "Bad file number", 9: "Trying to read unreadable message", 10: "Mount device busy", 11: "Operation canceled", 12: "No children", 13: "Connection aborted", 14: "Connection refused", 15: "Connection reset by peer", 16: "File locking deadlock error", 17: "Destination address required", 18: "Math arg out of domain of func", 19: "Quota exceeded", 20: "File exists", 21: "Bad address", 22: "File too large", 23: "Host is unreachable", 24: "Identifier removed", 25: "Illegal byte sequence", 26: "Connection already in progress", 27: "Interrupted system call", 28: "Invalid argument", 29: "I/O error", 30: "Socket is already connected", 31: "Is a directory", 32: "Too many symbolic links", 33: "Too many open files", 34: "Too many links", 35: "Message too long", 36: "Multihop attempted", 37: "File or path name too long", 38: "Network interface is not configured", 39: "Connection reset by network", 40: "Network is unreachable", 41: "Too many open files in system", 42: "No buffer space available", 43: "No such device", 44: "No such file or directory", 45: "Exec format error", 46: "No record locks available", 47: "The link has been severed", 48: "Not enough core", 49: "No message of desired type", 50: "Protocol not available", 51: "No space left on device", 52: "Function not implemented", 53: "Socket is not connected", 54: "Not a directory", 55: "Directory not empty", 56: "State not recoverable", 57: "Socket operation on non-socket", 59: "Not a typewriter", 60: "No such device or address", 61: "Value too large for defined data type", 62: "Previous owner died", 63: "Not super-user", 64: "Broken pipe", 65: "Protocol error", 66: "Unknown protocol", 67: "Protocol wrong type for socket", 68: "Math result not representable", 69: "Read only file system", 70: "Illegal seek", 71: "No such process", 72: "Stale file handle", 73: "Connection timed out", 74: "Text file busy", 75: "Cross-device link", 100: "Device not a stream", 101: "Bad font file fmt", 102: "Invalid slot", 103: "Invalid request code", 104: "No anode", 105: "Block device required", 106: "Channel number out of range", 107: "Level 3 halted", 108: "Level 3 reset", 109: "Link number out of range", 110: "Protocol driver not attached", 111: "No CSI structure available", 112: "Level 2 halted", 113: "Invalid exchange", 114: "Invalid request descriptor", 115: "Exchange full", 116: "No data (for no delay io)", 117: "Timer expired", 118: "Out of streams resources", 119: "Machine is not on the network", 120: "Package not installed", 121: "The object is remote", 122: "Advertise error", 123: "Srmount error", 124: "Communication error on send", 125: "Cross mount point (not really error)", 126: "Given log. name not unique", 127: "f.d. invalid for this operation", 128: "Remote address changed", 129: "Can   access a needed shared lib", 130: "Accessing a corrupted shared lib", 131: ".lib section in a.out corrupted", 132: "Attempting to link in too many libs", 133: "Attempting to exec a shared library", 135: "Streams pipe error", 136: "Too many users", 137: "Socket type not supported", 138: "Not supported", 139: "Protocol family not supported", 140: "Can't send after socket shutdown", 141: "Too many references", 142: "Host is down", 148: "No medium (in tape drive)", 156: "Level 2 not synchronized" };
                var ERRNO_CODES = {};
                var FS = { root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, lookupPath: (path, opts = {}) => {
                  path = PATH_FS.resolve(FS.cwd(), path);
                  if (!path)
                    return { path: "", node: null };
                  var defaults = {
                    follow_mount: true,
                    recurse_count: 0
                  };
                  opts = Object.assign(defaults, opts);
                  if (opts.recurse_count > 8) {
                    throw new FS.ErrnoError(32);
                  }
                  var parts = PATH.normalizeArray(path.split("/").filter((p) => !!p), false);
                  var current = FS.root;
                  var current_path = "/";
                  for (var i = 0; i < parts.length; i++) {
                    var islast = i === parts.length - 1;
                    if (islast && opts.parent) {
                      break;
                    }
                    current = FS.lookupNode(current, parts[i]);
                    current_path = PATH.join2(current_path, parts[i]);
                    if (FS.isMountpoint(current)) {
                      if (!islast || islast && opts.follow_mount) {
                        current = current.mounted.root;
                      }
                    }
                    if (!islast || opts.follow) {
                      var count = 0;
                      while (FS.isLink(current.mode)) {
                        var link = FS.readlink(current_path);
                        current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                        var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
                        current = lookup.node;
                        if (count++ > 40) {
                          throw new FS.ErrnoError(32);
                        }
                      }
                    }
                  }
                  return { path: current_path, node: current };
                }, getPath: (node) => {
                  var path;
                  while (true) {
                    if (FS.isRoot(node)) {
                      var mount = node.mount.mountpoint;
                      if (!path)
                        return mount;
                      return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
                    }
                    path = path ? node.name + "/" + path : node.name;
                    node = node.parent;
                  }
                }, hashName: (parentid, name) => {
                  var hash = 0;
                  for (var i = 0; i < name.length; i++) {
                    hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
                  }
                  return (parentid + hash >>> 0) % FS.nameTable.length;
                }, hashAddNode: (node) => {
                  var hash = FS.hashName(node.parent.id, node.name);
                  node.name_next = FS.nameTable[hash];
                  FS.nameTable[hash] = node;
                }, hashRemoveNode: (node) => {
                  var hash = FS.hashName(node.parent.id, node.name);
                  if (FS.nameTable[hash] === node) {
                    FS.nameTable[hash] = node.name_next;
                  } else {
                    var current = FS.nameTable[hash];
                    while (current) {
                      if (current.name_next === node) {
                        current.name_next = node.name_next;
                        break;
                      }
                      current = current.name_next;
                    }
                  }
                }, lookupNode: (parent, name) => {
                  var errCode = FS.mayLookup(parent);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode, parent);
                  }
                  var hash = FS.hashName(parent.id, name);
                  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
                    var nodeName = node.name;
                    if (node.parent.id === parent.id && nodeName === name) {
                      return node;
                    }
                  }
                  return FS.lookup(parent, name);
                }, createNode: (parent, name, mode, rdev) => {
                  assert(typeof parent == "object");
                  var node = new FS.FSNode(parent, name, mode, rdev);
                  FS.hashAddNode(node);
                  return node;
                }, destroyNode: (node) => {
                  FS.hashRemoveNode(node);
                }, isRoot: (node) => {
                  return node === node.parent;
                }, isMountpoint: (node) => {
                  return !!node.mounted;
                }, isFile: (mode) => {
                  return (mode & 61440) === 32768;
                }, isDir: (mode) => {
                  return (mode & 61440) === 16384;
                }, isLink: (mode) => {
                  return (mode & 61440) === 40960;
                }, isChrdev: (mode) => {
                  return (mode & 61440) === 8192;
                }, isBlkdev: (mode) => {
                  return (mode & 61440) === 24576;
                }, isFIFO: (mode) => {
                  return (mode & 61440) === 4096;
                }, isSocket: (mode) => {
                  return (mode & 49152) === 49152;
                }, flagModes: { "r": 0, "r+": 2, "w": 577, "w+": 578, "a": 1089, "a+": 1090 }, modeStringToFlags: (str) => {
                  var flags = FS.flagModes[str];
                  if (typeof flags == "undefined") {
                    throw new Error("Unknown file open mode: " + str);
                  }
                  return flags;
                }, flagsToPermissionString: (flag) => {
                  var perms = ["r", "w", "rw"][flag & 3];
                  if (flag & 512) {
                    perms += "w";
                  }
                  return perms;
                }, nodePermissions: (node, perms) => {
                  if (FS.ignorePermissions) {
                    return 0;
                  }
                  if (perms.includes("r") && !(node.mode & 292)) {
                    return 2;
                  } else if (perms.includes("w") && !(node.mode & 146)) {
                    return 2;
                  } else if (perms.includes("x") && !(node.mode & 73)) {
                    return 2;
                  }
                  return 0;
                }, mayLookup: (dir) => {
                  var errCode = FS.nodePermissions(dir, "x");
                  if (errCode)
                    return errCode;
                  if (!dir.node_ops.lookup)
                    return 2;
                  return 0;
                }, mayCreate: (dir, name) => {
                  try {
                    var node = FS.lookupNode(dir, name);
                    return 20;
                  } catch (e) {
                  }
                  return FS.nodePermissions(dir, "wx");
                }, mayDelete: (dir, name, isdir) => {
                  var node;
                  try {
                    node = FS.lookupNode(dir, name);
                  } catch (e) {
                    return e.errno;
                  }
                  var errCode = FS.nodePermissions(dir, "wx");
                  if (errCode) {
                    return errCode;
                  }
                  if (isdir) {
                    if (!FS.isDir(node.mode)) {
                      return 54;
                    }
                    if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                      return 10;
                    }
                  } else {
                    if (FS.isDir(node.mode)) {
                      return 31;
                    }
                  }
                  return 0;
                }, mayOpen: (node, flags) => {
                  if (!node) {
                    return 44;
                  }
                  if (FS.isLink(node.mode)) {
                    return 32;
                  } else if (FS.isDir(node.mode)) {
                    if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
                      return 31;
                    }
                  }
                  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
                }, MAX_OPEN_FDS: 4096, nextfd: (fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {
                  for (var fd = fd_start; fd <= fd_end; fd++) {
                    if (!FS.streams[fd]) {
                      return fd;
                    }
                  }
                  throw new FS.ErrnoError(33);
                }, getStream: (fd) => FS.streams[fd], createStream: (stream, fd_start, fd_end) => {
                  if (!FS.FSStream) {
                    FS.FSStream = function() {
                    };
                    FS.FSStream.prototype = {
                      object: {
                        get: function() {
                          return this.node;
                        },
                        set: function(val) {
                          this.node = val;
                        }
                      },
                      isRead: {
                        get: function() {
                          return (this.flags & 2097155) !== 1;
                        }
                      },
                      isWrite: {
                        get: function() {
                          return (this.flags & 2097155) !== 0;
                        }
                      },
                      isAppend: {
                        get: function() {
                          return this.flags & 1024;
                        }
                      }
                    };
                  }
                  stream = Object.assign(new FS.FSStream(), stream);
                  var fd = FS.nextfd(fd_start, fd_end);
                  stream.fd = fd;
                  FS.streams[fd] = stream;
                  return stream;
                }, closeStream: (fd) => {
                  FS.streams[fd] = null;
                }, chrdev_stream_ops: { open: (stream) => {
                  var device = FS.getDevice(stream.node.rdev);
                  stream.stream_ops = device.stream_ops;
                  if (stream.stream_ops.open) {
                    stream.stream_ops.open(stream);
                  }
                }, llseek: () => {
                  throw new FS.ErrnoError(70);
                } }, major: (dev) => dev >> 8, minor: (dev) => dev & 255, makedev: (ma, mi) => ma << 8 | mi, registerDevice: (dev, ops) => {
                  FS.devices[dev] = { stream_ops: ops };
                }, getDevice: (dev) => FS.devices[dev], getMounts: (mount) => {
                  var mounts = [];
                  var check = [mount];
                  while (check.length) {
                    var m = check.pop();
                    mounts.push(m);
                    check.push.apply(check, m.mounts);
                  }
                  return mounts;
                }, syncfs: (populate, callback) => {
                  if (typeof populate == "function") {
                    callback = populate;
                    populate = false;
                  }
                  FS.syncFSRequests++;
                  if (FS.syncFSRequests > 1) {
                    err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
                  }
                  var mounts = FS.getMounts(FS.root.mount);
                  var completed = 0;
                  function doCallback(errCode) {
                    assert(FS.syncFSRequests > 0);
                    FS.syncFSRequests--;
                    return callback(errCode);
                  }
                  function done(errCode) {
                    if (errCode) {
                      if (!done.errored) {
                        done.errored = true;
                        return doCallback(errCode);
                      }
                      return;
                    }
                    if (++completed >= mounts.length) {
                      doCallback(null);
                    }
                  }
                  ;
                  mounts.forEach((mount) => {
                    if (!mount.type.syncfs) {
                      return done(null);
                    }
                    mount.type.syncfs(mount, populate, done);
                  });
                }, mount: (type, opts, mountpoint) => {
                  if (typeof type == "string") {
                    throw type;
                  }
                  var root = mountpoint === "/";
                  var pseudo = !mountpoint;
                  var node;
                  if (root && FS.root) {
                    throw new FS.ErrnoError(10);
                  } else if (!root && !pseudo) {
                    var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
                    mountpoint = lookup.path;
                    node = lookup.node;
                    if (FS.isMountpoint(node)) {
                      throw new FS.ErrnoError(10);
                    }
                    if (!FS.isDir(node.mode)) {
                      throw new FS.ErrnoError(54);
                    }
                  }
                  var mount = {
                    type,
                    opts,
                    mountpoint,
                    mounts: []
                  };
                  var mountRoot = type.mount(mount);
                  mountRoot.mount = mount;
                  mount.root = mountRoot;
                  if (root) {
                    FS.root = mountRoot;
                  } else if (node) {
                    node.mounted = mount;
                    if (node.mount) {
                      node.mount.mounts.push(mount);
                    }
                  }
                  return mountRoot;
                }, unmount: (mountpoint) => {
                  var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
                  if (!FS.isMountpoint(lookup.node)) {
                    throw new FS.ErrnoError(28);
                  }
                  var node = lookup.node;
                  var mount = node.mounted;
                  var mounts = FS.getMounts(mount);
                  Object.keys(FS.nameTable).forEach((hash) => {
                    var current = FS.nameTable[hash];
                    while (current) {
                      var next = current.name_next;
                      if (mounts.includes(current.mount)) {
                        FS.destroyNode(current);
                      }
                      current = next;
                    }
                  });
                  node.mounted = null;
                  var idx = node.mount.mounts.indexOf(mount);
                  assert(idx !== -1);
                  node.mount.mounts.splice(idx, 1);
                }, lookup: (parent, name) => {
                  return parent.node_ops.lookup(parent, name);
                }, mknod: (path, mode, dev) => {
                  var lookup = FS.lookupPath(path, { parent: true });
                  var parent = lookup.node;
                  var name = PATH.basename(path);
                  if (!name || name === "." || name === "..") {
                    throw new FS.ErrnoError(28);
                  }
                  var errCode = FS.mayCreate(parent, name);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.mknod) {
                    throw new FS.ErrnoError(63);
                  }
                  return parent.node_ops.mknod(parent, name, mode, dev);
                }, create: (path, mode) => {
                  mode = mode !== void 0 ? mode : 438;
                  mode &= 4095;
                  mode |= 32768;
                  return FS.mknod(path, mode, 0);
                }, mkdir: (path, mode) => {
                  mode = mode !== void 0 ? mode : 511;
                  mode &= 511 | 512;
                  mode |= 16384;
                  return FS.mknod(path, mode, 0);
                }, mkdirTree: (path, mode) => {
                  var dirs = path.split("/");
                  var d = "";
                  for (var i = 0; i < dirs.length; ++i) {
                    if (!dirs[i])
                      continue;
                    d += "/" + dirs[i];
                    try {
                      FS.mkdir(d, mode);
                    } catch (e) {
                      if (e.errno != 20)
                        throw e;
                    }
                  }
                }, mkdev: (path, mode, dev) => {
                  if (typeof dev == "undefined") {
                    dev = mode;
                    mode = 438;
                  }
                  mode |= 8192;
                  return FS.mknod(path, mode, dev);
                }, symlink: (oldpath, newpath) => {
                  if (!PATH_FS.resolve(oldpath)) {
                    throw new FS.ErrnoError(44);
                  }
                  var lookup = FS.lookupPath(newpath, { parent: true });
                  var parent = lookup.node;
                  if (!parent) {
                    throw new FS.ErrnoError(44);
                  }
                  var newname = PATH.basename(newpath);
                  var errCode = FS.mayCreate(parent, newname);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.symlink) {
                    throw new FS.ErrnoError(63);
                  }
                  return parent.node_ops.symlink(parent, newname, oldpath);
                }, rename: (old_path, new_path) => {
                  var old_dirname = PATH.dirname(old_path);
                  var new_dirname = PATH.dirname(new_path);
                  var old_name = PATH.basename(old_path);
                  var new_name = PATH.basename(new_path);
                  var lookup, old_dir, new_dir;
                  lookup = FS.lookupPath(old_path, { parent: true });
                  old_dir = lookup.node;
                  lookup = FS.lookupPath(new_path, { parent: true });
                  new_dir = lookup.node;
                  if (!old_dir || !new_dir)
                    throw new FS.ErrnoError(44);
                  if (old_dir.mount !== new_dir.mount) {
                    throw new FS.ErrnoError(75);
                  }
                  var old_node = FS.lookupNode(old_dir, old_name);
                  var relative = PATH_FS.relative(old_path, new_dirname);
                  if (relative.charAt(0) !== ".") {
                    throw new FS.ErrnoError(28);
                  }
                  relative = PATH_FS.relative(new_path, old_dirname);
                  if (relative.charAt(0) !== ".") {
                    throw new FS.ErrnoError(55);
                  }
                  var new_node;
                  try {
                    new_node = FS.lookupNode(new_dir, new_name);
                  } catch (e) {
                  }
                  if (old_node === new_node) {
                    return;
                  }
                  var isdir = FS.isDir(old_node.mode);
                  var errCode = FS.mayDelete(old_dir, old_name, isdir);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!old_dir.node_ops.rename) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
                    throw new FS.ErrnoError(10);
                  }
                  if (new_dir !== old_dir) {
                    errCode = FS.nodePermissions(old_dir, "w");
                    if (errCode) {
                      throw new FS.ErrnoError(errCode);
                    }
                  }
                  FS.hashRemoveNode(old_node);
                  try {
                    old_dir.node_ops.rename(old_node, new_dir, new_name);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.hashAddNode(old_node);
                  }
                }, rmdir: (path) => {
                  var lookup = FS.lookupPath(path, { parent: true });
                  var parent = lookup.node;
                  var name = PATH.basename(path);
                  var node = FS.lookupNode(parent, name);
                  var errCode = FS.mayDelete(parent, name, true);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.rmdir) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10);
                  }
                  parent.node_ops.rmdir(parent, name);
                  FS.destroyNode(node);
                }, readdir: (path) => {
                  var lookup = FS.lookupPath(path, { follow: true });
                  var node = lookup.node;
                  if (!node.node_ops.readdir) {
                    throw new FS.ErrnoError(54);
                  }
                  return node.node_ops.readdir(node);
                }, unlink: (path) => {
                  var lookup = FS.lookupPath(path, { parent: true });
                  var parent = lookup.node;
                  if (!parent) {
                    throw new FS.ErrnoError(44);
                  }
                  var name = PATH.basename(path);
                  var node = FS.lookupNode(parent, name);
                  var errCode = FS.mayDelete(parent, name, false);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.unlink) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10);
                  }
                  parent.node_ops.unlink(parent, name);
                  FS.destroyNode(node);
                }, readlink: (path) => {
                  var lookup = FS.lookupPath(path);
                  var link = lookup.node;
                  if (!link) {
                    throw new FS.ErrnoError(44);
                  }
                  if (!link.node_ops.readlink) {
                    throw new FS.ErrnoError(28);
                  }
                  return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
                }, stat: (path, dontFollow) => {
                  var lookup = FS.lookupPath(path, { follow: !dontFollow });
                  var node = lookup.node;
                  if (!node) {
                    throw new FS.ErrnoError(44);
                  }
                  if (!node.node_ops.getattr) {
                    throw new FS.ErrnoError(63);
                  }
                  return node.node_ops.getattr(node);
                }, lstat: (path) => {
                  return FS.stat(path, true);
                }, chmod: (path, mode, dontFollow) => {
                  var node;
                  if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, { follow: !dontFollow });
                    node = lookup.node;
                  } else {
                    node = path;
                  }
                  if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63);
                  }
                  node.node_ops.setattr(node, {
                    mode: mode & 4095 | node.mode & ~4095,
                    timestamp: Date.now()
                  });
                }, lchmod: (path, mode) => {
                  FS.chmod(path, mode, true);
                }, fchmod: (fd, mode) => {
                  var stream = FS.getStream(fd);
                  if (!stream) {
                    throw new FS.ErrnoError(8);
                  }
                  FS.chmod(stream.node, mode);
                }, chown: (path, uid, gid, dontFollow) => {
                  var node;
                  if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, { follow: !dontFollow });
                    node = lookup.node;
                  } else {
                    node = path;
                  }
                  if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63);
                  }
                  node.node_ops.setattr(node, {
                    timestamp: Date.now()
                  });
                }, lchown: (path, uid, gid) => {
                  FS.chown(path, uid, gid, true);
                }, fchown: (fd, uid, gid) => {
                  var stream = FS.getStream(fd);
                  if (!stream) {
                    throw new FS.ErrnoError(8);
                  }
                  FS.chown(stream.node, uid, gid);
                }, truncate: (path, len) => {
                  if (len < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  var node;
                  if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, { follow: true });
                    node = lookup.node;
                  } else {
                    node = path;
                  }
                  if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(31);
                  }
                  if (!FS.isFile(node.mode)) {
                    throw new FS.ErrnoError(28);
                  }
                  var errCode = FS.nodePermissions(node, "w");
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  node.node_ops.setattr(node, {
                    size: len,
                    timestamp: Date.now()
                  });
                }, ftruncate: (fd, len) => {
                  var stream = FS.getStream(fd);
                  if (!stream) {
                    throw new FS.ErrnoError(8);
                  }
                  if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(28);
                  }
                  FS.truncate(stream.node, len);
                }, utime: (path, atime, mtime) => {
                  var lookup = FS.lookupPath(path, { follow: true });
                  var node = lookup.node;
                  node.node_ops.setattr(node, {
                    timestamp: Math.max(atime, mtime)
                  });
                }, open: (path, flags, mode, fd_start, fd_end) => {
                  if (path === "") {
                    throw new FS.ErrnoError(44);
                  }
                  flags = typeof flags == "string" ? FS.modeStringToFlags(flags) : flags;
                  mode = typeof mode == "undefined" ? 438 : mode;
                  if (flags & 64) {
                    mode = mode & 4095 | 32768;
                  } else {
                    mode = 0;
                  }
                  var node;
                  if (typeof path == "object") {
                    node = path;
                  } else {
                    path = PATH.normalize(path);
                    try {
                      var lookup = FS.lookupPath(path, {
                        follow: !(flags & 131072)
                      });
                      node = lookup.node;
                    } catch (e) {
                    }
                  }
                  var created = false;
                  if (flags & 64) {
                    if (node) {
                      if (flags & 128) {
                        throw new FS.ErrnoError(20);
                      }
                    } else {
                      node = FS.mknod(path, mode, 0);
                      created = true;
                    }
                  }
                  if (!node) {
                    throw new FS.ErrnoError(44);
                  }
                  if (FS.isChrdev(node.mode)) {
                    flags &= ~512;
                  }
                  if (flags & 65536 && !FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(54);
                  }
                  if (!created) {
                    var errCode = FS.mayOpen(node, flags);
                    if (errCode) {
                      throw new FS.ErrnoError(errCode);
                    }
                  }
                  if (flags & 512) {
                    FS.truncate(node, 0);
                  }
                  flags &= ~(128 | 512 | 131072);
                  var stream = FS.createStream({
                    node,
                    path: FS.getPath(node),
                    flags,
                    seekable: true,
                    position: 0,
                    stream_ops: node.stream_ops,
                    ungotten: [],
                    error: false
                  }, fd_start, fd_end);
                  if (stream.stream_ops.open) {
                    stream.stream_ops.open(stream);
                  }
                  if (Module["logReadFiles"] && !(flags & 1)) {
                    if (!FS.readFiles)
                      FS.readFiles = {};
                    if (!(path in FS.readFiles)) {
                      FS.readFiles[path] = 1;
                    }
                  }
                  return stream;
                }, close: (stream) => {
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if (stream.getdents)
                    stream.getdents = null;
                  try {
                    if (stream.stream_ops.close) {
                      stream.stream_ops.close(stream);
                    }
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(stream.fd);
                  }
                  stream.fd = null;
                }, isClosed: (stream) => {
                  return stream.fd === null;
                }, llseek: (stream, offset, whence) => {
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if (!stream.seekable || !stream.stream_ops.llseek) {
                    throw new FS.ErrnoError(70);
                  }
                  if (whence != 0 && whence != 1 && whence != 2) {
                    throw new FS.ErrnoError(28);
                  }
                  stream.position = stream.stream_ops.llseek(stream, offset, whence);
                  stream.ungotten = [];
                  return stream.position;
                }, read: (stream, buffer2, offset, length, position) => {
                  if (length < 0 || position < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if ((stream.flags & 2097155) === 1) {
                    throw new FS.ErrnoError(8);
                  }
                  if (FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(31);
                  }
                  if (!stream.stream_ops.read) {
                    throw new FS.ErrnoError(28);
                  }
                  var seeking = typeof position != "undefined";
                  if (!seeking) {
                    position = stream.position;
                  } else if (!stream.seekable) {
                    throw new FS.ErrnoError(70);
                  }
                  var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
                  if (!seeking)
                    stream.position += bytesRead;
                  return bytesRead;
                }, write: (stream, buffer2, offset, length, position, canOwn) => {
                  if (length < 0 || position < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(8);
                  }
                  if (FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(31);
                  }
                  if (!stream.stream_ops.write) {
                    throw new FS.ErrnoError(28);
                  }
                  if (stream.seekable && stream.flags & 1024) {
                    FS.llseek(stream, 0, 2);
                  }
                  var seeking = typeof position != "undefined";
                  if (!seeking) {
                    position = stream.position;
                  } else if (!stream.seekable) {
                    throw new FS.ErrnoError(70);
                  }
                  var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
                  if (!seeking)
                    stream.position += bytesWritten;
                  return bytesWritten;
                }, allocate: (stream, offset, length) => {
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if (offset < 0 || length <= 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(8);
                  }
                  if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                  }
                  if (!stream.stream_ops.allocate) {
                    throw new FS.ErrnoError(138);
                  }
                  stream.stream_ops.allocate(stream, offset, length);
                }, mmap: (stream, address, length, position, prot, flags) => {
                  if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
                    throw new FS.ErrnoError(2);
                  }
                  if ((stream.flags & 2097155) === 1) {
                    throw new FS.ErrnoError(2);
                  }
                  if (!stream.stream_ops.mmap) {
                    throw new FS.ErrnoError(43);
                  }
                  return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
                }, msync: (stream, buffer2, offset, length, mmapFlags) => {
                  if (!stream || !stream.stream_ops.msync) {
                    return 0;
                  }
                  return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
                }, munmap: (stream) => 0, ioctl: (stream, cmd, arg) => {
                  if (!stream.stream_ops.ioctl) {
                    throw new FS.ErrnoError(59);
                  }
                  return stream.stream_ops.ioctl(stream, cmd, arg);
                }, readFile: (path, opts = {}) => {
                  opts.flags = opts.flags || 0;
                  opts.encoding = opts.encoding || "binary";
                  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
                    throw new Error('Invalid encoding type "' + opts.encoding + '"');
                  }
                  var ret;
                  var stream = FS.open(path, opts.flags);
                  var stat = FS.stat(path);
                  var length = stat.size;
                  var buf = new Uint8Array(length);
                  FS.read(stream, buf, 0, length, 0);
                  if (opts.encoding === "utf8") {
                    ret = UTF8ArrayToString(buf, 0);
                  } else if (opts.encoding === "binary") {
                    ret = buf;
                  }
                  FS.close(stream);
                  return ret;
                }, writeFile: (path, data, opts = {}) => {
                  opts.flags = opts.flags || 577;
                  var stream = FS.open(path, opts.flags, opts.mode);
                  if (typeof data == "string") {
                    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
                    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
                    FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
                  } else if (ArrayBuffer.isView(data)) {
                    FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
                  } else {
                    throw new Error("Unsupported data type");
                  }
                  FS.close(stream);
                }, cwd: () => FS.currentPath, chdir: (path) => {
                  var lookup = FS.lookupPath(path, { follow: true });
                  if (lookup.node === null) {
                    throw new FS.ErrnoError(44);
                  }
                  if (!FS.isDir(lookup.node.mode)) {
                    throw new FS.ErrnoError(54);
                  }
                  var errCode = FS.nodePermissions(lookup.node, "x");
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  FS.currentPath = lookup.path;
                }, createDefaultDirectories: () => {
                  FS.mkdir("/tmp");
                  FS.mkdir("/home");
                  FS.mkdir("/home/web_user");
                }, createDefaultDevices: () => {
                  FS.mkdir("/dev");
                  FS.registerDevice(FS.makedev(1, 3), {
                    read: () => 0,
                    write: (stream, buffer2, offset, length, pos) => length
                  });
                  FS.mkdev("/dev/null", FS.makedev(1, 3));
                  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
                  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
                  FS.mkdev("/dev/tty", FS.makedev(5, 0));
                  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var random_device = getRandomDevice();
                  FS.createDevice("/dev", "random", random_device);
                  FS.createDevice("/dev", "urandom", random_device);
                  FS.mkdir("/dev/shm");
                  FS.mkdir("/dev/shm/tmp");
                }, createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var proc_self = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd");
                  FS.mount({
                    mount: () => {
                      var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
                      node.node_ops = {
                        lookup: (parent, name) => {
                          var fd = +name;
                          var stream = FS.getStream(fd);
                          if (!stream)
                            throw new FS.ErrnoError(8);
                          var ret = {
                            parent: null,
                            mount: { mountpoint: "fake" },
                            node_ops: { readlink: () => stream.path }
                          };
                          ret.parent = ret;
                          return ret;
                        }
                      };
                      return node;
                    }
                  }, {}, "/proc/self/fd");
                }, createStandardStreams: () => {
                  if (Module["stdin"]) {
                    FS.createDevice("/dev", "stdin", Module["stdin"]);
                  } else {
                    FS.symlink("/dev/tty", "/dev/stdin");
                  }
                  if (Module["stdout"]) {
                    FS.createDevice("/dev", "stdout", null, Module["stdout"]);
                  } else {
                    FS.symlink("/dev/tty", "/dev/stdout");
                  }
                  if (Module["stderr"]) {
                    FS.createDevice("/dev", "stderr", null, Module["stderr"]);
                  } else {
                    FS.symlink("/dev/tty1", "/dev/stderr");
                  }
                  var stdin = FS.open("/dev/stdin", 0);
                  var stdout = FS.open("/dev/stdout", 1);
                  var stderr = FS.open("/dev/stderr", 1);
                  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
                  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
                  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
                }, ensureErrnoError: () => {
                  if (FS.ErrnoError)
                    return;
                  FS.ErrnoError = function ErrnoError(errno, node) {
                    this.node = node;
                    this.setErrno = function(errno2) {
                      this.errno = errno2;
                      for (var key in ERRNO_CODES) {
                        if (ERRNO_CODES[key] === errno2) {
                          this.code = key;
                          break;
                        }
                      }
                    };
                    this.setErrno(errno);
                    this.message = ERRNO_MESSAGES[errno];
                    if (this.stack) {
                      Object.defineProperty(this, "stack", { value: new Error().stack, writable: true });
                      this.stack = demangleAll(this.stack);
                    }
                  };
                  FS.ErrnoError.prototype = new Error();
                  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
                  [44].forEach((code) => {
                    FS.genericErrors[code] = new FS.ErrnoError(code);
                    FS.genericErrors[code].stack = "<generic error, no stack>";
                  });
                }, staticInit: () => {
                  FS.ensureErrnoError();
                  FS.nameTable = new Array(4096);
                  FS.mount(MEMFS, {}, "/");
                  FS.createDefaultDirectories();
                  FS.createDefaultDevices();
                  FS.createSpecialDirectories();
                  FS.filesystems = {
                    "MEMFS": MEMFS
                  };
                }, init: (input, output, error) => {
                  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
                  FS.init.initialized = true;
                  FS.ensureErrnoError();
                  Module["stdin"] = input || Module["stdin"];
                  Module["stdout"] = output || Module["stdout"];
                  Module["stderr"] = error || Module["stderr"];
                  FS.createStandardStreams();
                }, quit: () => {
                  FS.init.initialized = false;
                  ___stdio_exit();
                  for (var i = 0; i < FS.streams.length; i++) {
                    var stream = FS.streams[i];
                    if (!stream) {
                      continue;
                    }
                    FS.close(stream);
                  }
                }, getMode: (canRead, canWrite) => {
                  var mode = 0;
                  if (canRead)
                    mode |= 292 | 73;
                  if (canWrite)
                    mode |= 146;
                  return mode;
                }, findObject: (path, dontResolveLastLink) => {
                  var ret = FS.analyzePath(path, dontResolveLastLink);
                  if (ret.exists) {
                    return ret.object;
                  } else {
                    return null;
                  }
                }, analyzePath: (path, dontResolveLastLink) => {
                  try {
                    var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                    path = lookup.path;
                  } catch (e) {
                  }
                  var ret = {
                    isRoot: false,
                    exists: false,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: false,
                    parentPath: null,
                    parentObject: null
                  };
                  try {
                    var lookup = FS.lookupPath(path, { parent: true });
                    ret.parentExists = true;
                    ret.parentPath = lookup.path;
                    ret.parentObject = lookup.node;
                    ret.name = PATH.basename(path);
                    lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                    ret.exists = true;
                    ret.path = lookup.path;
                    ret.object = lookup.node;
                    ret.name = lookup.node.name;
                    ret.isRoot = lookup.path === "/";
                  } catch (e) {
                    ret.error = e.errno;
                  }
                  ;
                  return ret;
                }, createPath: (parent, path, canRead, canWrite) => {
                  parent = typeof parent == "string" ? parent : FS.getPath(parent);
                  var parts = path.split("/").reverse();
                  while (parts.length) {
                    var part = parts.pop();
                    if (!part)
                      continue;
                    var current = PATH.join2(parent, part);
                    try {
                      FS.mkdir(current);
                    } catch (e) {
                    }
                    parent = current;
                  }
                  return current;
                }, createFile: (parent, name, properties, canRead, canWrite) => {
                  var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
                  var mode = FS.getMode(canRead, canWrite);
                  return FS.create(path, mode);
                }, createDataFile: (parent, name, data, canRead, canWrite, canOwn) => {
                  var path = name;
                  if (parent) {
                    parent = typeof parent == "string" ? parent : FS.getPath(parent);
                    path = name ? PATH.join2(parent, name) : parent;
                  }
                  var mode = FS.getMode(canRead, canWrite);
                  var node = FS.create(path, mode);
                  if (data) {
                    if (typeof data == "string") {
                      var arr = new Array(data.length);
                      for (var i = 0, len = data.length; i < len; ++i)
                        arr[i] = data.charCodeAt(i);
                      data = arr;
                    }
                    FS.chmod(node, mode | 146);
                    var stream = FS.open(node, 577);
                    FS.write(stream, data, 0, data.length, 0, canOwn);
                    FS.close(stream);
                    FS.chmod(node, mode);
                  }
                  return node;
                }, createDevice: (parent, name, input, output) => {
                  var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
                  var mode = FS.getMode(!!input, !!output);
                  if (!FS.createDevice.major)
                    FS.createDevice.major = 64;
                  var dev = FS.makedev(FS.createDevice.major++, 0);
                  FS.registerDevice(dev, {
                    open: (stream) => {
                      stream.seekable = false;
                    },
                    close: (stream) => {
                      if (output && output.buffer && output.buffer.length) {
                        output(10);
                      }
                    },
                    read: (stream, buffer2, offset, length, pos) => {
                      var bytesRead = 0;
                      for (var i = 0; i < length; i++) {
                        var result;
                        try {
                          result = input();
                        } catch (e) {
                          throw new FS.ErrnoError(29);
                        }
                        if (result === void 0 && bytesRead === 0) {
                          throw new FS.ErrnoError(6);
                        }
                        if (result === null || result === void 0)
                          break;
                        bytesRead++;
                        buffer2[offset + i] = result;
                      }
                      if (bytesRead) {
                        stream.node.timestamp = Date.now();
                      }
                      return bytesRead;
                    },
                    write: (stream, buffer2, offset, length, pos) => {
                      for (var i = 0; i < length; i++) {
                        try {
                          output(buffer2[offset + i]);
                        } catch (e) {
                          throw new FS.ErrnoError(29);
                        }
                      }
                      if (length) {
                        stream.node.timestamp = Date.now();
                      }
                      return i;
                    }
                  });
                  return FS.mkdev(path, mode, dev);
                }, forceLoadFile: (obj) => {
                  if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
                    return true;
                  if (typeof XMLHttpRequest != "undefined") {
                    throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
                  } else if (read_) {
                    try {
                      obj.contents = intArrayFromString(read_(obj.url), true);
                      obj.usedBytes = obj.contents.length;
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                  } else {
                    throw new Error("Cannot load without read() or XMLHttpRequest.");
                  }
                }, createLazyFile: (parent, name, url, canRead, canWrite) => {
                  function LazyUint8Array() {
                    this.lengthKnown = false;
                    this.chunks = [];
                  }
                  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
                    if (idx > this.length - 1 || idx < 0) {
                      return void 0;
                    }
                    var chunkOffset = idx % this.chunkSize;
                    var chunkNum = idx / this.chunkSize | 0;
                    return this.getter(chunkNum)[chunkOffset];
                  };
                  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
                    this.getter = getter;
                  };
                  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                    var xhr = new XMLHttpRequest();
                    xhr.open("HEAD", url, false);
                    xhr.send(null);
                    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                      throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                    var datalength = Number(xhr.getResponseHeader("Content-length"));
                    var header;
                    var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
                    var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
                    var chunkSize = 1024 * 1024;
                    if (!hasByteServing)
                      chunkSize = datalength;
                    var doXHR = (from, to) => {
                      if (from > to)
                        throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                      if (to > datalength - 1)
                        throw new Error("only " + datalength + " bytes available! programmer error!");
                      var xhr2 = new XMLHttpRequest();
                      xhr2.open("GET", url, false);
                      if (datalength !== chunkSize)
                        xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
                      xhr2.responseType = "arraybuffer";
                      if (xhr2.overrideMimeType) {
                        xhr2.overrideMimeType("text/plain; charset=x-user-defined");
                      }
                      xhr2.send(null);
                      if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))
                        throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
                      if (xhr2.response !== void 0) {
                        return new Uint8Array(xhr2.response || []);
                      } else {
                        return intArrayFromString(xhr2.responseText || "", true);
                      }
                    };
                    var lazyArray2 = this;
                    lazyArray2.setDataGetter((chunkNum) => {
                      var start = chunkNum * chunkSize;
                      var end = (chunkNum + 1) * chunkSize - 1;
                      end = Math.min(end, datalength - 1);
                      if (typeof lazyArray2.chunks[chunkNum] == "undefined") {
                        lazyArray2.chunks[chunkNum] = doXHR(start, end);
                      }
                      if (typeof lazyArray2.chunks[chunkNum] == "undefined")
                        throw new Error("doXHR failed!");
                      return lazyArray2.chunks[chunkNum];
                    });
                    if (usesGzip || !datalength) {
                      chunkSize = datalength = 1;
                      datalength = this.getter(0).length;
                      chunkSize = datalength;
                      out("LazyFiles on gzip forces download of the whole file when length is accessed");
                    }
                    this._length = datalength;
                    this._chunkSize = chunkSize;
                    this.lengthKnown = true;
                  };
                  if (typeof XMLHttpRequest != "undefined") {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var lazyArray = new LazyUint8Array();
                    Object.defineProperties(lazyArray, {
                      length: {
                        get: function() {
                          if (!this.lengthKnown) {
                            this.cacheLength();
                          }
                          return this._length;
                        }
                      },
                      chunkSize: {
                        get: function() {
                          if (!this.lengthKnown) {
                            this.cacheLength();
                          }
                          return this._chunkSize;
                        }
                      }
                    });
                    var properties = { isDevice: false, contents: lazyArray };
                  } else {
                    var properties = { isDevice: false, url };
                  }
                  var node = FS.createFile(parent, name, properties, canRead, canWrite);
                  if (properties.contents) {
                    node.contents = properties.contents;
                  } else if (properties.url) {
                    node.contents = null;
                    node.url = properties.url;
                  }
                  Object.defineProperties(node, {
                    usedBytes: {
                      get: function() {
                        return this.contents.length;
                      }
                    }
                  });
                  var stream_ops = {};
                  var keys = Object.keys(node.stream_ops);
                  keys.forEach((key) => {
                    var fn = node.stream_ops[key];
                    stream_ops[key] = function forceLoadLazyFile() {
                      FS.forceLoadFile(node);
                      return fn.apply(null, arguments);
                    };
                  });
                  stream_ops.read = (stream, buffer2, offset, length, position) => {
                    FS.forceLoadFile(node);
                    var contents = stream.node.contents;
                    if (position >= contents.length)
                      return 0;
                    var size = Math.min(contents.length - position, length);
                    assert(size >= 0);
                    if (contents.slice) {
                      for (var i = 0; i < size; i++) {
                        buffer2[offset + i] = contents[position + i];
                      }
                    } else {
                      for (var i = 0; i < size; i++) {
                        buffer2[offset + i] = contents.get(position + i);
                      }
                    }
                    return size;
                  };
                  node.stream_ops = stream_ops;
                  return node;
                }, createPreloadedFile: (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
                  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
                  var dep = getUniqueRunDependency("cp " + fullname);
                  function processData(byteArray) {
                    function finish(byteArray2) {
                      if (preFinish)
                        preFinish();
                      if (!dontCreateFile) {
                        FS.createDataFile(parent, name, byteArray2, canRead, canWrite, canOwn);
                      }
                      if (onload)
                        onload();
                      removeRunDependency(dep);
                    }
                    if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {
                      if (onerror)
                        onerror();
                      removeRunDependency(dep);
                    })) {
                      return;
                    }
                    finish(byteArray);
                  }
                  addRunDependency(dep);
                  if (typeof url == "string") {
                    asyncLoad(url, (byteArray) => processData(byteArray), onerror);
                  } else {
                    processData(url);
                  }
                }, indexedDB: () => {
                  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
                }, DB_NAME: () => {
                  return "EM_FS_" + window.location.pathname;
                }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: (paths, onload, onerror) => {
                  onload = onload || (() => {
                  });
                  onerror = onerror || (() => {
                  });
                  var indexedDB = FS.indexedDB();
                  try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return onerror(e);
                  }
                  openRequest.onupgradeneeded = () => {
                    out("creating db");
                    var db = openRequest.result;
                    db.createObjectStore(FS.DB_STORE_NAME);
                  };
                  openRequest.onsuccess = () => {
                    var db = openRequest.result;
                    var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0, fail = 0, total = paths.length;
                    function finish() {
                      if (fail == 0)
                        onload();
                      else
                        onerror();
                    }
                    paths.forEach((path) => {
                      var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                      putRequest.onsuccess = () => {
                        ok++;
                        if (ok + fail == total)
                          finish();
                      };
                      putRequest.onerror = () => {
                        fail++;
                        if (ok + fail == total)
                          finish();
                      };
                    });
                    transaction.onerror = onerror;
                  };
                  openRequest.onerror = onerror;
                }, loadFilesFromDB: (paths, onload, onerror) => {
                  onload = onload || (() => {
                  });
                  onerror = onerror || (() => {
                  });
                  var indexedDB = FS.indexedDB();
                  try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return onerror(e);
                  }
                  openRequest.onupgradeneeded = onerror;
                  openRequest.onsuccess = () => {
                    var db = openRequest.result;
                    try {
                      var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
                    } catch (e) {
                      onerror(e);
                      return;
                    }
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0, fail = 0, total = paths.length;
                    function finish() {
                      if (fail == 0)
                        onload();
                      else
                        onerror();
                    }
                    paths.forEach((path) => {
                      var getRequest = files.get(path);
                      getRequest.onsuccess = () => {
                        if (FS.analyzePath(path).exists) {
                          FS.unlink(path);
                        }
                        FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                        ok++;
                        if (ok + fail == total)
                          finish();
                      };
                      getRequest.onerror = () => {
                        fail++;
                        if (ok + fail == total)
                          finish();
                      };
                    });
                    transaction.onerror = onerror;
                  };
                  openRequest.onerror = onerror;
                }, absolutePath: () => {
                  abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
                }, createFolder: () => {
                  abort("FS.createFolder has been removed; use FS.mkdir instead");
                }, createLink: () => {
                  abort("FS.createLink has been removed; use FS.symlink instead");
                }, joinPath: () => {
                  abort("FS.joinPath has been removed; use PATH.join instead");
                }, mmapAlloc: () => {
                  abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
                }, standardizePath: () => {
                  abort("FS.standardizePath has been removed; use PATH.normalize instead");
                } };
                var SYSCALLS = { DEFAULT_POLLMASK: 5, calculateAt: function(dirfd, path, allowEmpty) {
                  if (path[0] === "/") {
                    return path;
                  }
                  var dir;
                  if (dirfd === -100) {
                    dir = FS.cwd();
                  } else {
                    var dirstream = FS.getStream(dirfd);
                    if (!dirstream)
                      throw new FS.ErrnoError(8);
                    dir = dirstream.path;
                  }
                  if (path.length == 0) {
                    if (!allowEmpty) {
                      throw new FS.ErrnoError(44);
                      ;
                    }
                    return dir;
                  }
                  return PATH.join2(dir, path);
                }, doStat: function(func, path, buf) {
                  try {
                    var stat = func(path);
                  } catch (e) {
                    if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                      return -54;
                    }
                    throw e;
                  }
                  HEAP32[buf >> 2] = stat.dev;
                  HEAP32[buf + 4 >> 2] = 0;
                  HEAP32[buf + 8 >> 2] = stat.ino;
                  HEAP32[buf + 12 >> 2] = stat.mode;
                  HEAP32[buf + 16 >> 2] = stat.nlink;
                  HEAP32[buf + 20 >> 2] = stat.uid;
                  HEAP32[buf + 24 >> 2] = stat.gid;
                  HEAP32[buf + 28 >> 2] = stat.rdev;
                  HEAP32[buf + 32 >> 2] = 0;
                  tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
                  HEAP32[buf + 48 >> 2] = 4096;
                  HEAP32[buf + 52 >> 2] = stat.blocks;
                  HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
                  HEAP32[buf + 60 >> 2] = 0;
                  HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
                  HEAP32[buf + 68 >> 2] = 0;
                  HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
                  HEAP32[buf + 76 >> 2] = 0;
                  tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
                  return 0;
                }, doMsync: function(addr, stream, len, flags, offset) {
                  var buffer2 = HEAPU8.slice(addr, addr + len);
                  FS.msync(stream, buffer2, offset, len, flags);
                }, doMkdir: function(path, mode) {
                  path = PATH.normalize(path);
                  if (path[path.length - 1] === "/")
                    path = path.substr(0, path.length - 1);
                  FS.mkdir(path, mode, 0);
                  return 0;
                }, doMknod: function(path, mode, dev) {
                  switch (mode & 61440) {
                    case 32768:
                    case 8192:
                    case 24576:
                    case 4096:
                    case 49152:
                      break;
                    default:
                      return -28;
                  }
                  FS.mknod(path, mode, dev);
                  return 0;
                }, doReadlink: function(path, buf, bufsize) {
                  if (bufsize <= 0)
                    return -28;
                  var ret = FS.readlink(path);
                  var len = Math.min(bufsize, lengthBytesUTF8(ret));
                  var endChar = HEAP8[buf + len];
                  stringToUTF8(ret, buf, bufsize + 1);
                  HEAP8[buf + len] = endChar;
                  return len;
                }, doAccess: function(path, amode) {
                  if (amode & ~7) {
                    return -28;
                  }
                  var lookup = FS.lookupPath(path, { follow: true });
                  var node = lookup.node;
                  if (!node) {
                    return -44;
                  }
                  var perms = "";
                  if (amode & 4)
                    perms += "r";
                  if (amode & 2)
                    perms += "w";
                  if (amode & 1)
                    perms += "x";
                  if (perms && FS.nodePermissions(node, perms)) {
                    return -2;
                  }
                  return 0;
                }, doDup: function(path, flags, suggestFD) {
                  var suggest = FS.getStream(suggestFD);
                  if (suggest)
                    FS.close(suggest);
                  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
                }, doReadv: function(stream, iov, iovcnt, offset) {
                  var ret = 0;
                  for (var i = 0; i < iovcnt; i++) {
                    var ptr = HEAP32[iov + i * 8 >> 2];
                    var len = HEAP32[iov + (i * 8 + 4) >> 2];
                    var curr = FS.read(stream, HEAP8, ptr, len, offset);
                    if (curr < 0)
                      return -1;
                    ret += curr;
                    if (curr < len)
                      break;
                  }
                  return ret;
                }, doWritev: function(stream, iov, iovcnt, offset) {
                  var ret = 0;
                  for (var i = 0; i < iovcnt; i++) {
                    var ptr = HEAP32[iov + i * 8 >> 2];
                    var len = HEAP32[iov + (i * 8 + 4) >> 2];
                    var curr = FS.write(stream, HEAP8, ptr, len, offset);
                    if (curr < 0)
                      return -1;
                    ret += curr;
                  }
                  return ret;
                }, varargs: void 0, get: function() {
                  assert(SYSCALLS.varargs != void 0);
                  SYSCALLS.varargs += 4;
                  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
                  return ret;
                }, getStr: function(ptr) {
                  var ret = UTF8ToString(ptr);
                  return ret;
                }, getStreamFromFD: function(fd) {
                  var stream = FS.getStream(fd);
                  if (!stream)
                    throw new FS.ErrnoError(8);
                  return stream;
                }, get64: function(low, high) {
                  if (low >= 0)
                    assert(high === 0);
                  else
                    assert(high === -1);
                  return low;
                } };
                function _fd_close(fd) {
                  try {
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    FS.close(stream);
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _fd_read(fd, iov, iovcnt, pnum) {
                  try {
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var num = SYSCALLS.doReadv(stream, iov, iovcnt);
                    HEAP32[pnum >> 2] = num;
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
                  try {
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var HIGH_OFFSET = 4294967296;
                    var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
                    var DOUBLE_LIMIT = 9007199254740992;
                    if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
                      return -61;
                    }
                    FS.llseek(stream, offset, whence);
                    tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
                    if (stream.getdents && offset === 0 && whence === 0)
                      stream.getdents = null;
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _fd_write(fd, iov, iovcnt, pnum) {
                  try {
                    ;
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var num = SYSCALLS.doWritev(stream, iov, iovcnt);
                    HEAP32[pnum >> 2] = num;
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _gettimeofday(ptr) {
                  var now = Date.now();
                  HEAP32[ptr >> 2] = now / 1e3 | 0;
                  HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
                  return 0;
                }
                function _setTempRet0(val) {
                  setTempRet0(val);
                }
                function runAndAbortIfError(func) {
                  try {
                    return func();
                  } catch (e) {
                    abort(e);
                  }
                }
                function callUserCallback(func, synchronous) {
                  if (runtimeExited || ABORT) {
                    err("user callback triggered after runtime exited or application aborted.  Ignoring.");
                    return;
                  }
                  if (synchronous) {
                    func();
                    return;
                  }
                  try {
                    func();
                  } catch (e) {
                    handleException(e);
                  }
                }
                function runtimeKeepalivePush() {
                  runtimeKeepaliveCounter += 1;
                }
                function runtimeKeepalivePop() {
                  assert(runtimeKeepaliveCounter > 0);
                  runtimeKeepaliveCounter -= 1;
                }
                var Asyncify = { State: { Normal: 0, Unwinding: 1, Rewinding: 2, Disabled: 3 }, state: 0, StackSize: 4096, currData: null, handleSleepReturnValue: 0, exportCallStack: [], callStackNameToId: {}, callStackIdToName: {}, callStackId: 0, asyncPromiseHandlers: null, sleepCallbacks: [], getCallStackId: function(funcName) {
                  var id = Asyncify.callStackNameToId[funcName];
                  if (id === void 0) {
                    id = Asyncify.callStackId++;
                    Asyncify.callStackNameToId[funcName] = id;
                    Asyncify.callStackIdToName[id] = funcName;
                  }
                  return id;
                }, instrumentWasmImports: function(imports) {
                  var ASYNCIFY_IMPORTS = ["env.qts_host_call_function", "env.qts_host_load_module_source", "env.qts_host_normalize_module", "env.invoke_*", "env.emscripten_sleep", "env.emscripten_wget", "env.emscripten_wget_data", "env.emscripten_idb_load", "env.emscripten_idb_store", "env.emscripten_idb_delete", "env.emscripten_idb_exists", "env.emscripten_idb_load_blob", "env.emscripten_idb_store_blob", "env.SDL_Delay", "env.emscripten_scan_registers", "env.emscripten_lazy_load_code", "env.emscripten_fiber_swap", "wasi_snapshot_preview1.fd_sync", "env.__wasi_fd_sync", "env._emval_await", "env._dlopen_js", "env.__asyncjs__*"].map((x2) => x2.split(".")[1]);
                  for (var x in imports) {
                    (function(x2) {
                      var original = imports[x2];
                      if (typeof original == "function") {
                        imports[x2] = function() {
                          var originalAsyncifyState = Asyncify.state;
                          try {
                            return original.apply(null, arguments);
                          } finally {
                            var isAsyncifyImport = ASYNCIFY_IMPORTS.indexOf(x2) >= 0 || x2.startsWith("__asyncjs__");
                            var changedToDisabled = originalAsyncifyState === Asyncify.State.Normal && Asyncify.state === Asyncify.State.Disabled;
                            var ignoredInvoke = x2.startsWith("invoke_") && true;
                            if (Asyncify.state !== originalAsyncifyState && !isAsyncifyImport && !changedToDisabled && !ignoredInvoke) {
                              throw new Error("import " + x2 + " was not in ASYNCIFY_IMPORTS, but changed the state");
                            }
                          }
                        };
                      }
                    })(x);
                  }
                }, instrumentWasmExports: function(exports4) {
                  var ret = {};
                  for (var x in exports4) {
                    (function(x2) {
                      var original = exports4[x2];
                      if (typeof original == "function") {
                        ret[x2] = function() {
                          Asyncify.exportCallStack.push(x2);
                          try {
                            return original.apply(null, arguments);
                          } finally {
                            if (!ABORT) {
                              var y = Asyncify.exportCallStack.pop();
                              assert(y === x2);
                              Asyncify.maybeStopUnwind();
                            }
                          }
                        };
                      } else {
                        ret[x2] = original;
                      }
                    })(x);
                  }
                  return ret;
                }, maybeStopUnwind: function() {
                  if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
                    Asyncify.state = Asyncify.State.Normal;
                    runAndAbortIfError(Module["_asyncify_stop_unwind"]);
                    if (typeof Fibers != "undefined") {
                      Fibers.trampoline();
                    }
                  }
                }, whenDone: function() {
                  assert(Asyncify.currData, "Tried to wait for an async operation when none is in progress.");
                  assert(!Asyncify.asyncPromiseHandlers, "Cannot have multiple async operations in flight at once");
                  return new Promise((resolve, reject) => {
                    Asyncify.asyncPromiseHandlers = {
                      resolve,
                      reject
                    };
                  });
                }, allocateData: function() {
                  var ptr = _malloc(12 + Asyncify.StackSize);
                  Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
                  Asyncify.setDataRewindFunc(ptr);
                  return ptr;
                }, setDataHeader: function(ptr, stack, stackSize) {
                  HEAP32[ptr >> 2] = stack;
                  HEAP32[ptr + 4 >> 2] = stack + stackSize;
                }, setDataRewindFunc: function(ptr) {
                  var bottomOfCallStack = Asyncify.exportCallStack[0];
                  var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
                  HEAP32[ptr + 8 >> 2] = rewindId;
                }, getDataRewindFunc: function(ptr) {
                  var id = HEAP32[ptr + 8 >> 2];
                  var name = Asyncify.callStackIdToName[id];
                  var func = Module["asm"][name];
                  return func;
                }, doRewind: function(ptr) {
                  var start = Asyncify.getDataRewindFunc(ptr);
                  return start();
                }, handleSleep: function(startAsync) {
                  assert(Asyncify.state !== Asyncify.State.Disabled, "Asyncify cannot be done during or after the runtime exits");
                  if (ABORT)
                    return;
                  if (Asyncify.state === Asyncify.State.Normal) {
                    var reachedCallback = false;
                    var reachedAfterCallback = false;
                    startAsync((handleSleepReturnValue) => {
                      assert(!handleSleepReturnValue || typeof handleSleepReturnValue == "number" || typeof handleSleepReturnValue == "boolean");
                      if (ABORT)
                        return;
                      Asyncify.handleSleepReturnValue = handleSleepReturnValue || 0;
                      reachedCallback = true;
                      if (!reachedAfterCallback) {
                        return;
                      }
                      assert(!Asyncify.exportCallStack.length, "Waking up (starting to rewind) must be done from JS, without compiled code on the stack.");
                      Asyncify.state = Asyncify.State.Rewinding;
                      runAndAbortIfError(() => Module["_asyncify_start_rewind"](Asyncify.currData));
                      if (typeof Browser != "undefined" && Browser.mainLoop.func) {
                        Browser.mainLoop.resume();
                      }
                      var asyncWasmReturnValue, isError = false;
                      try {
                        asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
                      } catch (err2) {
                        asyncWasmReturnValue = err2;
                        isError = true;
                      }
                      var handled = false;
                      if (!Asyncify.currData) {
                        var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
                        if (asyncPromiseHandlers) {
                          Asyncify.asyncPromiseHandlers = null;
                          (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
                          handled = true;
                        }
                      }
                      if (isError && !handled) {
                        throw asyncWasmReturnValue;
                      }
                    });
                    reachedAfterCallback = true;
                    if (!reachedCallback) {
                      Asyncify.state = Asyncify.State.Unwinding;
                      Asyncify.currData = Asyncify.allocateData();
                      runAndAbortIfError(() => Module["_asyncify_start_unwind"](Asyncify.currData));
                      if (typeof Browser != "undefined" && Browser.mainLoop.func) {
                        Browser.mainLoop.pause();
                      }
                    }
                  } else if (Asyncify.state === Asyncify.State.Rewinding) {
                    Asyncify.state = Asyncify.State.Normal;
                    runAndAbortIfError(Module["_asyncify_stop_rewind"]);
                    _free(Asyncify.currData);
                    Asyncify.currData = null;
                    Asyncify.sleepCallbacks.forEach((func) => callUserCallback(func));
                  } else {
                    abort("invalid state: " + Asyncify.state);
                  }
                  return Asyncify.handleSleepReturnValue;
                }, handleAsync: function(startAsync) {
                  return Asyncify.handleSleep((wakeUp) => {
                    startAsync().then(wakeUp);
                  });
                } };
                var FSNode = function(parent, name, mode, rdev) {
                  if (!parent) {
                    parent = this;
                  }
                  this.parent = parent;
                  this.mount = parent.mount;
                  this.mounted = null;
                  this.id = FS.nextInode++;
                  this.name = name;
                  this.mode = mode;
                  this.node_ops = {};
                  this.stream_ops = {};
                  this.rdev = rdev;
                };
                var readMode = 292 | 73;
                var writeMode = 146;
                Object.defineProperties(FSNode.prototype, {
                  read: {
                    get: function() {
                      return (this.mode & readMode) === readMode;
                    },
                    set: function(val) {
                      val ? this.mode |= readMode : this.mode &= ~readMode;
                    }
                  },
                  write: {
                    get: function() {
                      return (this.mode & writeMode) === writeMode;
                    },
                    set: function(val) {
                      val ? this.mode |= writeMode : this.mode &= ~writeMode;
                    }
                  },
                  isFolder: {
                    get: function() {
                      return FS.isDir(this.mode);
                    }
                  },
                  isDevice: {
                    get: function() {
                      return FS.isChrdev(this.mode);
                    }
                  }
                });
                FS.FSNode = FSNode;
                FS.staticInit();
                ;
                ERRNO_CODES = {
                  "EPERM": 63,
                  "ENOENT": 44,
                  "ESRCH": 71,
                  "EINTR": 27,
                  "EIO": 29,
                  "ENXIO": 60,
                  "E2BIG": 1,
                  "ENOEXEC": 45,
                  "EBADF": 8,
                  "ECHILD": 12,
                  "EAGAIN": 6,
                  "EWOULDBLOCK": 6,
                  "ENOMEM": 48,
                  "EACCES": 2,
                  "EFAULT": 21,
                  "ENOTBLK": 105,
                  "EBUSY": 10,
                  "EEXIST": 20,
                  "EXDEV": 75,
                  "ENODEV": 43,
                  "ENOTDIR": 54,
                  "EISDIR": 31,
                  "EINVAL": 28,
                  "ENFILE": 41,
                  "EMFILE": 33,
                  "ENOTTY": 59,
                  "ETXTBSY": 74,
                  "EFBIG": 22,
                  "ENOSPC": 51,
                  "ESPIPE": 70,
                  "EROFS": 69,
                  "EMLINK": 34,
                  "EPIPE": 64,
                  "EDOM": 18,
                  "ERANGE": 68,
                  "ENOMSG": 49,
                  "EIDRM": 24,
                  "ECHRNG": 106,
                  "EL2NSYNC": 156,
                  "EL3HLT": 107,
                  "EL3RST": 108,
                  "ELNRNG": 109,
                  "EUNATCH": 110,
                  "ENOCSI": 111,
                  "EL2HLT": 112,
                  "EDEADLK": 16,
                  "ENOLCK": 46,
                  "EBADE": 113,
                  "EBADR": 114,
                  "EXFULL": 115,
                  "ENOANO": 104,
                  "EBADRQC": 103,
                  "EBADSLT": 102,
                  "EDEADLOCK": 16,
                  "EBFONT": 101,
                  "ENOSTR": 100,
                  "ENODATA": 116,
                  "ETIME": 117,
                  "ENOSR": 118,
                  "ENONET": 119,
                  "ENOPKG": 120,
                  "EREMOTE": 121,
                  "ENOLINK": 47,
                  "EADV": 122,
                  "ESRMNT": 123,
                  "ECOMM": 124,
                  "EPROTO": 65,
                  "EMULTIHOP": 36,
                  "EDOTDOT": 125,
                  "EBADMSG": 9,
                  "ENOTUNIQ": 126,
                  "EBADFD": 127,
                  "EREMCHG": 128,
                  "ELIBACC": 129,
                  "ELIBBAD": 130,
                  "ELIBSCN": 131,
                  "ELIBMAX": 132,
                  "ELIBEXEC": 133,
                  "ENOSYS": 52,
                  "ENOTEMPTY": 55,
                  "ENAMETOOLONG": 37,
                  "ELOOP": 32,
                  "EOPNOTSUPP": 138,
                  "EPFNOSUPPORT": 139,
                  "ECONNRESET": 15,
                  "ENOBUFS": 42,
                  "EAFNOSUPPORT": 5,
                  "EPROTOTYPE": 67,
                  "ENOTSOCK": 57,
                  "ENOPROTOOPT": 50,
                  "ESHUTDOWN": 140,
                  "ECONNREFUSED": 14,
                  "EADDRINUSE": 3,
                  "ECONNABORTED": 13,
                  "ENETUNREACH": 40,
                  "ENETDOWN": 38,
                  "ETIMEDOUT": 73,
                  "EHOSTDOWN": 142,
                  "EHOSTUNREACH": 23,
                  "EINPROGRESS": 26,
                  "EALREADY": 7,
                  "EDESTADDRREQ": 17,
                  "EMSGSIZE": 35,
                  "EPROTONOSUPPORT": 66,
                  "ESOCKTNOSUPPORT": 137,
                  "EADDRNOTAVAIL": 4,
                  "ENETRESET": 39,
                  "EISCONN": 30,
                  "ENOTCONN": 53,
                  "ETOOMANYREFS": 141,
                  "EUSERS": 136,
                  "EDQUOT": 19,
                  "ESTALE": 72,
                  "ENOTSUP": 138,
                  "ENOMEDIUM": 148,
                  "EILSEQ": 25,
                  "EOVERFLOW": 61,
                  "ECANCELED": 11,
                  "ENOTRECOVERABLE": 56,
                  "EOWNERDEAD": 62,
                  "ESTRPIPE": 135
                };
                ;
                var ASSERTIONS = true;
                function intArrayFromString(stringy, dontAddNull, length) {
                  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
                  var u8array = new Array(len);
                  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
                  if (dontAddNull)
                    u8array.length = numBytesWritten;
                  return u8array;
                }
                function intArrayToString(array) {
                  var ret = [];
                  for (var i = 0; i < array.length; i++) {
                    var chr = array[i];
                    if (chr > 255) {
                      if (ASSERTIONS) {
                        assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
                      }
                      chr &= 255;
                    }
                    ret.push(String.fromCharCode(chr));
                  }
                  return ret.join("");
                }
                function checkIncomingModuleAPI() {
                  ignoredModuleProp("fetchSettings");
                }
                var asmLibraryArg = {
                  "__assert_fail": ___assert_fail,
                  "_localtime_js": __localtime_js,
                  "_tzset_js": __tzset_js,
                  "abort": _abort,
                  "emscripten_memcpy_big": _emscripten_memcpy_big,
                  "emscripten_resize_heap": _emscripten_resize_heap,
                  "fd_close": _fd_close,
                  "fd_read": _fd_read,
                  "fd_seek": _fd_seek,
                  "fd_write": _fd_write,
                  "gettimeofday": _gettimeofday,
                  "qts_host_call_function": qts_host_call_function,
                  "qts_host_interrupt_handler": qts_host_interrupt_handler,
                  "qts_host_load_module_source": qts_host_load_module_source,
                  "qts_host_normalize_module": qts_host_normalize_module,
                  "setTempRet0": _setTempRet0
                };
                Asyncify.instrumentWasmImports(asmLibraryArg);
                var asm = createWasm();
                var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");
                var _malloc = Module["_malloc"] = createExportWrapper("malloc");
                var _QTS_Throw = Module["_QTS_Throw"] = createExportWrapper("QTS_Throw");
                var _QTS_NewError = Module["_QTS_NewError"] = createExportWrapper("QTS_NewError");
                var _QTS_RuntimeSetMemoryLimit = Module["_QTS_RuntimeSetMemoryLimit"] = createExportWrapper("QTS_RuntimeSetMemoryLimit");
                var _QTS_RuntimeComputeMemoryUsage = Module["_QTS_RuntimeComputeMemoryUsage"] = createExportWrapper("QTS_RuntimeComputeMemoryUsage");
                var _QTS_RuntimeDumpMemoryUsage = Module["_QTS_RuntimeDumpMemoryUsage"] = createExportWrapper("QTS_RuntimeDumpMemoryUsage");
                var _QTS_RecoverableLeakCheck = Module["_QTS_RecoverableLeakCheck"] = createExportWrapper("QTS_RecoverableLeakCheck");
                var _QTS_BuildIsSanitizeLeak = Module["_QTS_BuildIsSanitizeLeak"] = createExportWrapper("QTS_BuildIsSanitizeLeak");
                var _QTS_GetUndefined = Module["_QTS_GetUndefined"] = createExportWrapper("QTS_GetUndefined");
                var _QTS_GetNull = Module["_QTS_GetNull"] = createExportWrapper("QTS_GetNull");
                var _QTS_GetFalse = Module["_QTS_GetFalse"] = createExportWrapper("QTS_GetFalse");
                var _QTS_GetTrue = Module["_QTS_GetTrue"] = createExportWrapper("QTS_GetTrue");
                var _QTS_NewRuntime = Module["_QTS_NewRuntime"] = createExportWrapper("QTS_NewRuntime");
                var _QTS_FreeRuntime = Module["_QTS_FreeRuntime"] = createExportWrapper("QTS_FreeRuntime");
                var _QTS_NewContext = Module["_QTS_NewContext"] = createExportWrapper("QTS_NewContext");
                var _QTS_FreeContext = Module["_QTS_FreeContext"] = createExportWrapper("QTS_FreeContext");
                var _QTS_FreeValuePointer = Module["_QTS_FreeValuePointer"] = createExportWrapper("QTS_FreeValuePointer");
                var _free = Module["_free"] = createExportWrapper("free");
                var _QTS_FreeValuePointerRuntime = Module["_QTS_FreeValuePointerRuntime"] = createExportWrapper("QTS_FreeValuePointerRuntime");
                var _QTS_FreeVoidPointer = Module["_QTS_FreeVoidPointer"] = createExportWrapper("QTS_FreeVoidPointer");
                var _QTS_FreeCString = Module["_QTS_FreeCString"] = createExportWrapper("QTS_FreeCString");
                var _QTS_DupValuePointer = Module["_QTS_DupValuePointer"] = createExportWrapper("QTS_DupValuePointer");
                var _QTS_NewObject = Module["_QTS_NewObject"] = createExportWrapper("QTS_NewObject");
                var _QTS_NewObjectProto = Module["_QTS_NewObjectProto"] = createExportWrapper("QTS_NewObjectProto");
                var _QTS_NewArray = Module["_QTS_NewArray"] = createExportWrapper("QTS_NewArray");
                var _QTS_NewFloat64 = Module["_QTS_NewFloat64"] = createExportWrapper("QTS_NewFloat64");
                var _QTS_GetFloat64 = Module["_QTS_GetFloat64"] = createExportWrapper("QTS_GetFloat64");
                var _QTS_NewString = Module["_QTS_NewString"] = createExportWrapper("QTS_NewString");
                var _QTS_GetString = Module["_QTS_GetString"] = createExportWrapper("QTS_GetString");
                var _QTS_IsJobPending = Module["_QTS_IsJobPending"] = createExportWrapper("QTS_IsJobPending");
                var _QTS_ExecutePendingJob = Module["_QTS_ExecutePendingJob"] = createExportWrapper("QTS_ExecutePendingJob");
                var _QTS_GetProp = Module["_QTS_GetProp"] = createExportWrapper("QTS_GetProp");
                var _QTS_SetProp = Module["_QTS_SetProp"] = createExportWrapper("QTS_SetProp");
                var _QTS_DefineProp = Module["_QTS_DefineProp"] = createExportWrapper("QTS_DefineProp");
                var _QTS_Call = Module["_QTS_Call"] = createExportWrapper("QTS_Call");
                var _QTS_ResolveException = Module["_QTS_ResolveException"] = createExportWrapper("QTS_ResolveException");
                var _QTS_Dump = Module["_QTS_Dump"] = createExportWrapper("QTS_Dump");
                var _QTS_Eval = Module["_QTS_Eval"] = createExportWrapper("QTS_Eval");
                var _QTS_Typeof = Module["_QTS_Typeof"] = createExportWrapper("QTS_Typeof");
                var _QTS_GetGlobalObject = Module["_QTS_GetGlobalObject"] = createExportWrapper("QTS_GetGlobalObject");
                var _QTS_NewPromiseCapability = Module["_QTS_NewPromiseCapability"] = createExportWrapper("QTS_NewPromiseCapability");
                var _QTS_TestStringArg = Module["_QTS_TestStringArg"] = createExportWrapper("QTS_TestStringArg");
                var _QTS_BuildIsDebug = Module["_QTS_BuildIsDebug"] = createExportWrapper("QTS_BuildIsDebug");
                var _QTS_BuildIsAsyncify = Module["_QTS_BuildIsAsyncify"] = createExportWrapper("QTS_BuildIsAsyncify");
                var _QTS_NewFunction = Module["_QTS_NewFunction"] = createExportWrapper("QTS_NewFunction");
                var _QTS_ArgvGetJSValueConstPointer = Module["_QTS_ArgvGetJSValueConstPointer"] = createExportWrapper("QTS_ArgvGetJSValueConstPointer");
                var _QTS_RuntimeEnableInterruptHandler = Module["_QTS_RuntimeEnableInterruptHandler"] = createExportWrapper("QTS_RuntimeEnableInterruptHandler");
                var _QTS_RuntimeDisableInterruptHandler = Module["_QTS_RuntimeDisableInterruptHandler"] = createExportWrapper("QTS_RuntimeDisableInterruptHandler");
                var _QTS_RuntimeEnableModuleLoader = Module["_QTS_RuntimeEnableModuleLoader"] = createExportWrapper("QTS_RuntimeEnableModuleLoader");
                var _QTS_RuntimeDisableModuleLoader = Module["_QTS_RuntimeDisableModuleLoader"] = createExportWrapper("QTS_RuntimeDisableModuleLoader");
                var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");
                var ___stdio_exit = Module["___stdio_exit"] = createExportWrapper("__stdio_exit");
                var ___dl_seterr = Module["___dl_seterr"] = createExportWrapper("__dl_seterr");
                var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = createExportWrapper("emscripten_main_thread_process_queued_calls");
                var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
                  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
                };
                var _emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = function() {
                  return (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = Module["asm"]["emscripten_stack_set_limits"]).apply(null, arguments);
                };
                var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
                  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
                };
                var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
                  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
                };
                var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
                  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
                };
                var stackSave = Module["stackSave"] = createExportWrapper("stackSave");
                var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");
                var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");
                var dynCall_jijiii = Module["dynCall_jijiii"] = createExportWrapper("dynCall_jijiii");
                var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii");
                var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii");
                var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii");
                var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii");
                var dynCall_jijjiii = Module["dynCall_jijjiii"] = createExportWrapper("dynCall_jijjiii");
                var dynCall_jiii = Module["dynCall_jiii"] = createExportWrapper("dynCall_jiii");
                var dynCall_jijiiii = Module["dynCall_jijiiii"] = createExportWrapper("dynCall_jijiiii");
                var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii");
                var dynCall_jijii = Module["dynCall_jijii"] = createExportWrapper("dynCall_jijii");
                var dynCall_jijiiiii = Module["dynCall_jijiiiii"] = createExportWrapper("dynCall_jijiiiii");
                var dynCall_jijj = Module["dynCall_jijj"] = createExportWrapper("dynCall_jijj");
                var dynCall_viji = Module["dynCall_viji"] = createExportWrapper("dynCall_viji");
                var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");
                var dynCall_viii = Module["dynCall_viii"] = createExportWrapper("dynCall_viii");
                var dynCall_iijijjji = Module["dynCall_iijijjji"] = createExportWrapper("dynCall_iijijjji");
                var dynCall_iiiji = Module["dynCall_iiiji"] = createExportWrapper("dynCall_iiiji");
                var dynCall_iiji = Module["dynCall_iiji"] = createExportWrapper("dynCall_iiji");
                var dynCall_iiiij = Module["dynCall_iiiij"] = createExportWrapper("dynCall_iiiij");
                var dynCall_jijij = Module["dynCall_jijij"] = createExportWrapper("dynCall_jijij");
                var dynCall_iijijji = Module["dynCall_iijijji"] = createExportWrapper("dynCall_iijijji");
                var dynCall_jiiii = Module["dynCall_jiiii"] = createExportWrapper("dynCall_jiiii");
                var dynCall_jij = Module["dynCall_jij"] = createExportWrapper("dynCall_jij");
                var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");
                var dynCall_dd = Module["dynCall_dd"] = createExportWrapper("dynCall_dd");
                var dynCall_ddd = Module["dynCall_ddd"] = createExportWrapper("dynCall_ddd");
                var dynCall_jii = Module["dynCall_jii"] = createExportWrapper("dynCall_jii");
                var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii");
                var _asyncify_start_unwind = Module["_asyncify_start_unwind"] = createExportWrapper("asyncify_start_unwind");
                var _asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = createExportWrapper("asyncify_stop_unwind");
                var _asyncify_start_rewind = Module["_asyncify_start_rewind"] = createExportWrapper("asyncify_start_rewind");
                var _asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = createExportWrapper("asyncify_stop_rewind");
                unexportedRuntimeFunction("intArrayFromString", false);
                unexportedRuntimeFunction("intArrayToString", false);
                unexportedRuntimeFunction("ccall", false);
                Module["cwrap"] = cwrap;
                unexportedRuntimeFunction("setValue", false);
                unexportedRuntimeFunction("getValue", false);
                unexportedRuntimeFunction("allocate", false);
                unexportedRuntimeFunction("UTF8ArrayToString", false);
                Module["UTF8ToString"] = UTF8ToString;
                unexportedRuntimeFunction("stringToUTF8Array", false);
                Module["stringToUTF8"] = stringToUTF8;
                Module["lengthBytesUTF8"] = lengthBytesUTF8;
                unexportedRuntimeFunction("stackTrace", false);
                unexportedRuntimeFunction("addOnPreRun", false);
                unexportedRuntimeFunction("addOnInit", false);
                unexportedRuntimeFunction("addOnPreMain", false);
                unexportedRuntimeFunction("addOnExit", false);
                unexportedRuntimeFunction("addOnPostRun", false);
                unexportedRuntimeFunction("writeStringToMemory", false);
                unexportedRuntimeFunction("writeArrayToMemory", false);
                unexportedRuntimeFunction("writeAsciiToMemory", false);
                unexportedRuntimeFunction("addRunDependency", true);
                unexportedRuntimeFunction("removeRunDependency", true);
                unexportedRuntimeFunction("FS_createFolder", false);
                unexportedRuntimeFunction("FS_createPath", true);
                unexportedRuntimeFunction("FS_createDataFile", true);
                unexportedRuntimeFunction("FS_createPreloadedFile", true);
                unexportedRuntimeFunction("FS_createLazyFile", true);
                unexportedRuntimeFunction("FS_createLink", false);
                unexportedRuntimeFunction("FS_createDevice", true);
                unexportedRuntimeFunction("FS_unlink", true);
                unexportedRuntimeFunction("getLEB", false);
                unexportedRuntimeFunction("getFunctionTables", false);
                unexportedRuntimeFunction("alignFunctionTables", false);
                unexportedRuntimeFunction("registerFunctions", false);
                unexportedRuntimeFunction("addFunction", false);
                unexportedRuntimeFunction("removeFunction", false);
                unexportedRuntimeFunction("getFuncWrapper", false);
                unexportedRuntimeFunction("prettyPrint", false);
                unexportedRuntimeFunction("dynCall", false);
                unexportedRuntimeFunction("getCompilerSetting", false);
                unexportedRuntimeFunction("print", false);
                unexportedRuntimeFunction("printErr", false);
                unexportedRuntimeFunction("getTempRet0", false);
                unexportedRuntimeFunction("setTempRet0", false);
                unexportedRuntimeFunction("callMain", false);
                unexportedRuntimeFunction("abort", false);
                unexportedRuntimeFunction("keepRuntimeAlive", false);
                unexportedRuntimeFunction("zeroMemory", false);
                unexportedRuntimeFunction("stringToNewUTF8", false);
                unexportedRuntimeFunction("emscripten_realloc_buffer", false);
                unexportedRuntimeFunction("ENV", false);
                unexportedRuntimeFunction("withStackSave", false);
                unexportedRuntimeFunction("ERRNO_CODES", false);
                unexportedRuntimeFunction("ERRNO_MESSAGES", false);
                unexportedRuntimeFunction("setErrNo", false);
                unexportedRuntimeFunction("inetPton4", false);
                unexportedRuntimeFunction("inetNtop4", false);
                unexportedRuntimeFunction("inetPton6", false);
                unexportedRuntimeFunction("inetNtop6", false);
                unexportedRuntimeFunction("readSockaddr", false);
                unexportedRuntimeFunction("writeSockaddr", false);
                unexportedRuntimeFunction("DNS", false);
                unexportedRuntimeFunction("getHostByName", false);
                unexportedRuntimeFunction("Protocols", false);
                unexportedRuntimeFunction("Sockets", false);
                unexportedRuntimeFunction("getRandomDevice", false);
                unexportedRuntimeFunction("traverseStack", false);
                unexportedRuntimeFunction("convertFrameToPC", false);
                unexportedRuntimeFunction("UNWIND_CACHE", false);
                unexportedRuntimeFunction("saveInUnwindCache", false);
                unexportedRuntimeFunction("convertPCtoSourceLocation", false);
                unexportedRuntimeFunction("readAsmConstArgsArray", false);
                unexportedRuntimeFunction("readAsmConstArgs", false);
                unexportedRuntimeFunction("mainThreadEM_ASM", false);
                unexportedRuntimeFunction("jstoi_q", false);
                unexportedRuntimeFunction("jstoi_s", false);
                unexportedRuntimeFunction("getExecutableName", false);
                unexportedRuntimeFunction("listenOnce", false);
                unexportedRuntimeFunction("autoResumeAudioContext", false);
                unexportedRuntimeFunction("dynCallLegacy", false);
                unexportedRuntimeFunction("getDynCaller", false);
                unexportedRuntimeFunction("dynCall", false);
                unexportedRuntimeFunction("callRuntimeCallbacks", false);
                unexportedRuntimeFunction("wasmTableMirror", false);
                unexportedRuntimeFunction("setWasmTableEntry", false);
                unexportedRuntimeFunction("getWasmTableEntry", false);
                unexportedRuntimeFunction("handleException", false);
                unexportedRuntimeFunction("runtimeKeepalivePush", false);
                unexportedRuntimeFunction("runtimeKeepalivePop", false);
                unexportedRuntimeFunction("callUserCallback", false);
                unexportedRuntimeFunction("maybeExit", false);
                unexportedRuntimeFunction("safeSetTimeout", false);
                unexportedRuntimeFunction("asmjsMangle", false);
                unexportedRuntimeFunction("asyncLoad", false);
                unexportedRuntimeFunction("alignMemory", false);
                unexportedRuntimeFunction("mmapAlloc", false);
                unexportedRuntimeFunction("reallyNegative", false);
                unexportedRuntimeFunction("unSign", false);
                unexportedRuntimeFunction("reSign", false);
                unexportedRuntimeFunction("formatString", false);
                unexportedRuntimeFunction("PATH", false);
                unexportedRuntimeFunction("PATH_FS", false);
                unexportedRuntimeFunction("SYSCALLS", false);
                unexportedRuntimeFunction("getSocketFromFD", false);
                unexportedRuntimeFunction("getSocketAddress", false);
                unexportedRuntimeFunction("JSEvents", false);
                unexportedRuntimeFunction("registerKeyEventCallback", false);
                unexportedRuntimeFunction("specialHTMLTargets", false);
                unexportedRuntimeFunction("maybeCStringToJsString", false);
                unexportedRuntimeFunction("findEventTarget", false);
                unexportedRuntimeFunction("findCanvasEventTarget", false);
                unexportedRuntimeFunction("getBoundingClientRect", false);
                unexportedRuntimeFunction("fillMouseEventData", false);
                unexportedRuntimeFunction("registerMouseEventCallback", false);
                unexportedRuntimeFunction("registerWheelEventCallback", false);
                unexportedRuntimeFunction("registerUiEventCallback", false);
                unexportedRuntimeFunction("registerFocusEventCallback", false);
                unexportedRuntimeFunction("fillDeviceOrientationEventData", false);
                unexportedRuntimeFunction("registerDeviceOrientationEventCallback", false);
                unexportedRuntimeFunction("fillDeviceMotionEventData", false);
                unexportedRuntimeFunction("registerDeviceMotionEventCallback", false);
                unexportedRuntimeFunction("screenOrientation", false);
                unexportedRuntimeFunction("fillOrientationChangeEventData", false);
                unexportedRuntimeFunction("registerOrientationChangeEventCallback", false);
                unexportedRuntimeFunction("fillFullscreenChangeEventData", false);
                unexportedRuntimeFunction("registerFullscreenChangeEventCallback", false);
                unexportedRuntimeFunction("registerRestoreOldStyle", false);
                unexportedRuntimeFunction("hideEverythingExceptGivenElement", false);
                unexportedRuntimeFunction("restoreHiddenElements", false);
                unexportedRuntimeFunction("setLetterbox", false);
                unexportedRuntimeFunction("currentFullscreenStrategy", false);
                unexportedRuntimeFunction("restoreOldWindowedStyle", false);
                unexportedRuntimeFunction("softFullscreenResizeWebGLRenderTarget", false);
                unexportedRuntimeFunction("doRequestFullscreen", false);
                unexportedRuntimeFunction("fillPointerlockChangeEventData", false);
                unexportedRuntimeFunction("registerPointerlockChangeEventCallback", false);
                unexportedRuntimeFunction("registerPointerlockErrorEventCallback", false);
                unexportedRuntimeFunction("requestPointerLock", false);
                unexportedRuntimeFunction("fillVisibilityChangeEventData", false);
                unexportedRuntimeFunction("registerVisibilityChangeEventCallback", false);
                unexportedRuntimeFunction("registerTouchEventCallback", false);
                unexportedRuntimeFunction("fillGamepadEventData", false);
                unexportedRuntimeFunction("registerGamepadEventCallback", false);
                unexportedRuntimeFunction("registerBeforeUnloadEventCallback", false);
                unexportedRuntimeFunction("fillBatteryEventData", false);
                unexportedRuntimeFunction("battery", false);
                unexportedRuntimeFunction("registerBatteryEventCallback", false);
                unexportedRuntimeFunction("setCanvasElementSize", false);
                unexportedRuntimeFunction("getCanvasElementSize", false);
                unexportedRuntimeFunction("demangle", false);
                unexportedRuntimeFunction("demangleAll", false);
                unexportedRuntimeFunction("jsStackTrace", false);
                unexportedRuntimeFunction("stackTrace", false);
                unexportedRuntimeFunction("getEnvStrings", false);
                unexportedRuntimeFunction("checkWasiClock", false);
                unexportedRuntimeFunction("writeI53ToI64", false);
                unexportedRuntimeFunction("writeI53ToI64Clamped", false);
                unexportedRuntimeFunction("writeI53ToI64Signaling", false);
                unexportedRuntimeFunction("writeI53ToU64Clamped", false);
                unexportedRuntimeFunction("writeI53ToU64Signaling", false);
                unexportedRuntimeFunction("readI53FromI64", false);
                unexportedRuntimeFunction("readI53FromU64", false);
                unexportedRuntimeFunction("convertI32PairToI53", false);
                unexportedRuntimeFunction("convertU32PairToI53", false);
                unexportedRuntimeFunction("setImmediateWrapped", false);
                unexportedRuntimeFunction("clearImmediateWrapped", false);
                unexportedRuntimeFunction("polyfillSetImmediate", false);
                unexportedRuntimeFunction("uncaughtExceptionCount", false);
                unexportedRuntimeFunction("exceptionLast", false);
                unexportedRuntimeFunction("exceptionCaught", false);
                unexportedRuntimeFunction("ExceptionInfo", false);
                unexportedRuntimeFunction("CatchInfo", false);
                unexportedRuntimeFunction("exception_addRef", false);
                unexportedRuntimeFunction("exception_decRef", false);
                unexportedRuntimeFunction("Browser", false);
                unexportedRuntimeFunction("funcWrappers", false);
                unexportedRuntimeFunction("getFuncWrapper", false);
                unexportedRuntimeFunction("setMainLoop", false);
                unexportedRuntimeFunction("wget", false);
                unexportedRuntimeFunction("FS", false);
                unexportedRuntimeFunction("MEMFS", false);
                unexportedRuntimeFunction("TTY", false);
                unexportedRuntimeFunction("PIPEFS", false);
                unexportedRuntimeFunction("SOCKFS", false);
                unexportedRuntimeFunction("_setNetworkCallback", false);
                unexportedRuntimeFunction("tempFixedLengthArray", false);
                unexportedRuntimeFunction("miniTempWebGLFloatBuffers", false);
                unexportedRuntimeFunction("heapObjectForWebGLType", false);
                unexportedRuntimeFunction("heapAccessShiftForWebGLHeap", false);
                unexportedRuntimeFunction("GL", false);
                unexportedRuntimeFunction("emscriptenWebGLGet", false);
                unexportedRuntimeFunction("computeUnpackAlignedImageSize", false);
                unexportedRuntimeFunction("emscriptenWebGLGetTexPixelData", false);
                unexportedRuntimeFunction("emscriptenWebGLGetUniform", false);
                unexportedRuntimeFunction("webglGetUniformLocation", false);
                unexportedRuntimeFunction("webglPrepareUniformLocationsBeforeFirstUse", false);
                unexportedRuntimeFunction("webglGetLeftBracePos", false);
                unexportedRuntimeFunction("emscriptenWebGLGetVertexAttrib", false);
                unexportedRuntimeFunction("writeGLArray", false);
                unexportedRuntimeFunction("AL", false);
                unexportedRuntimeFunction("SDL_unicode", false);
                unexportedRuntimeFunction("SDL_ttfContext", false);
                unexportedRuntimeFunction("SDL_audio", false);
                unexportedRuntimeFunction("SDL", false);
                unexportedRuntimeFunction("SDL_gfx", false);
                unexportedRuntimeFunction("GLUT", false);
                unexportedRuntimeFunction("EGL", false);
                unexportedRuntimeFunction("GLFW_Window", false);
                unexportedRuntimeFunction("GLFW", false);
                unexportedRuntimeFunction("GLEW", false);
                unexportedRuntimeFunction("IDBStore", false);
                unexportedRuntimeFunction("runAndAbortIfError", false);
                unexportedRuntimeFunction("Asyncify", false);
                unexportedRuntimeFunction("Fibers", false);
                unexportedRuntimeFunction("warnOnce", false);
                unexportedRuntimeFunction("stackSave", false);
                unexportedRuntimeFunction("stackRestore", false);
                unexportedRuntimeFunction("stackAlloc", false);
                unexportedRuntimeFunction("AsciiToString", false);
                unexportedRuntimeFunction("stringToAscii", false);
                unexportedRuntimeFunction("UTF16ToString", false);
                unexportedRuntimeFunction("stringToUTF16", false);
                unexportedRuntimeFunction("lengthBytesUTF16", false);
                unexportedRuntimeFunction("UTF32ToString", false);
                unexportedRuntimeFunction("stringToUTF32", false);
                unexportedRuntimeFunction("lengthBytesUTF32", false);
                unexportedRuntimeFunction("allocateUTF8", false);
                unexportedRuntimeFunction("allocateUTF8OnStack", false);
                Module["writeStackCookie"] = writeStackCookie;
                Module["checkStackCookie"] = checkStackCookie;
                unexportedRuntimeSymbol("ALLOC_NORMAL", false);
                unexportedRuntimeSymbol("ALLOC_STACK", false);
                var calledRun;
                function ExitStatus(status) {
                  this.name = "ExitStatus";
                  this.message = "Program terminated with exit(" + status + ")";
                  this.status = status;
                }
                var calledMain = false;
                dependenciesFulfilled = function runCaller() {
                  if (!calledRun)
                    run();
                  if (!calledRun)
                    dependenciesFulfilled = runCaller;
                };
                function stackCheckInit() {
                  _emscripten_stack_init();
                  writeStackCookie();
                }
                function run(args) {
                  args = args || arguments_;
                  if (runDependencies > 0) {
                    return;
                  }
                  stackCheckInit();
                  preRun();
                  if (runDependencies > 0) {
                    return;
                  }
                  function doRun() {
                    if (calledRun)
                      return;
                    calledRun = true;
                    Module["calledRun"] = true;
                    if (ABORT)
                      return;
                    initRuntime();
                    readyPromiseResolve(Module);
                    if (Module["onRuntimeInitialized"])
                      Module["onRuntimeInitialized"]();
                    assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
                    postRun();
                  }
                  if (Module["setStatus"]) {
                    Module["setStatus"]("Running...");
                    setTimeout(function() {
                      setTimeout(function() {
                        Module["setStatus"]("");
                      }, 1);
                      doRun();
                    }, 1);
                  } else {
                    doRun();
                  }
                  checkStackCookie();
                }
                Module["run"] = run;
                function checkUnflushedContent() {
                  var oldOut = out;
                  var oldErr = err;
                  var has = false;
                  out = err = (x) => {
                    has = true;
                  };
                  try {
                    ___stdio_exit();
                    ["stdout", "stderr"].forEach(function(name) {
                      var info = FS.analyzePath("/dev/" + name);
                      if (!info)
                        return;
                      var stream = info.object;
                      var rdev = stream.rdev;
                      var tty = TTY.ttys[rdev];
                      if (tty && tty.output && tty.output.length) {
                        has = true;
                      }
                    });
                  } catch (e) {
                  }
                  out = oldOut;
                  err = oldErr;
                  if (has) {
                    warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
                  }
                }
                function exit(status, implicit) {
                  EXITSTATUS = status;
                  if (!runtimeKeepaliveCounter) {
                    checkUnflushedContent();
                  }
                  if (keepRuntimeAlive()) {
                    if (!implicit) {
                      var msg = "program exited (with status: " + status + "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
                      readyPromiseReject(msg);
                      err(msg);
                    }
                  } else {
                    exitRuntime();
                  }
                  procExit(status);
                }
                function procExit(code) {
                  EXITSTATUS = code;
                  if (!keepRuntimeAlive()) {
                    if (Module["onExit"])
                      Module["onExit"](code);
                    ABORT = true;
                  }
                  quit_(code, new ExitStatus(code));
                }
                if (Module["preInit"]) {
                  if (typeof Module["preInit"] == "function")
                    Module["preInit"] = [Module["preInit"]];
                  while (Module["preInit"].length > 0) {
                    Module["preInit"].pop()();
                  }
                }
                run();
                return QuickJSRaw2.ready;
              };
            })();
            if (typeof exports3 === "object" && typeof module3 === "object")
              module3.exports = QuickJSRaw;
            else if (typeof define2 === "function" && define2["amd"])
              define2([], function() {
                return QuickJSRaw;
              });
            else if (typeof exports3 === "object")
              exports3["QuickJSRaw"] = QuickJSRaw;
          }).call(this);
        }).call(this, require2("_process"), require2("buffer").Buffer, "/node_modules/quickjs-emscripten/dist/generated/emscripten-module.WASM_DEBUG_ASYNCIFY.js", arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/quickjs-emscripten/dist/generated");
      }, { "_process": 151, "buffer": 63, "crypto": 72, "fs": 62, "path": 144 }], 166: [function(require2, module3, exports3) {
        (function(process, Buffer2, __filename, __argument0, __argument1, __argument2, __argument3, __dirname) {
          (function() {
            "use strict";
            var QuickJSRaw = (() => {
              var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
              if (typeof __filename !== "undefined")
                _scriptDir = _scriptDir || __filename;
              return function(QuickJSRaw2) {
                QuickJSRaw2 = QuickJSRaw2 || {};
                var Module = typeof QuickJSRaw2 != "undefined" ? QuickJSRaw2 : {};
                var readyPromiseResolve, readyPromiseReject;
                Module["ready"] = new Promise(function(resolve, reject) {
                  readyPromiseResolve = resolve;
                  readyPromiseReject = reject;
                });
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Throw")) {
                  Object.defineProperty(Module["ready"], "_QTS_Throw", { configurable: true, get: function() {
                    abort("You are getting _QTS_Throw on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Throw", { configurable: true, set: function() {
                    abort("You are setting _QTS_Throw on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewError")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewError", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewError on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewError", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewError on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeSetMemoryLimit")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeSetMemoryLimit", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeSetMemoryLimit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeSetMemoryLimit", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeSetMemoryLimit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeComputeMemoryUsage")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeComputeMemoryUsage", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeComputeMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeComputeMemoryUsage", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeComputeMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeDumpMemoryUsage")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDumpMemoryUsage", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeDumpMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDumpMemoryUsage", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeDumpMemoryUsage on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RecoverableLeakCheck")) {
                  Object.defineProperty(Module["ready"], "_QTS_RecoverableLeakCheck", { configurable: true, get: function() {
                    abort("You are getting _QTS_RecoverableLeakCheck on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RecoverableLeakCheck", { configurable: true, set: function() {
                    abort("You are setting _QTS_RecoverableLeakCheck on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_BuildIsSanitizeLeak")) {
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsSanitizeLeak", { configurable: true, get: function() {
                    abort("You are getting _QTS_BuildIsSanitizeLeak on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsSanitizeLeak", { configurable: true, set: function() {
                    abort("You are setting _QTS_BuildIsSanitizeLeak on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetUndefined")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetUndefined", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetUndefined on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetUndefined", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetUndefined on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetNull")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetNull", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetNull on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetNull", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetNull on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetFalse")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetFalse", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetFalse on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetFalse", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetFalse on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetTrue")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetTrue", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetTrue on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetTrue", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetTrue on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewRuntime")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewRuntime", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewRuntime", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeRuntime")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeRuntime", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeRuntime", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewContext")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewContext", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewContext", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeContext")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeContext", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeContext", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeContext on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeValuePointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeValuePointerRuntime")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointerRuntime", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeValuePointerRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeValuePointerRuntime", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeValuePointerRuntime on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeVoidPointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeVoidPointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeVoidPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeVoidPointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeVoidPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_FreeCString")) {
                  Object.defineProperty(Module["ready"], "_QTS_FreeCString", { configurable: true, get: function() {
                    abort("You are getting _QTS_FreeCString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_FreeCString", { configurable: true, set: function() {
                    abort("You are setting _QTS_FreeCString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_DupValuePointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_DupValuePointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_DupValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_DupValuePointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_DupValuePointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewObject")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewObject", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewObject", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewObjectProto")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewObjectProto", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewObjectProto on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewObjectProto", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewObjectProto on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewArray")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewArray", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewArray on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewArray", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewArray on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewFloat64")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewFloat64", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewFloat64", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetFloat64")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetFloat64", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetFloat64", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetFloat64 on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewString")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewString", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewString", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetString")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetString", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetString", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_IsJobPending")) {
                  Object.defineProperty(Module["ready"], "_QTS_IsJobPending", { configurable: true, get: function() {
                    abort("You are getting _QTS_IsJobPending on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_IsJobPending", { configurable: true, set: function() {
                    abort("You are setting _QTS_IsJobPending on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_ExecutePendingJob")) {
                  Object.defineProperty(Module["ready"], "_QTS_ExecutePendingJob", { configurable: true, get: function() {
                    abort("You are getting _QTS_ExecutePendingJob on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_ExecutePendingJob", { configurable: true, set: function() {
                    abort("You are setting _QTS_ExecutePendingJob on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetProp")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetProp", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetProp", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_SetProp")) {
                  Object.defineProperty(Module["ready"], "_QTS_SetProp", { configurable: true, get: function() {
                    abort("You are getting _QTS_SetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_SetProp", { configurable: true, set: function() {
                    abort("You are setting _QTS_SetProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_DefineProp")) {
                  Object.defineProperty(Module["ready"], "_QTS_DefineProp", { configurable: true, get: function() {
                    abort("You are getting _QTS_DefineProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_DefineProp", { configurable: true, set: function() {
                    abort("You are setting _QTS_DefineProp on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Call")) {
                  Object.defineProperty(Module["ready"], "_QTS_Call", { configurable: true, get: function() {
                    abort("You are getting _QTS_Call on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Call", { configurable: true, set: function() {
                    abort("You are setting _QTS_Call on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_ResolveException")) {
                  Object.defineProperty(Module["ready"], "_QTS_ResolveException", { configurable: true, get: function() {
                    abort("You are getting _QTS_ResolveException on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_ResolveException", { configurable: true, set: function() {
                    abort("You are setting _QTS_ResolveException on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Dump")) {
                  Object.defineProperty(Module["ready"], "_QTS_Dump", { configurable: true, get: function() {
                    abort("You are getting _QTS_Dump on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Dump", { configurable: true, set: function() {
                    abort("You are setting _QTS_Dump on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Eval")) {
                  Object.defineProperty(Module["ready"], "_QTS_Eval", { configurable: true, get: function() {
                    abort("You are getting _QTS_Eval on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Eval", { configurable: true, set: function() {
                    abort("You are setting _QTS_Eval on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_Typeof")) {
                  Object.defineProperty(Module["ready"], "_QTS_Typeof", { configurable: true, get: function() {
                    abort("You are getting _QTS_Typeof on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_Typeof", { configurable: true, set: function() {
                    abort("You are setting _QTS_Typeof on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_GetGlobalObject")) {
                  Object.defineProperty(Module["ready"], "_QTS_GetGlobalObject", { configurable: true, get: function() {
                    abort("You are getting _QTS_GetGlobalObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_GetGlobalObject", { configurable: true, set: function() {
                    abort("You are setting _QTS_GetGlobalObject on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewPromiseCapability")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewPromiseCapability", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewPromiseCapability on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewPromiseCapability", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewPromiseCapability on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_TestStringArg")) {
                  Object.defineProperty(Module["ready"], "_QTS_TestStringArg", { configurable: true, get: function() {
                    abort("You are getting _QTS_TestStringArg on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_TestStringArg", { configurable: true, set: function() {
                    abort("You are setting _QTS_TestStringArg on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_BuildIsDebug")) {
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsDebug", { configurable: true, get: function() {
                    abort("You are getting _QTS_BuildIsDebug on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsDebug", { configurable: true, set: function() {
                    abort("You are setting _QTS_BuildIsDebug on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_BuildIsAsyncify")) {
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsAsyncify", { configurable: true, get: function() {
                    abort("You are getting _QTS_BuildIsAsyncify on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_BuildIsAsyncify", { configurable: true, set: function() {
                    abort("You are setting _QTS_BuildIsAsyncify on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_NewFunction")) {
                  Object.defineProperty(Module["ready"], "_QTS_NewFunction", { configurable: true, get: function() {
                    abort("You are getting _QTS_NewFunction on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_NewFunction", { configurable: true, set: function() {
                    abort("You are setting _QTS_NewFunction on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_ArgvGetJSValueConstPointer")) {
                  Object.defineProperty(Module["ready"], "_QTS_ArgvGetJSValueConstPointer", { configurable: true, get: function() {
                    abort("You are getting _QTS_ArgvGetJSValueConstPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_ArgvGetJSValueConstPointer", { configurable: true, set: function() {
                    abort("You are setting _QTS_ArgvGetJSValueConstPointer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeEnableInterruptHandler")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableInterruptHandler", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeEnableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableInterruptHandler", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeEnableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeDisableInterruptHandler")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableInterruptHandler", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeDisableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableInterruptHandler", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeDisableInterruptHandler on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeEnableModuleLoader")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableModuleLoader", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeEnableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeEnableModuleLoader", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeEnableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_QTS_RuntimeDisableModuleLoader")) {
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableModuleLoader", { configurable: true, get: function() {
                    abort("You are getting _QTS_RuntimeDisableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_QTS_RuntimeDisableModuleLoader", { configurable: true, set: function() {
                    abort("You are setting _QTS_RuntimeDisableModuleLoader on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_malloc")) {
                  Object.defineProperty(Module["ready"], "_malloc", { configurable: true, get: function() {
                    abort("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_malloc", { configurable: true, set: function() {
                    abort("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "_free")) {
                  Object.defineProperty(Module["ready"], "_free", { configurable: true, get: function() {
                    abort("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "_free", { configurable: true, set: function() {
                    abort("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "___stdio_exit")) {
                  Object.defineProperty(Module["ready"], "___stdio_exit", { configurable: true, get: function() {
                    abort("You are getting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "___stdio_exit", { configurable: true, set: function() {
                    abort("You are setting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                if (!Object.getOwnPropertyDescriptor(Module["ready"], "onRuntimeInitialized")) {
                  Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, get: function() {
                    abort("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                  Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, set: function() {
                    abort("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                  } });
                }
                var moduleOverrides = Object.assign({}, Module);
                var arguments_ = [];
                var thisProgram = "./this.program";
                var quit_ = (status, toThrow) => {
                  throw toThrow;
                };
                var ENVIRONMENT_IS_WEB = typeof window == "object";
                var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
                var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
                var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
                if (Module["ENVIRONMENT"]) {
                  throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
                }
                var scriptDirectory = "";
                function locateFile(path) {
                  if (Module["locateFile"]) {
                    return Module["locateFile"](path, scriptDirectory);
                  }
                  return scriptDirectory + path;
                }
                var read_, readAsync, readBinary, setWindowTitle;
                function logExceptionOnExit(e) {
                  if (e instanceof ExitStatus)
                    return;
                  let toLog = e;
                  if (e && typeof e == "object" && e.stack) {
                    toLog = [e, e.stack];
                  }
                  err("exiting due to exception: " + toLog);
                }
                var fs;
                var nodePath;
                var requireNodeFS;
                if (ENVIRONMENT_IS_NODE) {
                  if (!(typeof process == "object" && typeof require2 == "function"))
                    throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
                  if (ENVIRONMENT_IS_WORKER) {
                    scriptDirectory = require2("path").dirname(scriptDirectory) + "/";
                  } else {
                    scriptDirectory = __dirname + "/";
                  }
                  requireNodeFS = () => {
                    if (!nodePath) {
                      fs = require2("fs");
                      nodePath = require2("path");
                    }
                  };
                  read_ = function shell_read(filename, binary) {
                    requireNodeFS();
                    filename = nodePath["normalize"](filename);
                    return fs.readFileSync(filename, binary ? void 0 : "utf8");
                  };
                  readBinary = (filename) => {
                    var ret = read_(filename, true);
                    if (!ret.buffer) {
                      ret = new Uint8Array(ret);
                    }
                    assert(ret.buffer);
                    return ret;
                  };
                  readAsync = (filename, onload, onerror) => {
                    requireNodeFS();
                    filename = nodePath["normalize"](filename);
                    fs.readFile(filename, function(err2, data) {
                      if (err2)
                        onerror(err2);
                      else
                        onload(data.buffer);
                    });
                  };
                  if (process["argv"].length > 1) {
                    thisProgram = process["argv"][1].replace(/\\/g, "/");
                  }
                  arguments_ = process["argv"].slice(2);
                  process["on"]("unhandledRejection", function(reason) {
                    throw reason;
                  });
                  quit_ = (status, toThrow) => {
                    if (keepRuntimeAlive()) {
                      process["exitCode"] = status;
                      throw toThrow;
                    }
                    logExceptionOnExit(toThrow);
                    process["exit"](status);
                  };
                  Module["inspect"] = function() {
                    return "[Emscripten Module object]";
                  };
                } else if (ENVIRONMENT_IS_SHELL) {
                  if (typeof process == "object" && typeof require2 === "function" || typeof window == "object" || typeof importScripts == "function")
                    throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
                  if (typeof read != "undefined") {
                    read_ = function shell_read(f) {
                      return read(f);
                    };
                  }
                  readBinary = function readBinary2(f) {
                    let data;
                    if (typeof readbuffer == "function") {
                      return new Uint8Array(readbuffer(f));
                    }
                    data = read(f, "binary");
                    assert(typeof data == "object");
                    return data;
                  };
                  readAsync = function readAsync2(f, onload, onerror) {
                    setTimeout(() => onload(readBinary(f)), 0);
                  };
                  if (typeof scriptArgs != "undefined") {
                    arguments_ = scriptArgs;
                  } else if (typeof arguments != "undefined") {
                    arguments_ = arguments;
                  }
                  if (typeof quit == "function") {
                    quit_ = (status, toThrow) => {
                      if (runtimeKeepaliveCounter) {
                        throw toThrow;
                      }
                      logExceptionOnExit(toThrow);
                      quit(status);
                    };
                  }
                  if (typeof print != "undefined") {
                    if (typeof console == "undefined")
                      console = {};
                    console.log = print;
                    console.warn = console.error = typeof printErr != "undefined" ? printErr : print;
                  }
                } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
                  if (ENVIRONMENT_IS_WORKER) {
                    scriptDirectory = self.location.href;
                  } else if (typeof document != "undefined" && document.currentScript) {
                    scriptDirectory = document.currentScript.src;
                  }
                  if (_scriptDir) {
                    scriptDirectory = _scriptDir;
                  }
                  if (scriptDirectory.indexOf("blob:") !== 0) {
                    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
                  } else {
                    scriptDirectory = "";
                  }
                  if (!(typeof window == "object" || typeof importScripts == "function"))
                    throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
                  {
                    read_ = (url) => {
                      var xhr = new XMLHttpRequest();
                      xhr.open("GET", url, false);
                      xhr.send(null);
                      return xhr.responseText;
                    };
                    if (ENVIRONMENT_IS_WORKER) {
                      readBinary = (url) => {
                        var xhr = new XMLHttpRequest();
                        xhr.open("GET", url, false);
                        xhr.responseType = "arraybuffer";
                        xhr.send(null);
                        return new Uint8Array(xhr.response);
                      };
                    }
                    readAsync = (url, onload, onerror) => {
                      var xhr = new XMLHttpRequest();
                      xhr.open("GET", url, true);
                      xhr.responseType = "arraybuffer";
                      xhr.onload = () => {
                        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                          onload(xhr.response);
                          return;
                        }
                        onerror();
                      };
                      xhr.onerror = onerror;
                      xhr.send(null);
                    };
                  }
                  setWindowTitle = (title) => document.title = title;
                } else {
                  throw new Error("environment detection error");
                }
                var out = Module["print"] || console.log.bind(console);
                var err = Module["printErr"] || console.warn.bind(console);
                Object.assign(Module, moduleOverrides);
                moduleOverrides = null;
                checkIncomingModuleAPI();
                if (Module["arguments"])
                  arguments_ = Module["arguments"];
                legacyModuleProp("arguments", "arguments_");
                if (Module["thisProgram"])
                  thisProgram = Module["thisProgram"];
                legacyModuleProp("thisProgram", "thisProgram");
                if (Module["quit"])
                  quit_ = Module["quit"];
                legacyModuleProp("quit", "quit_");
                assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
                assert(typeof Module["read"] == "undefined", "Module.read option was removed (modify read_ in JS)");
                assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
                assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
                assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");
                assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
                legacyModuleProp("read", "read_");
                legacyModuleProp("readAsync", "readAsync");
                legacyModuleProp("readBinary", "readBinary");
                legacyModuleProp("setWindowTitle", "setWindowTitle");
                var IDBFS = "IDBFS is no longer included by default; build with -lidbfs.js";
                var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";
                var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";
                var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";
                assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");
                var STACK_ALIGN = 16;
                var POINTER_SIZE = 4;
                function getNativeTypeSize(type) {
                  switch (type) {
                    case "i1":
                    case "i8":
                      return 1;
                    case "i16":
                      return 2;
                    case "i32":
                      return 4;
                    case "i64":
                      return 8;
                    case "float":
                      return 4;
                    case "double":
                      return 8;
                    default: {
                      if (type[type.length - 1] === "*") {
                        return POINTER_SIZE;
                      } else if (type[0] === "i") {
                        const bits = Number(type.substr(1));
                        assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
                        return bits / 8;
                      } else {
                        return 0;
                      }
                    }
                  }
                }
                function warnOnce(text) {
                  if (!warnOnce.shown)
                    warnOnce.shown = {};
                  if (!warnOnce.shown[text]) {
                    warnOnce.shown[text] = 1;
                    err(text);
                  }
                }
                function convertJsFunctionToWasm(func, sig) {
                  if (typeof WebAssembly.Function == "function") {
                    var typeNames = {
                      "i": "i32",
                      "j": "i64",
                      "f": "f32",
                      "d": "f64"
                    };
                    var type = {
                      parameters: [],
                      results: sig[0] == "v" ? [] : [typeNames[sig[0]]]
                    };
                    for (var i = 1; i < sig.length; ++i) {
                      type.parameters.push(typeNames[sig[i]]);
                    }
                    return new WebAssembly.Function(type, func);
                  }
                  var typeSection = [
                    1,
                    0,
                    1,
                    96
                  ];
                  var sigRet = sig.slice(0, 1);
                  var sigParam = sig.slice(1);
                  var typeCodes = {
                    "i": 127,
                    "j": 126,
                    "f": 125,
                    "d": 124
                  };
                  typeSection.push(sigParam.length);
                  for (var i = 0; i < sigParam.length; ++i) {
                    typeSection.push(typeCodes[sigParam[i]]);
                  }
                  if (sigRet == "v") {
                    typeSection.push(0);
                  } else {
                    typeSection = typeSection.concat([1, typeCodes[sigRet]]);
                  }
                  typeSection[1] = typeSection.length - 2;
                  var bytes = new Uint8Array([
                    0,
                    97,
                    115,
                    109,
                    1,
                    0,
                    0,
                    0
                  ].concat(typeSection, [
                    2,
                    7,
                    1,
                    1,
                    101,
                    1,
                    102,
                    0,
                    0,
                    7,
                    5,
                    1,
                    1,
                    102,
                    0,
                    0
                  ]));
                  var module4 = new WebAssembly.Module(bytes);
                  var instance = new WebAssembly.Instance(module4, {
                    "e": {
                      "f": func
                    }
                  });
                  var wrappedFunc = instance.exports["f"];
                  return wrappedFunc;
                }
                var freeTableIndexes = [];
                var functionsInTableMap;
                function getEmptyTableSlot() {
                  if (freeTableIndexes.length) {
                    return freeTableIndexes.pop();
                  }
                  try {
                    wasmTable.grow(1);
                  } catch (err2) {
                    if (!(err2 instanceof RangeError)) {
                      throw err2;
                    }
                    throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
                  }
                  return wasmTable.length - 1;
                }
                function updateTableMap(offset, count) {
                  for (var i = offset; i < offset + count; i++) {
                    var item = getWasmTableEntry(i);
                    if (item) {
                      functionsInTableMap.set(item, i);
                    }
                  }
                }
                function addFunction(func, sig) {
                  assert(typeof func != "undefined");
                  if (!functionsInTableMap) {
                    functionsInTableMap = /* @__PURE__ */ new WeakMap();
                    updateTableMap(0, wasmTable.length);
                  }
                  if (functionsInTableMap.has(func)) {
                    return functionsInTableMap.get(func);
                  }
                  var ret = getEmptyTableSlot();
                  try {
                    setWasmTableEntry(ret, func);
                  } catch (err2) {
                    if (!(err2 instanceof TypeError)) {
                      throw err2;
                    }
                    assert(typeof sig != "undefined", "Missing signature argument to addFunction: " + func);
                    var wrapped = convertJsFunctionToWasm(func, sig);
                    setWasmTableEntry(ret, wrapped);
                  }
                  functionsInTableMap.set(func, ret);
                  return ret;
                }
                function removeFunction(index) {
                  functionsInTableMap.delete(getWasmTableEntry(index));
                  freeTableIndexes.push(index);
                }
                function legacyModuleProp(prop, newName) {
                  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
                    Object.defineProperty(Module, prop, {
                      configurable: true,
                      get: function() {
                        abort("Module." + prop + " has been replaced with plain " + newName + " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
                      }
                    });
                  }
                }
                function ignoredModuleProp(prop) {
                  if (Object.getOwnPropertyDescriptor(Module, prop)) {
                    abort("`Module." + prop + "` was supplied but `" + prop + "` not included in INCOMING_MODULE_JS_API");
                  }
                }
                function unexportedMessage(sym, isFSSybol) {
                  var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
                  if (isFSSybol) {
                    msg += ". Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you";
                  }
                  return msg;
                }
                function unexportedRuntimeSymbol(sym, isFSSybol) {
                  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
                    Object.defineProperty(Module, sym, {
                      configurable: true,
                      get: function() {
                        abort(unexportedMessage(sym, isFSSybol));
                      }
                    });
                  }
                }
                function unexportedRuntimeFunction(sym, isFSSybol) {
                  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
                    Module[sym] = () => abort(unexportedMessage(sym, isFSSybol));
                  }
                }
                var tempRet0 = 0;
                var setTempRet0 = (value) => {
                  tempRet0 = value;
                };
                var getTempRet0 = () => tempRet0;
                var wasmBinary;
                if (Module["wasmBinary"])
                  wasmBinary = Module["wasmBinary"];
                legacyModuleProp("wasmBinary", "wasmBinary");
                var noExitRuntime = Module["noExitRuntime"] || false;
                legacyModuleProp("noExitRuntime", "noExitRuntime");
                if (typeof WebAssembly != "object") {
                  abort("no native wasm support detected");
                }
                function setValue(ptr, value, type = "i8", noSafe) {
                  if (type.charAt(type.length - 1) === "*")
                    type = "i32";
                  switch (type) {
                    case "i1":
                      HEAP8[ptr >> 0] = value;
                      break;
                    case "i8":
                      HEAP8[ptr >> 0] = value;
                      break;
                    case "i16":
                      HEAP16[ptr >> 1] = value;
                      break;
                    case "i32":
                      HEAP32[ptr >> 2] = value;
                      break;
                    case "i64":
                      tempI64 = [value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
                      break;
                    case "float":
                      HEAPF32[ptr >> 2] = value;
                      break;
                    case "double":
                      HEAPF64[ptr >> 3] = value;
                      break;
                    default:
                      abort("invalid type for setValue: " + type);
                  }
                }
                function getValue(ptr, type = "i8", noSafe) {
                  if (type.charAt(type.length - 1) === "*")
                    type = "i32";
                  switch (type) {
                    case "i1":
                      return HEAP8[ptr >> 0];
                    case "i8":
                      return HEAP8[ptr >> 0];
                    case "i16":
                      return HEAP16[ptr >> 1];
                    case "i32":
                      return HEAP32[ptr >> 2];
                    case "i64":
                      return HEAP32[ptr >> 2];
                    case "float":
                      return HEAPF32[ptr >> 2];
                    case "double":
                      return Number(HEAPF64[ptr >> 3]);
                    default:
                      abort("invalid type for getValue: " + type);
                  }
                  return null;
                }
                var wasmMemory;
                var ABORT = false;
                var EXITSTATUS;
                function assert(condition, text) {
                  if (!condition) {
                    abort("Assertion failed" + (text ? ": " + text : ""));
                  }
                }
                function getCFunc(ident) {
                  var func = Module["_" + ident];
                  assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
                  return func;
                }
                function ccall(ident, returnType, argTypes, args, opts) {
                  var toC = {
                    "string": function(str) {
                      var ret2 = 0;
                      if (str !== null && str !== void 0 && str !== 0) {
                        var len = (str.length << 2) + 1;
                        ret2 = stackAlloc(len);
                        stringToUTF8(str, ret2, len);
                      }
                      return ret2;
                    },
                    "array": function(arr) {
                      var ret2 = stackAlloc(arr.length);
                      writeArrayToMemory(arr, ret2);
                      return ret2;
                    }
                  };
                  function convertReturnValue(ret2) {
                    if (returnType === "string")
                      return UTF8ToString(ret2);
                    if (returnType === "boolean")
                      return Boolean(ret2);
                    return ret2;
                  }
                  var func = getCFunc(ident);
                  var cArgs = [];
                  var stack = 0;
                  assert(returnType !== "array", 'Return type should not be "array".');
                  if (args) {
                    for (var i = 0; i < args.length; i++) {
                      var converter = toC[argTypes[i]];
                      if (converter) {
                        if (stack === 0)
                          stack = stackSave();
                        cArgs[i] = converter(args[i]);
                      } else {
                        cArgs[i] = args[i];
                      }
                    }
                  }
                  var ret = func.apply(null, cArgs);
                  function onDone(ret2) {
                    if (stack !== 0)
                      stackRestore(stack);
                    return convertReturnValue(ret2);
                  }
                  ret = onDone(ret);
                  return ret;
                }
                function cwrap(ident, returnType, argTypes, opts) {
                  return function() {
                    return ccall(ident, returnType, argTypes, arguments, opts);
                  };
                }
                var ALLOC_NORMAL = 0;
                var ALLOC_STACK = 1;
                function allocate(slab, allocator) {
                  var ret;
                  assert(typeof allocator == "number", "allocate no longer takes a type argument");
                  assert(typeof slab != "number", "allocate no longer takes a number as arg0");
                  if (allocator == ALLOC_STACK) {
                    ret = stackAlloc(slab.length);
                  } else {
                    ret = _malloc(slab.length);
                  }
                  if (!slab.subarray && !slab.slice) {
                    slab = new Uint8Array(slab);
                  }
                  HEAPU8.set(slab, ret);
                  return ret;
                }
                var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
                function UTF8ArrayToString(heap, idx, maxBytesToRead) {
                  var endIdx = idx + maxBytesToRead;
                  var endPtr = idx;
                  while (heap[endPtr] && !(endPtr >= endIdx))
                    ++endPtr;
                  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
                    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
                  } else {
                    var str = "";
                    while (idx < endPtr) {
                      var u0 = heap[idx++];
                      if (!(u0 & 128)) {
                        str += String.fromCharCode(u0);
                        continue;
                      }
                      var u1 = heap[idx++] & 63;
                      if ((u0 & 224) == 192) {
                        str += String.fromCharCode((u0 & 31) << 6 | u1);
                        continue;
                      }
                      var u2 = heap[idx++] & 63;
                      if ((u0 & 240) == 224) {
                        u0 = (u0 & 15) << 12 | u1 << 6 | u2;
                      } else {
                        if ((u0 & 248) != 240)
                          warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
                        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
                      }
                      if (u0 < 65536) {
                        str += String.fromCharCode(u0);
                      } else {
                        var ch = u0 - 65536;
                        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                      }
                    }
                  }
                  return str;
                }
                function UTF8ToString(ptr, maxBytesToRead) {
                  ;
                  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
                }
                function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
                  if (!(maxBytesToWrite > 0))
                    return 0;
                  var startIdx = outIdx;
                  var endIdx = outIdx + maxBytesToWrite - 1;
                  for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 55296 && u <= 57343) {
                      var u1 = str.charCodeAt(++i);
                      u = 65536 + ((u & 1023) << 10) | u1 & 1023;
                    }
                    if (u <= 127) {
                      if (outIdx >= endIdx)
                        break;
                      heap[outIdx++] = u;
                    } else if (u <= 2047) {
                      if (outIdx + 1 >= endIdx)
                        break;
                      heap[outIdx++] = 192 | u >> 6;
                      heap[outIdx++] = 128 | u & 63;
                    } else if (u <= 65535) {
                      if (outIdx + 2 >= endIdx)
                        break;
                      heap[outIdx++] = 224 | u >> 12;
                      heap[outIdx++] = 128 | u >> 6 & 63;
                      heap[outIdx++] = 128 | u & 63;
                    } else {
                      if (outIdx + 3 >= endIdx)
                        break;
                      if (u > 1114111)
                        warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
                      heap[outIdx++] = 240 | u >> 18;
                      heap[outIdx++] = 128 | u >> 12 & 63;
                      heap[outIdx++] = 128 | u >> 6 & 63;
                      heap[outIdx++] = 128 | u & 63;
                    }
                  }
                  heap[outIdx] = 0;
                  return outIdx - startIdx;
                }
                function stringToUTF8(str, outPtr, maxBytesToWrite) {
                  assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
                  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
                }
                function lengthBytesUTF8(str) {
                  var len = 0;
                  for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 55296 && u <= 57343)
                      u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
                    if (u <= 127)
                      ++len;
                    else if (u <= 2047)
                      len += 2;
                    else if (u <= 65535)
                      len += 3;
                    else
                      len += 4;
                  }
                  return len;
                }
                function AsciiToString(ptr) {
                  var str = "";
                  while (1) {
                    var ch = HEAPU8[ptr++ >> 0];
                    if (!ch)
                      return str;
                    str += String.fromCharCode(ch);
                  }
                }
                function stringToAscii(str, outPtr) {
                  return writeAsciiToMemory(str, outPtr, false);
                }
                var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : void 0;
                function UTF16ToString(ptr, maxBytesToRead) {
                  assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
                  var endPtr = ptr;
                  var idx = endPtr >> 1;
                  var maxIdx = idx + maxBytesToRead / 2;
                  while (!(idx >= maxIdx) && HEAPU16[idx])
                    ++idx;
                  endPtr = idx << 1;
                  if (endPtr - ptr > 32 && UTF16Decoder) {
                    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
                  } else {
                    var str = "";
                    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
                      var codeUnit = HEAP16[ptr + i * 2 >> 1];
                      if (codeUnit == 0)
                        break;
                      str += String.fromCharCode(codeUnit);
                    }
                    return str;
                  }
                }
                function stringToUTF16(str, outPtr, maxBytesToWrite) {
                  assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
                  assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
                  if (maxBytesToWrite === void 0) {
                    maxBytesToWrite = 2147483647;
                  }
                  if (maxBytesToWrite < 2)
                    return 0;
                  maxBytesToWrite -= 2;
                  var startPtr = outPtr;
                  var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
                  for (var i = 0; i < numCharsToWrite; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    HEAP16[outPtr >> 1] = codeUnit;
                    outPtr += 2;
                  }
                  HEAP16[outPtr >> 1] = 0;
                  return outPtr - startPtr;
                }
                function lengthBytesUTF16(str) {
                  return str.length * 2;
                }
                function UTF32ToString(ptr, maxBytesToRead) {
                  assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
                  var i = 0;
                  var str = "";
                  while (!(i >= maxBytesToRead / 4)) {
                    var utf32 = HEAP32[ptr + i * 4 >> 2];
                    if (utf32 == 0)
                      break;
                    ++i;
                    if (utf32 >= 65536) {
                      var ch = utf32 - 65536;
                      str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                    } else {
                      str += String.fromCharCode(utf32);
                    }
                  }
                  return str;
                }
                function stringToUTF32(str, outPtr, maxBytesToWrite) {
                  assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
                  assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
                  if (maxBytesToWrite === void 0) {
                    maxBytesToWrite = 2147483647;
                  }
                  if (maxBytesToWrite < 4)
                    return 0;
                  var startPtr = outPtr;
                  var endPtr = startPtr + maxBytesToWrite - 4;
                  for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 55296 && codeUnit <= 57343) {
                      var trailSurrogate = str.charCodeAt(++i);
                      codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
                    }
                    HEAP32[outPtr >> 2] = codeUnit;
                    outPtr += 4;
                    if (outPtr + 4 > endPtr)
                      break;
                  }
                  HEAP32[outPtr >> 2] = 0;
                  return outPtr - startPtr;
                }
                function lengthBytesUTF32(str) {
                  var len = 0;
                  for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 55296 && codeUnit <= 57343)
                      ++i;
                    len += 4;
                  }
                  return len;
                }
                function allocateUTF8(str) {
                  var size = lengthBytesUTF8(str) + 1;
                  var ret = _malloc(size);
                  if (ret)
                    stringToUTF8Array(str, HEAP8, ret, size);
                  return ret;
                }
                function allocateUTF8OnStack(str) {
                  var size = lengthBytesUTF8(str) + 1;
                  var ret = stackAlloc(size);
                  stringToUTF8Array(str, HEAP8, ret, size);
                  return ret;
                }
                function writeStringToMemory(string, buffer2, dontAddNull) {
                  warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
                  var lastChar, end;
                  if (dontAddNull) {
                    end = buffer2 + lengthBytesUTF8(string);
                    lastChar = HEAP8[end];
                  }
                  stringToUTF8(string, buffer2, Infinity);
                  if (dontAddNull)
                    HEAP8[end] = lastChar;
                }
                function writeArrayToMemory(array, buffer2) {
                  assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
                  HEAP8.set(array, buffer2);
                }
                function writeAsciiToMemory(str, buffer2, dontAddNull) {
                  for (var i = 0; i < str.length; ++i) {
                    assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));
                    HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
                  }
                  if (!dontAddNull)
                    HEAP8[buffer2 >> 0] = 0;
                }
                var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
                function updateGlobalBufferAndViews(buf) {
                  buffer = buf;
                  Module["HEAP8"] = HEAP8 = new Int8Array(buf);
                  Module["HEAP16"] = HEAP16 = new Int16Array(buf);
                  Module["HEAP32"] = HEAP32 = new Int32Array(buf);
                  Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
                  Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
                  Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
                  Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
                  Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
                }
                var TOTAL_STACK = 5242880;
                if (Module["TOTAL_STACK"])
                  assert(TOTAL_STACK === Module["TOTAL_STACK"], "the stack size can no longer be determined at runtime");
                var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
                legacyModuleProp("INITIAL_MEMORY", "INITIAL_MEMORY");
                assert(INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
                assert(typeof Int32Array != "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray != void 0 && Int32Array.prototype.set != void 0, "JS engine does not provide full typed array support");
                assert(!Module["wasmMemory"], "Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally");
                assert(INITIAL_MEMORY == 16777216, "Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically");
                var wasmTable;
                function writeStackCookie() {
                  var max = _emscripten_stack_get_end();
                  assert((max & 3) == 0);
                  HEAP32[max >> 2] = 34821223;
                  HEAP32[max + 4 >> 2] = 2310721022;
                  HEAP32[0] = 1668509029;
                }
                function checkStackCookie() {
                  if (ABORT)
                    return;
                  var max = _emscripten_stack_get_end();
                  var cookie1 = HEAPU32[max >> 2];
                  var cookie2 = HEAPU32[max + 4 >> 2];
                  if (cookie1 != 34821223 || cookie2 != 2310721022) {
                    abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " 0x" + cookie1.toString(16));
                  }
                  if (HEAP32[0] !== 1668509029)
                    abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
                }
                (function() {
                  var h16 = new Int16Array(1);
                  var h8 = new Int8Array(h16.buffer);
                  h16[0] = 25459;
                  if (h8[0] !== 115 || h8[1] !== 99)
                    throw "Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)";
                })();
                var __ATPRERUN__ = [];
                var __ATINIT__ = [];
                var __ATEXIT__ = [];
                var __ATPOSTRUN__ = [];
                var runtimeInitialized = false;
                var runtimeExited = false;
                var runtimeKeepaliveCounter = 0;
                function keepRuntimeAlive() {
                  return noExitRuntime || runtimeKeepaliveCounter > 0;
                }
                function preRun() {
                  if (Module["preRun"]) {
                    if (typeof Module["preRun"] == "function")
                      Module["preRun"] = [Module["preRun"]];
                    while (Module["preRun"].length) {
                      addOnPreRun(Module["preRun"].shift());
                    }
                  }
                  callRuntimeCallbacks(__ATPRERUN__);
                }
                function initRuntime() {
                  checkStackCookie();
                  assert(!runtimeInitialized);
                  runtimeInitialized = true;
                  if (!Module["noFSInit"] && !FS.init.initialized)
                    FS.init();
                  FS.ignorePermissions = false;
                  TTY.init();
                  callRuntimeCallbacks(__ATINIT__);
                }
                function exitRuntime() {
                  checkStackCookie();
                  ___funcs_on_exit();
                  callRuntimeCallbacks(__ATEXIT__);
                  FS.quit();
                  TTY.shutdown();
                  runtimeExited = true;
                }
                function postRun() {
                  checkStackCookie();
                  if (Module["postRun"]) {
                    if (typeof Module["postRun"] == "function")
                      Module["postRun"] = [Module["postRun"]];
                    while (Module["postRun"].length) {
                      addOnPostRun(Module["postRun"].shift());
                    }
                  }
                  callRuntimeCallbacks(__ATPOSTRUN__);
                }
                function addOnPreRun(cb) {
                  __ATPRERUN__.unshift(cb);
                }
                function addOnInit(cb) {
                  __ATINIT__.unshift(cb);
                }
                function addOnExit(cb) {
                  __ATEXIT__.unshift(cb);
                }
                function addOnPostRun(cb) {
                  __ATPOSTRUN__.unshift(cb);
                }
                assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
                var runDependencies = 0;
                var runDependencyWatcher = null;
                var dependenciesFulfilled = null;
                var runDependencyTracking = {};
                function getUniqueRunDependency(id) {
                  var orig = id;
                  while (1) {
                    if (!runDependencyTracking[id])
                      return id;
                    id = orig + Math.random();
                  }
                }
                function addRunDependency(id) {
                  runDependencies++;
                  if (Module["monitorRunDependencies"]) {
                    Module["monitorRunDependencies"](runDependencies);
                  }
                  if (id) {
                    assert(!runDependencyTracking[id]);
                    runDependencyTracking[id] = 1;
                    if (runDependencyWatcher === null && typeof setInterval != "undefined") {
                      runDependencyWatcher = setInterval(function() {
                        if (ABORT) {
                          clearInterval(runDependencyWatcher);
                          runDependencyWatcher = null;
                          return;
                        }
                        var shown = false;
                        for (var dep in runDependencyTracking) {
                          if (!shown) {
                            shown = true;
                            err("still waiting on run dependencies:");
                          }
                          err("dependency: " + dep);
                        }
                        if (shown) {
                          err("(end of list)");
                        }
                      }, 1e4);
                    }
                  } else {
                    err("warning: run dependency added without ID");
                  }
                }
                function removeRunDependency(id) {
                  runDependencies--;
                  if (Module["monitorRunDependencies"]) {
                    Module["monitorRunDependencies"](runDependencies);
                  }
                  if (id) {
                    assert(runDependencyTracking[id]);
                    delete runDependencyTracking[id];
                  } else {
                    err("warning: run dependency removed without ID");
                  }
                  if (runDependencies == 0) {
                    if (runDependencyWatcher !== null) {
                      clearInterval(runDependencyWatcher);
                      runDependencyWatcher = null;
                    }
                    if (dependenciesFulfilled) {
                      var callback = dependenciesFulfilled;
                      dependenciesFulfilled = null;
                      callback();
                    }
                  }
                }
                Module["preloadedImages"] = {};
                Module["preloadedAudios"] = {};
                function abort(what) {
                  {
                    if (Module["onAbort"]) {
                      Module["onAbort"](what);
                    }
                  }
                  what = "Aborted(" + what + ")";
                  err(what);
                  ABORT = true;
                  EXITSTATUS = 1;
                  var e = new WebAssembly.RuntimeError(what);
                  readyPromiseReject(e);
                  throw e;
                }
                var dataURIPrefix = "data:application/octet-stream;base64,";
                function isDataURI(filename) {
                  return filename.startsWith(dataURIPrefix);
                }
                function isFileURI(filename) {
                  return filename.startsWith("file://");
                }
                function createExportWrapper(name, fixedasm) {
                  return function() {
                    var displayName = name;
                    var asm2 = fixedasm;
                    if (!fixedasm) {
                      asm2 = Module["asm"];
                    }
                    assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
                    assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
                    if (!asm2[name]) {
                      assert(asm2[name], "exported native function `" + displayName + "` not found");
                    }
                    return asm2[name].apply(null, arguments);
                  };
                }
                var wasmBinaryFile;
                wasmBinaryFile = "emscripten-module.WASM_DEBUG_SYNC.wasm";
                if (!isDataURI(wasmBinaryFile)) {
                  wasmBinaryFile = locateFile(wasmBinaryFile);
                }
                function getBinary(file) {
                  try {
                    if (file == wasmBinaryFile && wasmBinary) {
                      return new Uint8Array(wasmBinary);
                    }
                    if (readBinary) {
                      return readBinary(file);
                    } else {
                      throw "both async and sync fetching of the wasm failed";
                    }
                  } catch (err2) {
                    abort(err2);
                  }
                }
                function getBinaryPromise() {
                  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
                    if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) {
                      return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                        if (!response["ok"]) {
                          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                        }
                        return response["arrayBuffer"]();
                      }).catch(function() {
                        return getBinary(wasmBinaryFile);
                      });
                    } else {
                      if (readAsync) {
                        return new Promise(function(resolve, reject) {
                          readAsync(wasmBinaryFile, function(response) {
                            resolve(new Uint8Array(response));
                          }, reject);
                        });
                      }
                    }
                  }
                  return Promise.resolve().then(function() {
                    return getBinary(wasmBinaryFile);
                  });
                }
                var wasmSourceMap;
                function WasmSourceMap(sourceMap) {
                  this.version = sourceMap.version;
                  this.sources = sourceMap.sources;
                  this.names = sourceMap.names;
                  this.mapping = {};
                  this.offsets = [];
                  var vlqMap = {};
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split("").forEach(function(c, i) {
                    vlqMap[c] = i;
                  });
                  function decodeVLQ(string) {
                    var result = [];
                    var shift = 0;
                    var value = 0;
                    for (var i = 0; i < string.length; ++i) {
                      var integer = vlqMap[string[i]];
                      if (integer === void 0) {
                        throw new Error("Invalid character (" + string[i] + ")");
                      }
                      value += (integer & 31) << shift;
                      if (integer & 32) {
                        shift += 5;
                      } else {
                        var negate = value & 1;
                        value >>= 1;
                        result.push(negate ? -value : value);
                        value = shift = 0;
                      }
                    }
                    return result;
                  }
                  var offset = 0, src = 0, line = 1, col = 1, name = 0;
                  sourceMap.mappings.split(",").forEach(function(segment, index) {
                    if (!segment)
                      return;
                    var data = decodeVLQ(segment);
                    var info = {};
                    offset += data[0];
                    if (data.length >= 2)
                      info.source = src += data[1];
                    if (data.length >= 3)
                      info.line = line += data[2];
                    if (data.length >= 4)
                      info.column = col += data[3];
                    if (data.length >= 5)
                      info.name = name += data[4];
                    this.mapping[offset] = info;
                    this.offsets.push(offset);
                  }, this);
                  this.offsets.sort(function(a, b) {
                    return a - b;
                  });
                }
                WasmSourceMap.prototype.lookup = function(offset) {
                  var normalized = this.normalizeOffset(offset);
                  if (!wasmOffsetConverter.isSameFunc(offset, normalized)) {
                    return null;
                  }
                  var info = this.mapping[normalized];
                  if (!info) {
                    return null;
                  }
                  return {
                    source: this.sources[info.source],
                    line: info.line,
                    column: info.column,
                    name: this.names[info.name]
                  };
                };
                WasmSourceMap.prototype.normalizeOffset = function(offset) {
                  var lo = 0;
                  var hi = this.offsets.length;
                  var mid;
                  while (lo < hi) {
                    mid = Math.floor((lo + hi) / 2);
                    if (this.offsets[mid] > offset) {
                      hi = mid;
                    } else {
                      lo = mid + 1;
                    }
                  }
                  return this.offsets[lo - 1];
                };
                var wasmSourceMapFile = "emscripten-module.WASM_DEBUG_SYNC.wasm.map";
                if (!isDataURI(wasmBinaryFile)) {
                  wasmSourceMapFile = locateFile(wasmSourceMapFile);
                }
                function getSourceMap() {
                  try {
                    return JSON.parse(read_(wasmSourceMapFile));
                  } catch (err2) {
                    abort(err2);
                  }
                }
                function getSourceMapPromise() {
                  if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch == "function") {
                    return fetch(wasmSourceMapFile, { credentials: "same-origin" }).then(function(response) {
                      return response["json"]();
                    }).catch(function() {
                      return getSourceMap();
                    });
                  }
                  return new Promise(function(resolve, reject) {
                    resolve(getSourceMap());
                  });
                }
                var wasmOffsetConverter;
                function WasmOffsetConverter(wasmBytes, wasmModule) {
                  var offset = 8;
                  var funcidx = 0;
                  this.offset_map = {};
                  this.func_starts = [];
                  this.name_map = {};
                  this.import_functions = 0;
                  var buffer2 = wasmBytes;
                  function unsignedLEB128() {
                    var result = 0;
                    var shift = 0;
                    do {
                      var byte = buffer2[offset++];
                      result += (byte & 127) << shift;
                      shift += 7;
                    } while (byte & 128);
                    return result;
                  }
                  function skipLimits() {
                    var flags = unsignedLEB128();
                    unsignedLEB128();
                    var hasMax = (flags & 1) != 0;
                    if (hasMax) {
                      unsignedLEB128();
                    }
                  }
                  binary_parse:
                    while (offset < buffer2.length) {
                      var start = offset;
                      var type = buffer2[offset++];
                      var end = unsignedLEB128() + offset;
                      switch (type) {
                        case 2:
                          var count = unsignedLEB128();
                          while (count-- > 0) {
                            offset = unsignedLEB128() + offset;
                            offset = unsignedLEB128() + offset;
                            switch (buffer2[offset++]) {
                              case 0:
                                ++funcidx;
                                unsignedLEB128();
                                break;
                              case 1:
                                ++offset;
                                skipLimits();
                                break;
                              case 2:
                                skipLimits();
                                break;
                              case 3:
                                offset += 2;
                                break;
                              default:
                                throw "bad import kind";
                            }
                          }
                          this.import_functions = funcidx;
                          break;
                        case 10:
                          var count = unsignedLEB128();
                          while (count-- > 0) {
                            var size = unsignedLEB128();
                            this.offset_map[funcidx++] = offset;
                            this.func_starts.push(offset);
                            offset += size;
                          }
                          break binary_parse;
                      }
                      offset = end;
                    }
                  var sections = WebAssembly.Module.customSections(wasmModule, "name");
                  for (var i = 0; i < sections.length; ++i) {
                    buffer2 = new Uint8Array(sections[i]);
                    if (buffer2[0] != 1)
                      continue;
                    offset = 1;
                    unsignedLEB128();
                    var count = unsignedLEB128();
                    while (count-- > 0) {
                      var index = unsignedLEB128();
                      var length = unsignedLEB128();
                      this.name_map[index] = UTF8ArrayToString(buffer2, offset, length);
                      offset += length;
                    }
                  }
                }
                WasmOffsetConverter.prototype.convert = function(funcidx, offset) {
                  return this.offset_map[funcidx] + offset;
                };
                WasmOffsetConverter.prototype.getIndex = function(offset) {
                  var lo = 0;
                  var hi = this.func_starts.length;
                  var mid;
                  while (lo < hi) {
                    mid = Math.floor((lo + hi) / 2);
                    if (this.func_starts[mid] > offset) {
                      hi = mid;
                    } else {
                      lo = mid + 1;
                    }
                  }
                  return lo + this.import_functions - 1;
                };
                WasmOffsetConverter.prototype.isSameFunc = function(offset1, offset2) {
                  return this.getIndex(offset1) == this.getIndex(offset2);
                };
                WasmOffsetConverter.prototype.getName = function(offset) {
                  var index = this.getIndex(offset);
                  return this.name_map[index] || "wasm-function[" + index + "]";
                };
                function resetPrototype(constructor, attrs) {
                  var object = Object.create(constructor.prototype);
                  return Object.assign(object, attrs);
                }
                function createWasm() {
                  var info = {
                    "env": asmLibraryArg,
                    "wasi_snapshot_preview1": asmLibraryArg
                  };
                  function receiveInstance(instance, module4) {
                    var exports5 = instance.exports;
                    Module["asm"] = exports5;
                    wasmMemory = Module["asm"]["memory"];
                    assert(wasmMemory, "memory not found in wasm exports");
                    updateGlobalBufferAndViews(wasmMemory.buffer);
                    wasmTable = Module["asm"]["__indirect_function_table"];
                    assert(wasmTable, "table not found in wasm exports");
                    addOnInit(Module["asm"]["__wasm_call_ctors"]);
                    removeRunDependency("wasm-instantiate");
                  }
                  addRunDependency("wasm-instantiate");
                  addRunDependency("source-map");
                  function receiveSourceMapJSON(sourceMap) {
                    wasmSourceMap = new WasmSourceMap(sourceMap);
                    removeRunDependency("source-map");
                  }
                  var trueModule = Module;
                  function receiveInstantiationResult(result) {
                    assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
                    trueModule = null;
                    receiveInstance(result["instance"]);
                  }
                  function instantiateArrayBuffer(receiver) {
                    var savedBinary;
                    return getBinaryPromise().then(function(binary) {
                      savedBinary = binary;
                      return WebAssembly.instantiate(binary, info);
                    }).then(function(instance) {
                      wasmOffsetConverter = new WasmOffsetConverter(savedBinary, instance.module);
                      return instance;
                    }).then(receiver, function(reason) {
                      err("failed to asynchronously prepare wasm: " + reason);
                      if (isFileURI(wasmBinaryFile)) {
                        err("warning: Loading from a file URI (" + wasmBinaryFile + ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing");
                      }
                      abort(reason);
                    });
                  }
                  function instantiateAsync() {
                    if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch == "function") {
                      return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                        var result = WebAssembly.instantiateStreaming(response, info);
                        var clonedResponsePromise = response.clone().arrayBuffer();
                        return result.then(function(instantiationResult) {
                          clonedResponsePromise.then(function(arrayBufferResult) {
                            wasmOffsetConverter = new WasmOffsetConverter(new Uint8Array(arrayBufferResult), instantiationResult.module);
                            receiveInstantiationResult(instantiationResult);
                          }, function(reason) {
                            err("failed to initialize offset-converter: " + reason);
                          });
                        }, function(reason) {
                          err("wasm streaming compile failed: " + reason);
                          err("falling back to ArrayBuffer instantiation");
                          return instantiateArrayBuffer(receiveInstantiationResult);
                        });
                      });
                    } else {
                      return instantiateArrayBuffer(receiveInstantiationResult);
                    }
                  }
                  if (Module["instantiateWasm"]) {
                    wasmOffsetConverter = resetPrototype(WasmOffsetConverter, Module["wasmOffsetData"]);
                    wasmSourceMap = resetPrototype(WasmSourceMap, Module["wasmSourceMapData"]);
                    try {
                      var exports4 = Module["instantiateWasm"](info, receiveInstance);
                      return exports4;
                    } catch (e) {
                      err("Module.instantiateWasm callback failed with error: " + e);
                      return false;
                    }
                  }
                  instantiateAsync().catch(readyPromiseReject);
                  getSourceMapPromise().then(receiveSourceMapJSON);
                  return {};
                }
                var tempDouble;
                var tempI64;
                var ASM_CONSTS = {
                  114190: function() {
                    return withBuiltinMalloc(function() {
                      return allocateUTF8(Module["LSAN_OPTIONS"] || 0);
                    });
                  },
                  114287: function() {
                    var setting = Module["printWithColors"];
                    if (setting != null) {
                      return setting;
                    } else {
                      return ENVIRONMENT_IS_NODE && process.stderr.isTTY;
                    }
                  }
                };
                function qts_host_call_function(ctx, this_ptr, argc, argv, magic_func_id) {
                  const asyncify = void 0;
                  return Module["callbacks"]["callFunction"](asyncify, ctx, this_ptr, argc, argv, magic_func_id);
                }
                function qts_host_interrupt_handler(rt) {
                  const asyncify = void 0;
                  return Module["callbacks"]["shouldInterrupt"](asyncify, rt);
                }
                function qts_host_load_module_source(rt, ctx, module_name) {
                  const asyncify = void 0;
                  const moduleNameString = UTF8ToString(module_name);
                  return Module["callbacks"]["loadModuleSource"](asyncify, rt, ctx, moduleNameString);
                }
                function qts_host_normalize_module(rt, ctx, module_base_name, module_name) {
                  const asyncify = void 0;
                  const moduleBaseNameString = UTF8ToString(module_base_name);
                  const moduleNameString = UTF8ToString(module_name);
                  return Module["callbacks"]["normalizeModule"](asyncify, rt, ctx, moduleBaseNameString, moduleNameString);
                }
                function callRuntimeCallbacks(callbacks) {
                  while (callbacks.length > 0) {
                    var callback = callbacks.shift();
                    if (typeof callback == "function") {
                      callback(Module);
                      continue;
                    }
                    var func = callback.func;
                    if (typeof func == "number") {
                      if (callback.arg === void 0) {
                        getWasmTableEntry(func)();
                      } else {
                        getWasmTableEntry(func)(callback.arg);
                      }
                    } else {
                      func(callback.arg === void 0 ? null : callback.arg);
                    }
                  }
                }
                function withStackSave(f) {
                  var stack = stackSave();
                  var ret = f();
                  stackRestore(stack);
                  return ret;
                }
                function demangle(func) {
                  warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
                  return func;
                }
                function demangleAll(text) {
                  var regex = /\b_Z[\w\d_]+/g;
                  return text.replace(regex, function(x) {
                    var y = demangle(x);
                    return x === y ? x : y + " [" + x + "]";
                  });
                }
                var wasmTableMirror = [];
                function getWasmTableEntry(funcPtr) {
                  var func = wasmTableMirror[funcPtr];
                  if (!func) {
                    if (funcPtr >= wasmTableMirror.length)
                      wasmTableMirror.length = funcPtr + 1;
                    wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
                  }
                  assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
                  return func;
                }
                function handleException(e) {
                  if (e instanceof ExitStatus || e == "unwind") {
                    return EXITSTATUS;
                  }
                  quit_(1, e);
                }
                function jsStackTrace() {
                  var error = new Error();
                  if (!error.stack) {
                    try {
                      throw new Error();
                    } catch (e) {
                      error = e;
                    }
                    if (!error.stack) {
                      return "(no stack trace available)";
                    }
                  }
                  return error.stack.toString();
                }
                function setWasmTableEntry(idx, func) {
                  wasmTable.set(idx, func);
                  wasmTableMirror[idx] = func;
                }
                function stackTrace() {
                  var js = jsStackTrace();
                  if (Module["extraStackTrace"])
                    js += "\n" + Module["extraStackTrace"]();
                  return demangleAll(js);
                }
                function ___assert_fail(condition, filename, line, func) {
                  abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
                }
                var PATH = { splitPath: function(filename) {
                  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                  return splitPathRe.exec(filename).slice(1);
                }, normalizeArray: function(parts, allowAboveRoot) {
                  var up = 0;
                  for (var i = parts.length - 1; i >= 0; i--) {
                    var last = parts[i];
                    if (last === ".") {
                      parts.splice(i, 1);
                    } else if (last === "..") {
                      parts.splice(i, 1);
                      up++;
                    } else if (up) {
                      parts.splice(i, 1);
                      up--;
                    }
                  }
                  if (allowAboveRoot) {
                    for (; up; up--) {
                      parts.unshift("..");
                    }
                  }
                  return parts;
                }, normalize: function(path) {
                  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
                  path = PATH.normalizeArray(path.split("/").filter(function(p) {
                    return !!p;
                  }), !isAbsolute).join("/");
                  if (!path && !isAbsolute) {
                    path = ".";
                  }
                  if (path && trailingSlash) {
                    path += "/";
                  }
                  return (isAbsolute ? "/" : "") + path;
                }, dirname: function(path) {
                  var result = PATH.splitPath(path), root = result[0], dir = result[1];
                  if (!root && !dir) {
                    return ".";
                  }
                  if (dir) {
                    dir = dir.substr(0, dir.length - 1);
                  }
                  return root + dir;
                }, basename: function(path) {
                  if (path === "/")
                    return "/";
                  path = PATH.normalize(path);
                  path = path.replace(/\/$/, "");
                  var lastSlash = path.lastIndexOf("/");
                  if (lastSlash === -1)
                    return path;
                  return path.substr(lastSlash + 1);
                }, extname: function(path) {
                  return PATH.splitPath(path)[3];
                }, join: function() {
                  var paths = Array.prototype.slice.call(arguments, 0);
                  return PATH.normalize(paths.join("/"));
                }, join2: function(l, r) {
                  return PATH.normalize(l + "/" + r);
                } };
                function getRandomDevice() {
                  if (typeof crypto == "object" && typeof crypto["getRandomValues"] == "function") {
                    var randomBuffer = new Uint8Array(1);
                    return function() {
                      crypto.getRandomValues(randomBuffer);
                      return randomBuffer[0];
                    };
                  } else if (ENVIRONMENT_IS_NODE) {
                    try {
                      var crypto_module = require2("crypto");
                      return function() {
                        return crypto_module["randomBytes"](1)[0];
                      };
                    } catch (e) {
                    }
                  }
                  return function() {
                    abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
                  };
                }
                var PATH_FS = { resolve: function() {
                  var resolvedPath = "", resolvedAbsolute = false;
                  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                    var path = i >= 0 ? arguments[i] : FS.cwd();
                    if (typeof path != "string") {
                      throw new TypeError("Arguments to path.resolve must be strings");
                    } else if (!path) {
                      return "";
                    }
                    resolvedPath = path + "/" + resolvedPath;
                    resolvedAbsolute = path.charAt(0) === "/";
                  }
                  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
                    return !!p;
                  }), !resolvedAbsolute).join("/");
                  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
                }, relative: function(from, to) {
                  from = PATH_FS.resolve(from).substr(1);
                  to = PATH_FS.resolve(to).substr(1);
                  function trim(arr) {
                    var start = 0;
                    for (; start < arr.length; start++) {
                      if (arr[start] !== "")
                        break;
                    }
                    var end = arr.length - 1;
                    for (; end >= 0; end--) {
                      if (arr[end] !== "")
                        break;
                    }
                    if (start > end)
                      return [];
                    return arr.slice(start, end - start + 1);
                  }
                  var fromParts = trim(from.split("/"));
                  var toParts = trim(to.split("/"));
                  var length = Math.min(fromParts.length, toParts.length);
                  var samePartsLength = length;
                  for (var i = 0; i < length; i++) {
                    if (fromParts[i] !== toParts[i]) {
                      samePartsLength = i;
                      break;
                    }
                  }
                  var outputParts = [];
                  for (var i = samePartsLength; i < fromParts.length; i++) {
                    outputParts.push("..");
                  }
                  outputParts = outputParts.concat(toParts.slice(samePartsLength));
                  return outputParts.join("/");
                } };
                var TTY = { ttys: [], init: function() {
                }, shutdown: function() {
                }, register: function(dev, ops) {
                  TTY.ttys[dev] = { input: [], output: [], ops };
                  FS.registerDevice(dev, TTY.stream_ops);
                }, stream_ops: { open: function(stream) {
                  var tty = TTY.ttys[stream.node.rdev];
                  if (!tty) {
                    throw new FS.ErrnoError(43);
                  }
                  stream.tty = tty;
                  stream.seekable = false;
                }, close: function(stream) {
                  stream.tty.ops.flush(stream.tty);
                }, flush: function(stream) {
                  stream.tty.ops.flush(stream.tty);
                }, read: function(stream, buffer2, offset, length, pos) {
                  if (!stream.tty || !stream.tty.ops.get_char) {
                    throw new FS.ErrnoError(60);
                  }
                  var bytesRead = 0;
                  for (var i = 0; i < length; i++) {
                    var result;
                    try {
                      result = stream.tty.ops.get_char(stream.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (result === void 0 && bytesRead === 0) {
                      throw new FS.ErrnoError(6);
                    }
                    if (result === null || result === void 0)
                      break;
                    bytesRead++;
                    buffer2[offset + i] = result;
                  }
                  if (bytesRead) {
                    stream.node.timestamp = Date.now();
                  }
                  return bytesRead;
                }, write: function(stream, buffer2, offset, length, pos) {
                  if (!stream.tty || !stream.tty.ops.put_char) {
                    throw new FS.ErrnoError(60);
                  }
                  try {
                    for (var i = 0; i < length; i++) {
                      stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
                    }
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  if (length) {
                    stream.node.timestamp = Date.now();
                  }
                  return i;
                } }, default_tty_ops: { get_char: function(tty) {
                  if (!tty.input.length) {
                    var result = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var BUFSIZE = 256;
                      var buf = Buffer2.alloc(BUFSIZE);
                      var bytesRead = 0;
                      try {
                        bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);
                      } catch (e) {
                        if (e.toString().includes("EOF"))
                          bytesRead = 0;
                        else
                          throw e;
                      }
                      if (bytesRead > 0) {
                        result = buf.slice(0, bytesRead).toString("utf-8");
                      } else {
                        result = null;
                      }
                    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                      result = window.prompt("Input: ");
                      if (result !== null) {
                        result += "\n";
                      }
                    } else if (typeof readline == "function") {
                      result = readline();
                      if (result !== null) {
                        result += "\n";
                      }
                    }
                    if (!result) {
                      return null;
                    }
                    tty.input = intArrayFromString(result, true);
                  }
                  return tty.input.shift();
                }, put_char: function(tty, val) {
                  if (val === null || val === 10) {
                    out(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  } else {
                    if (val != 0)
                      tty.output.push(val);
                  }
                }, flush: function(tty) {
                  if (tty.output && tty.output.length > 0) {
                    out(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  }
                } }, default_tty1_ops: { put_char: function(tty, val) {
                  if (val === null || val === 10) {
                    err(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  } else {
                    if (val != 0)
                      tty.output.push(val);
                  }
                }, flush: function(tty) {
                  if (tty.output && tty.output.length > 0) {
                    err(UTF8ArrayToString(tty.output, 0));
                    tty.output = [];
                  }
                } } };
                function zeroMemory(address, size) {
                  HEAPU8.fill(0, address, address + size);
                }
                function alignMemory(size, alignment) {
                  assert(alignment, "alignment argument is required");
                  return Math.ceil(size / alignment) * alignment;
                }
                function mmapAlloc(size) {
                  size = alignMemory(size, 65536);
                  var ptr = _emscripten_builtin_memalign(65536, size);
                  if (!ptr)
                    return 0;
                  zeroMemory(ptr, size);
                  return ptr;
                }
                var MEMFS = { ops_table: null, mount: function(mount) {
                  return MEMFS.createNode(null, "/", 16384 | 511, 0);
                }, createNode: function(parent, name, mode, dev) {
                  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
                    throw new FS.ErrnoError(63);
                  }
                  if (!MEMFS.ops_table) {
                    MEMFS.ops_table = {
                      dir: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr,
                          lookup: MEMFS.node_ops.lookup,
                          mknod: MEMFS.node_ops.mknod,
                          rename: MEMFS.node_ops.rename,
                          unlink: MEMFS.node_ops.unlink,
                          rmdir: MEMFS.node_ops.rmdir,
                          readdir: MEMFS.node_ops.readdir,
                          symlink: MEMFS.node_ops.symlink
                        },
                        stream: {
                          llseek: MEMFS.stream_ops.llseek
                        }
                      },
                      file: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr
                        },
                        stream: {
                          llseek: MEMFS.stream_ops.llseek,
                          read: MEMFS.stream_ops.read,
                          write: MEMFS.stream_ops.write,
                          allocate: MEMFS.stream_ops.allocate,
                          mmap: MEMFS.stream_ops.mmap,
                          msync: MEMFS.stream_ops.msync
                        }
                      },
                      link: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr,
                          readlink: MEMFS.node_ops.readlink
                        },
                        stream: {}
                      },
                      chrdev: {
                        node: {
                          getattr: MEMFS.node_ops.getattr,
                          setattr: MEMFS.node_ops.setattr
                        },
                        stream: FS.chrdev_stream_ops
                      }
                    };
                  }
                  var node = FS.createNode(parent, name, mode, dev);
                  if (FS.isDir(node.mode)) {
                    node.node_ops = MEMFS.ops_table.dir.node;
                    node.stream_ops = MEMFS.ops_table.dir.stream;
                    node.contents = {};
                  } else if (FS.isFile(node.mode)) {
                    node.node_ops = MEMFS.ops_table.file.node;
                    node.stream_ops = MEMFS.ops_table.file.stream;
                    node.usedBytes = 0;
                    node.contents = null;
                  } else if (FS.isLink(node.mode)) {
                    node.node_ops = MEMFS.ops_table.link.node;
                    node.stream_ops = MEMFS.ops_table.link.stream;
                  } else if (FS.isChrdev(node.mode)) {
                    node.node_ops = MEMFS.ops_table.chrdev.node;
                    node.stream_ops = MEMFS.ops_table.chrdev.stream;
                  }
                  node.timestamp = Date.now();
                  if (parent) {
                    parent.contents[name] = node;
                    parent.timestamp = node.timestamp;
                  }
                  return node;
                }, getFileDataAsTypedArray: function(node) {
                  if (!node.contents)
                    return new Uint8Array(0);
                  if (node.contents.subarray)
                    return node.contents.subarray(0, node.usedBytes);
                  return new Uint8Array(node.contents);
                }, expandFileStorage: function(node, newCapacity) {
                  var prevCapacity = node.contents ? node.contents.length : 0;
                  if (prevCapacity >= newCapacity)
                    return;
                  var CAPACITY_DOUBLING_MAX = 1024 * 1024;
                  newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
                  if (prevCapacity != 0)
                    newCapacity = Math.max(newCapacity, 256);
                  var oldContents = node.contents;
                  node.contents = new Uint8Array(newCapacity);
                  if (node.usedBytes > 0)
                    node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
                }, resizeFileStorage: function(node, newSize) {
                  if (node.usedBytes == newSize)
                    return;
                  if (newSize == 0) {
                    node.contents = null;
                    node.usedBytes = 0;
                  } else {
                    var oldContents = node.contents;
                    node.contents = new Uint8Array(newSize);
                    if (oldContents) {
                      node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
                    }
                    node.usedBytes = newSize;
                  }
                }, node_ops: { getattr: function(node) {
                  var attr = {};
                  attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
                  attr.ino = node.id;
                  attr.mode = node.mode;
                  attr.nlink = 1;
                  attr.uid = 0;
                  attr.gid = 0;
                  attr.rdev = node.rdev;
                  if (FS.isDir(node.mode)) {
                    attr.size = 4096;
                  } else if (FS.isFile(node.mode)) {
                    attr.size = node.usedBytes;
                  } else if (FS.isLink(node.mode)) {
                    attr.size = node.link.length;
                  } else {
                    attr.size = 0;
                  }
                  attr.atime = new Date(node.timestamp);
                  attr.mtime = new Date(node.timestamp);
                  attr.ctime = new Date(node.timestamp);
                  attr.blksize = 4096;
                  attr.blocks = Math.ceil(attr.size / attr.blksize);
                  return attr;
                }, setattr: function(node, attr) {
                  if (attr.mode !== void 0) {
                    node.mode = attr.mode;
                  }
                  if (attr.timestamp !== void 0) {
                    node.timestamp = attr.timestamp;
                  }
                  if (attr.size !== void 0) {
                    MEMFS.resizeFileStorage(node, attr.size);
                  }
                }, lookup: function(parent, name) {
                  throw FS.genericErrors[44];
                }, mknod: function(parent, name, mode, dev) {
                  return MEMFS.createNode(parent, name, mode, dev);
                }, rename: function(old_node, new_dir, new_name) {
                  if (FS.isDir(old_node.mode)) {
                    var new_node;
                    try {
                      new_node = FS.lookupNode(new_dir, new_name);
                    } catch (e) {
                    }
                    if (new_node) {
                      for (var i in new_node.contents) {
                        throw new FS.ErrnoError(55);
                      }
                    }
                  }
                  delete old_node.parent.contents[old_node.name];
                  old_node.parent.timestamp = Date.now();
                  old_node.name = new_name;
                  new_dir.contents[new_name] = old_node;
                  new_dir.timestamp = old_node.parent.timestamp;
                  old_node.parent = new_dir;
                }, unlink: function(parent, name) {
                  delete parent.contents[name];
                  parent.timestamp = Date.now();
                }, rmdir: function(parent, name) {
                  var node = FS.lookupNode(parent, name);
                  for (var i in node.contents) {
                    throw new FS.ErrnoError(55);
                  }
                  delete parent.contents[name];
                  parent.timestamp = Date.now();
                }, readdir: function(node) {
                  var entries = [".", ".."];
                  for (var key in node.contents) {
                    if (!node.contents.hasOwnProperty(key)) {
                      continue;
                    }
                    entries.push(key);
                  }
                  return entries;
                }, symlink: function(parent, newname, oldpath) {
                  var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
                  node.link = oldpath;
                  return node;
                }, readlink: function(node) {
                  if (!FS.isLink(node.mode)) {
                    throw new FS.ErrnoError(28);
                  }
                  return node.link;
                } }, stream_ops: { read: function(stream, buffer2, offset, length, position) {
                  var contents = stream.node.contents;
                  if (position >= stream.node.usedBytes)
                    return 0;
                  var size = Math.min(stream.node.usedBytes - position, length);
                  assert(size >= 0);
                  if (size > 8 && contents.subarray) {
                    buffer2.set(contents.subarray(position, position + size), offset);
                  } else {
                    for (var i = 0; i < size; i++)
                      buffer2[offset + i] = contents[position + i];
                  }
                  return size;
                }, write: function(stream, buffer2, offset, length, position, canOwn) {
                  assert(!(buffer2 instanceof ArrayBuffer));
                  if (buffer2.buffer === HEAP8.buffer) {
                    canOwn = false;
                  }
                  if (!length)
                    return 0;
                  var node = stream.node;
                  node.timestamp = Date.now();
                  if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
                    if (canOwn) {
                      assert(position === 0, "canOwn must imply no weird position inside the file");
                      node.contents = buffer2.subarray(offset, offset + length);
                      node.usedBytes = length;
                      return length;
                    } else if (node.usedBytes === 0 && position === 0) {
                      node.contents = buffer2.slice(offset, offset + length);
                      node.usedBytes = length;
                      return length;
                    } else if (position + length <= node.usedBytes) {
                      node.contents.set(buffer2.subarray(offset, offset + length), position);
                      return length;
                    }
                  }
                  MEMFS.expandFileStorage(node, position + length);
                  if (node.contents.subarray && buffer2.subarray) {
                    node.contents.set(buffer2.subarray(offset, offset + length), position);
                  } else {
                    for (var i = 0; i < length; i++) {
                      node.contents[position + i] = buffer2[offset + i];
                    }
                  }
                  node.usedBytes = Math.max(node.usedBytes, position + length);
                  return length;
                }, llseek: function(stream, offset, whence) {
                  var position = offset;
                  if (whence === 1) {
                    position += stream.position;
                  } else if (whence === 2) {
                    if (FS.isFile(stream.node.mode)) {
                      position += stream.node.usedBytes;
                    }
                  }
                  if (position < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  return position;
                }, allocate: function(stream, offset, length) {
                  MEMFS.expandFileStorage(stream.node, offset + length);
                  stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
                }, mmap: function(stream, address, length, position, prot, flags) {
                  if (address !== 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                  }
                  var ptr;
                  var allocated;
                  var contents = stream.node.contents;
                  if (!(flags & 2) && contents.buffer === buffer) {
                    allocated = false;
                    ptr = contents.byteOffset;
                  } else {
                    if (position > 0 || position + length < contents.length) {
                      if (contents.subarray) {
                        contents = contents.subarray(position, position + length);
                      } else {
                        contents = Array.prototype.slice.call(contents, position, position + length);
                      }
                    }
                    allocated = true;
                    ptr = mmapAlloc(length);
                    if (!ptr) {
                      throw new FS.ErrnoError(48);
                    }
                    HEAP8.set(contents, ptr);
                  }
                  return { ptr, allocated };
                }, msync: function(stream, buffer2, offset, length, mmapFlags) {
                  if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                  }
                  if (mmapFlags & 2) {
                    return 0;
                  }
                  var bytesWritten = MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
                  return 0;
                } } };
                function asyncLoad(url, onload, onerror, noRunDep) {
                  var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
                  readAsync(url, function(arrayBuffer) {
                    assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
                    onload(new Uint8Array(arrayBuffer));
                    if (dep)
                      removeRunDependency(dep);
                  }, function(event) {
                    if (onerror) {
                      onerror();
                    } else {
                      throw 'Loading data file "' + url + '" failed.';
                    }
                  });
                  if (dep)
                    addRunDependency(dep);
                }
                var ERRNO_MESSAGES = { 0: "Success", 1: "Arg list too long", 2: "Permission denied", 3: "Address already in use", 4: "Address not available", 5: "Address family not supported by protocol family", 6: "No more processes", 7: "Socket already connected", 8: "Bad file number", 9: "Trying to read unreadable message", 10: "Mount device busy", 11: "Operation canceled", 12: "No children", 13: "Connection aborted", 14: "Connection refused", 15: "Connection reset by peer", 16: "File locking deadlock error", 17: "Destination address required", 18: "Math arg out of domain of func", 19: "Quota exceeded", 20: "File exists", 21: "Bad address", 22: "File too large", 23: "Host is unreachable", 24: "Identifier removed", 25: "Illegal byte sequence", 26: "Connection already in progress", 27: "Interrupted system call", 28: "Invalid argument", 29: "I/O error", 30: "Socket is already connected", 31: "Is a directory", 32: "Too many symbolic links", 33: "Too many open files", 34: "Too many links", 35: "Message too long", 36: "Multihop attempted", 37: "File or path name too long", 38: "Network interface is not configured", 39: "Connection reset by network", 40: "Network is unreachable", 41: "Too many open files in system", 42: "No buffer space available", 43: "No such device", 44: "No such file or directory", 45: "Exec format error", 46: "No record locks available", 47: "The link has been severed", 48: "Not enough core", 49: "No message of desired type", 50: "Protocol not available", 51: "No space left on device", 52: "Function not implemented", 53: "Socket is not connected", 54: "Not a directory", 55: "Directory not empty", 56: "State not recoverable", 57: "Socket operation on non-socket", 59: "Not a typewriter", 60: "No such device or address", 61: "Value too large for defined data type", 62: "Previous owner died", 63: "Not super-user", 64: "Broken pipe", 65: "Protocol error", 66: "Unknown protocol", 67: "Protocol wrong type for socket", 68: "Math result not representable", 69: "Read only file system", 70: "Illegal seek", 71: "No such process", 72: "Stale file handle", 73: "Connection timed out", 74: "Text file busy", 75: "Cross-device link", 100: "Device not a stream", 101: "Bad font file fmt", 102: "Invalid slot", 103: "Invalid request code", 104: "No anode", 105: "Block device required", 106: "Channel number out of range", 107: "Level 3 halted", 108: "Level 3 reset", 109: "Link number out of range", 110: "Protocol driver not attached", 111: "No CSI structure available", 112: "Level 2 halted", 113: "Invalid exchange", 114: "Invalid request descriptor", 115: "Exchange full", 116: "No data (for no delay io)", 117: "Timer expired", 118: "Out of streams resources", 119: "Machine is not on the network", 120: "Package not installed", 121: "The object is remote", 122: "Advertise error", 123: "Srmount error", 124: "Communication error on send", 125: "Cross mount point (not really error)", 126: "Given log. name not unique", 127: "f.d. invalid for this operation", 128: "Remote address changed", 129: "Can   access a needed shared lib", 130: "Accessing a corrupted shared lib", 131: ".lib section in a.out corrupted", 132: "Attempting to link in too many libs", 133: "Attempting to exec a shared library", 135: "Streams pipe error", 136: "Too many users", 137: "Socket type not supported", 138: "Not supported", 139: "Protocol family not supported", 140: "Can't send after socket shutdown", 141: "Too many references", 142: "Host is down", 148: "No medium (in tape drive)", 156: "Level 2 not synchronized" };
                var ERRNO_CODES = {};
                var FS = { root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, lookupPath: (path, opts = {}) => {
                  path = PATH_FS.resolve(FS.cwd(), path);
                  if (!path)
                    return { path: "", node: null };
                  var defaults = {
                    follow_mount: true,
                    recurse_count: 0
                  };
                  opts = Object.assign(defaults, opts);
                  if (opts.recurse_count > 8) {
                    throw new FS.ErrnoError(32);
                  }
                  var parts = PATH.normalizeArray(path.split("/").filter((p) => !!p), false);
                  var current = FS.root;
                  var current_path = "/";
                  for (var i = 0; i < parts.length; i++) {
                    var islast = i === parts.length - 1;
                    if (islast && opts.parent) {
                      break;
                    }
                    current = FS.lookupNode(current, parts[i]);
                    current_path = PATH.join2(current_path, parts[i]);
                    if (FS.isMountpoint(current)) {
                      if (!islast || islast && opts.follow_mount) {
                        current = current.mounted.root;
                      }
                    }
                    if (!islast || opts.follow) {
                      var count = 0;
                      while (FS.isLink(current.mode)) {
                        var link = FS.readlink(current_path);
                        current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                        var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
                        current = lookup.node;
                        if (count++ > 40) {
                          throw new FS.ErrnoError(32);
                        }
                      }
                    }
                  }
                  return { path: current_path, node: current };
                }, getPath: (node) => {
                  var path;
                  while (true) {
                    if (FS.isRoot(node)) {
                      var mount = node.mount.mountpoint;
                      if (!path)
                        return mount;
                      return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
                    }
                    path = path ? node.name + "/" + path : node.name;
                    node = node.parent;
                  }
                }, hashName: (parentid, name) => {
                  var hash = 0;
                  for (var i = 0; i < name.length; i++) {
                    hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
                  }
                  return (parentid + hash >>> 0) % FS.nameTable.length;
                }, hashAddNode: (node) => {
                  var hash = FS.hashName(node.parent.id, node.name);
                  node.name_next = FS.nameTable[hash];
                  FS.nameTable[hash] = node;
                }, hashRemoveNode: (node) => {
                  var hash = FS.hashName(node.parent.id, node.name);
                  if (FS.nameTable[hash] === node) {
                    FS.nameTable[hash] = node.name_next;
                  } else {
                    var current = FS.nameTable[hash];
                    while (current) {
                      if (current.name_next === node) {
                        current.name_next = node.name_next;
                        break;
                      }
                      current = current.name_next;
                    }
                  }
                }, lookupNode: (parent, name) => {
                  var errCode = FS.mayLookup(parent);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode, parent);
                  }
                  var hash = FS.hashName(parent.id, name);
                  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
                    var nodeName = node.name;
                    if (node.parent.id === parent.id && nodeName === name) {
                      return node;
                    }
                  }
                  return FS.lookup(parent, name);
                }, createNode: (parent, name, mode, rdev) => {
                  assert(typeof parent == "object");
                  var node = new FS.FSNode(parent, name, mode, rdev);
                  FS.hashAddNode(node);
                  return node;
                }, destroyNode: (node) => {
                  FS.hashRemoveNode(node);
                }, isRoot: (node) => {
                  return node === node.parent;
                }, isMountpoint: (node) => {
                  return !!node.mounted;
                }, isFile: (mode) => {
                  return (mode & 61440) === 32768;
                }, isDir: (mode) => {
                  return (mode & 61440) === 16384;
                }, isLink: (mode) => {
                  return (mode & 61440) === 40960;
                }, isChrdev: (mode) => {
                  return (mode & 61440) === 8192;
                }, isBlkdev: (mode) => {
                  return (mode & 61440) === 24576;
                }, isFIFO: (mode) => {
                  return (mode & 61440) === 4096;
                }, isSocket: (mode) => {
                  return (mode & 49152) === 49152;
                }, flagModes: { "r": 0, "r+": 2, "w": 577, "w+": 578, "a": 1089, "a+": 1090 }, modeStringToFlags: (str) => {
                  var flags = FS.flagModes[str];
                  if (typeof flags == "undefined") {
                    throw new Error("Unknown file open mode: " + str);
                  }
                  return flags;
                }, flagsToPermissionString: (flag) => {
                  var perms = ["r", "w", "rw"][flag & 3];
                  if (flag & 512) {
                    perms += "w";
                  }
                  return perms;
                }, nodePermissions: (node, perms) => {
                  if (FS.ignorePermissions) {
                    return 0;
                  }
                  if (perms.includes("r") && !(node.mode & 292)) {
                    return 2;
                  } else if (perms.includes("w") && !(node.mode & 146)) {
                    return 2;
                  } else if (perms.includes("x") && !(node.mode & 73)) {
                    return 2;
                  }
                  return 0;
                }, mayLookup: (dir) => {
                  var errCode = FS.nodePermissions(dir, "x");
                  if (errCode)
                    return errCode;
                  if (!dir.node_ops.lookup)
                    return 2;
                  return 0;
                }, mayCreate: (dir, name) => {
                  try {
                    var node = FS.lookupNode(dir, name);
                    return 20;
                  } catch (e) {
                  }
                  return FS.nodePermissions(dir, "wx");
                }, mayDelete: (dir, name, isdir) => {
                  var node;
                  try {
                    node = FS.lookupNode(dir, name);
                  } catch (e) {
                    return e.errno;
                  }
                  var errCode = FS.nodePermissions(dir, "wx");
                  if (errCode) {
                    return errCode;
                  }
                  if (isdir) {
                    if (!FS.isDir(node.mode)) {
                      return 54;
                    }
                    if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                      return 10;
                    }
                  } else {
                    if (FS.isDir(node.mode)) {
                      return 31;
                    }
                  }
                  return 0;
                }, mayOpen: (node, flags) => {
                  if (!node) {
                    return 44;
                  }
                  if (FS.isLink(node.mode)) {
                    return 32;
                  } else if (FS.isDir(node.mode)) {
                    if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
                      return 31;
                    }
                  }
                  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
                }, MAX_OPEN_FDS: 4096, nextfd: (fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {
                  for (var fd = fd_start; fd <= fd_end; fd++) {
                    if (!FS.streams[fd]) {
                      return fd;
                    }
                  }
                  throw new FS.ErrnoError(33);
                }, getStream: (fd) => FS.streams[fd], createStream: (stream, fd_start, fd_end) => {
                  if (!FS.FSStream) {
                    FS.FSStream = function() {
                    };
                    FS.FSStream.prototype = {
                      object: {
                        get: function() {
                          return this.node;
                        },
                        set: function(val) {
                          this.node = val;
                        }
                      },
                      isRead: {
                        get: function() {
                          return (this.flags & 2097155) !== 1;
                        }
                      },
                      isWrite: {
                        get: function() {
                          return (this.flags & 2097155) !== 0;
                        }
                      },
                      isAppend: {
                        get: function() {
                          return this.flags & 1024;
                        }
                      }
                    };
                  }
                  stream = Object.assign(new FS.FSStream(), stream);
                  var fd = FS.nextfd(fd_start, fd_end);
                  stream.fd = fd;
                  FS.streams[fd] = stream;
                  return stream;
                }, closeStream: (fd) => {
                  FS.streams[fd] = null;
                }, chrdev_stream_ops: { open: (stream) => {
                  var device = FS.getDevice(stream.node.rdev);
                  stream.stream_ops = device.stream_ops;
                  if (stream.stream_ops.open) {
                    stream.stream_ops.open(stream);
                  }
                }, llseek: () => {
                  throw new FS.ErrnoError(70);
                } }, major: (dev) => dev >> 8, minor: (dev) => dev & 255, makedev: (ma, mi) => ma << 8 | mi, registerDevice: (dev, ops) => {
                  FS.devices[dev] = { stream_ops: ops };
                }, getDevice: (dev) => FS.devices[dev], getMounts: (mount) => {
                  var mounts = [];
                  var check = [mount];
                  while (check.length) {
                    var m = check.pop();
                    mounts.push(m);
                    check.push.apply(check, m.mounts);
                  }
                  return mounts;
                }, syncfs: (populate, callback) => {
                  if (typeof populate == "function") {
                    callback = populate;
                    populate = false;
                  }
                  FS.syncFSRequests++;
                  if (FS.syncFSRequests > 1) {
                    err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
                  }
                  var mounts = FS.getMounts(FS.root.mount);
                  var completed = 0;
                  function doCallback(errCode) {
                    assert(FS.syncFSRequests > 0);
                    FS.syncFSRequests--;
                    return callback(errCode);
                  }
                  function done(errCode) {
                    if (errCode) {
                      if (!done.errored) {
                        done.errored = true;
                        return doCallback(errCode);
                      }
                      return;
                    }
                    if (++completed >= mounts.length) {
                      doCallback(null);
                    }
                  }
                  ;
                  mounts.forEach((mount) => {
                    if (!mount.type.syncfs) {
                      return done(null);
                    }
                    mount.type.syncfs(mount, populate, done);
                  });
                }, mount: (type, opts, mountpoint) => {
                  if (typeof type == "string") {
                    throw type;
                  }
                  var root = mountpoint === "/";
                  var pseudo = !mountpoint;
                  var node;
                  if (root && FS.root) {
                    throw new FS.ErrnoError(10);
                  } else if (!root && !pseudo) {
                    var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
                    mountpoint = lookup.path;
                    node = lookup.node;
                    if (FS.isMountpoint(node)) {
                      throw new FS.ErrnoError(10);
                    }
                    if (!FS.isDir(node.mode)) {
                      throw new FS.ErrnoError(54);
                    }
                  }
                  var mount = {
                    type,
                    opts,
                    mountpoint,
                    mounts: []
                  };
                  var mountRoot = type.mount(mount);
                  mountRoot.mount = mount;
                  mount.root = mountRoot;
                  if (root) {
                    FS.root = mountRoot;
                  } else if (node) {
                    node.mounted = mount;
                    if (node.mount) {
                      node.mount.mounts.push(mount);
                    }
                  }
                  return mountRoot;
                }, unmount: (mountpoint) => {
                  var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
                  if (!FS.isMountpoint(lookup.node)) {
                    throw new FS.ErrnoError(28);
                  }
                  var node = lookup.node;
                  var mount = node.mounted;
                  var mounts = FS.getMounts(mount);
                  Object.keys(FS.nameTable).forEach((hash) => {
                    var current = FS.nameTable[hash];
                    while (current) {
                      var next = current.name_next;
                      if (mounts.includes(current.mount)) {
                        FS.destroyNode(current);
                      }
                      current = next;
                    }
                  });
                  node.mounted = null;
                  var idx = node.mount.mounts.indexOf(mount);
                  assert(idx !== -1);
                  node.mount.mounts.splice(idx, 1);
                }, lookup: (parent, name) => {
                  return parent.node_ops.lookup(parent, name);
                }, mknod: (path, mode, dev) => {
                  var lookup = FS.lookupPath(path, { parent: true });
                  var parent = lookup.node;
                  var name = PATH.basename(path);
                  if (!name || name === "." || name === "..") {
                    throw new FS.ErrnoError(28);
                  }
                  var errCode = FS.mayCreate(parent, name);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.mknod) {
                    throw new FS.ErrnoError(63);
                  }
                  return parent.node_ops.mknod(parent, name, mode, dev);
                }, create: (path, mode) => {
                  mode = mode !== void 0 ? mode : 438;
                  mode &= 4095;
                  mode |= 32768;
                  return FS.mknod(path, mode, 0);
                }, mkdir: (path, mode) => {
                  mode = mode !== void 0 ? mode : 511;
                  mode &= 511 | 512;
                  mode |= 16384;
                  return FS.mknod(path, mode, 0);
                }, mkdirTree: (path, mode) => {
                  var dirs = path.split("/");
                  var d = "";
                  for (var i = 0; i < dirs.length; ++i) {
                    if (!dirs[i])
                      continue;
                    d += "/" + dirs[i];
                    try {
                      FS.mkdir(d, mode);
                    } catch (e) {
                      if (e.errno != 20)
                        throw e;
                    }
                  }
                }, mkdev: (path, mode, dev) => {
                  if (typeof dev == "undefined") {
                    dev = mode;
                    mode = 438;
                  }
                  mode |= 8192;
                  return FS.mknod(path, mode, dev);
                }, symlink: (oldpath, newpath) => {
                  if (!PATH_FS.resolve(oldpath)) {
                    throw new FS.ErrnoError(44);
                  }
                  var lookup = FS.lookupPath(newpath, { parent: true });
                  var parent = lookup.node;
                  if (!parent) {
                    throw new FS.ErrnoError(44);
                  }
                  var newname = PATH.basename(newpath);
                  var errCode = FS.mayCreate(parent, newname);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.symlink) {
                    throw new FS.ErrnoError(63);
                  }
                  return parent.node_ops.symlink(parent, newname, oldpath);
                }, rename: (old_path, new_path) => {
                  var old_dirname = PATH.dirname(old_path);
                  var new_dirname = PATH.dirname(new_path);
                  var old_name = PATH.basename(old_path);
                  var new_name = PATH.basename(new_path);
                  var lookup, old_dir, new_dir;
                  lookup = FS.lookupPath(old_path, { parent: true });
                  old_dir = lookup.node;
                  lookup = FS.lookupPath(new_path, { parent: true });
                  new_dir = lookup.node;
                  if (!old_dir || !new_dir)
                    throw new FS.ErrnoError(44);
                  if (old_dir.mount !== new_dir.mount) {
                    throw new FS.ErrnoError(75);
                  }
                  var old_node = FS.lookupNode(old_dir, old_name);
                  var relative = PATH_FS.relative(old_path, new_dirname);
                  if (relative.charAt(0) !== ".") {
                    throw new FS.ErrnoError(28);
                  }
                  relative = PATH_FS.relative(new_path, old_dirname);
                  if (relative.charAt(0) !== ".") {
                    throw new FS.ErrnoError(55);
                  }
                  var new_node;
                  try {
                    new_node = FS.lookupNode(new_dir, new_name);
                  } catch (e) {
                  }
                  if (old_node === new_node) {
                    return;
                  }
                  var isdir = FS.isDir(old_node.mode);
                  var errCode = FS.mayDelete(old_dir, old_name, isdir);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!old_dir.node_ops.rename) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
                    throw new FS.ErrnoError(10);
                  }
                  if (new_dir !== old_dir) {
                    errCode = FS.nodePermissions(old_dir, "w");
                    if (errCode) {
                      throw new FS.ErrnoError(errCode);
                    }
                  }
                  FS.hashRemoveNode(old_node);
                  try {
                    old_dir.node_ops.rename(old_node, new_dir, new_name);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.hashAddNode(old_node);
                  }
                }, rmdir: (path) => {
                  var lookup = FS.lookupPath(path, { parent: true });
                  var parent = lookup.node;
                  var name = PATH.basename(path);
                  var node = FS.lookupNode(parent, name);
                  var errCode = FS.mayDelete(parent, name, true);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.rmdir) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10);
                  }
                  parent.node_ops.rmdir(parent, name);
                  FS.destroyNode(node);
                }, readdir: (path) => {
                  var lookup = FS.lookupPath(path, { follow: true });
                  var node = lookup.node;
                  if (!node.node_ops.readdir) {
                    throw new FS.ErrnoError(54);
                  }
                  return node.node_ops.readdir(node);
                }, unlink: (path) => {
                  var lookup = FS.lookupPath(path, { parent: true });
                  var parent = lookup.node;
                  if (!parent) {
                    throw new FS.ErrnoError(44);
                  }
                  var name = PATH.basename(path);
                  var node = FS.lookupNode(parent, name);
                  var errCode = FS.mayDelete(parent, name, false);
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  if (!parent.node_ops.unlink) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10);
                  }
                  parent.node_ops.unlink(parent, name);
                  FS.destroyNode(node);
                }, readlink: (path) => {
                  var lookup = FS.lookupPath(path);
                  var link = lookup.node;
                  if (!link) {
                    throw new FS.ErrnoError(44);
                  }
                  if (!link.node_ops.readlink) {
                    throw new FS.ErrnoError(28);
                  }
                  return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
                }, stat: (path, dontFollow) => {
                  var lookup = FS.lookupPath(path, { follow: !dontFollow });
                  var node = lookup.node;
                  if (!node) {
                    throw new FS.ErrnoError(44);
                  }
                  if (!node.node_ops.getattr) {
                    throw new FS.ErrnoError(63);
                  }
                  return node.node_ops.getattr(node);
                }, lstat: (path) => {
                  return FS.stat(path, true);
                }, chmod: (path, mode, dontFollow) => {
                  var node;
                  if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, { follow: !dontFollow });
                    node = lookup.node;
                  } else {
                    node = path;
                  }
                  if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63);
                  }
                  node.node_ops.setattr(node, {
                    mode: mode & 4095 | node.mode & ~4095,
                    timestamp: Date.now()
                  });
                }, lchmod: (path, mode) => {
                  FS.chmod(path, mode, true);
                }, fchmod: (fd, mode) => {
                  var stream = FS.getStream(fd);
                  if (!stream) {
                    throw new FS.ErrnoError(8);
                  }
                  FS.chmod(stream.node, mode);
                }, chown: (path, uid, gid, dontFollow) => {
                  var node;
                  if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, { follow: !dontFollow });
                    node = lookup.node;
                  } else {
                    node = path;
                  }
                  if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63);
                  }
                  node.node_ops.setattr(node, {
                    timestamp: Date.now()
                  });
                }, lchown: (path, uid, gid) => {
                  FS.chown(path, uid, gid, true);
                }, fchown: (fd, uid, gid) => {
                  var stream = FS.getStream(fd);
                  if (!stream) {
                    throw new FS.ErrnoError(8);
                  }
                  FS.chown(stream.node, uid, gid);
                }, truncate: (path, len) => {
                  if (len < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  var node;
                  if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, { follow: true });
                    node = lookup.node;
                  } else {
                    node = path;
                  }
                  if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63);
                  }
                  if (FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(31);
                  }
                  if (!FS.isFile(node.mode)) {
                    throw new FS.ErrnoError(28);
                  }
                  var errCode = FS.nodePermissions(node, "w");
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  node.node_ops.setattr(node, {
                    size: len,
                    timestamp: Date.now()
                  });
                }, ftruncate: (fd, len) => {
                  var stream = FS.getStream(fd);
                  if (!stream) {
                    throw new FS.ErrnoError(8);
                  }
                  if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(28);
                  }
                  FS.truncate(stream.node, len);
                }, utime: (path, atime, mtime) => {
                  var lookup = FS.lookupPath(path, { follow: true });
                  var node = lookup.node;
                  node.node_ops.setattr(node, {
                    timestamp: Math.max(atime, mtime)
                  });
                }, open: (path, flags, mode, fd_start, fd_end) => {
                  if (path === "") {
                    throw new FS.ErrnoError(44);
                  }
                  flags = typeof flags == "string" ? FS.modeStringToFlags(flags) : flags;
                  mode = typeof mode == "undefined" ? 438 : mode;
                  if (flags & 64) {
                    mode = mode & 4095 | 32768;
                  } else {
                    mode = 0;
                  }
                  var node;
                  if (typeof path == "object") {
                    node = path;
                  } else {
                    path = PATH.normalize(path);
                    try {
                      var lookup = FS.lookupPath(path, {
                        follow: !(flags & 131072)
                      });
                      node = lookup.node;
                    } catch (e) {
                    }
                  }
                  var created = false;
                  if (flags & 64) {
                    if (node) {
                      if (flags & 128) {
                        throw new FS.ErrnoError(20);
                      }
                    } else {
                      node = FS.mknod(path, mode, 0);
                      created = true;
                    }
                  }
                  if (!node) {
                    throw new FS.ErrnoError(44);
                  }
                  if (FS.isChrdev(node.mode)) {
                    flags &= ~512;
                  }
                  if (flags & 65536 && !FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(54);
                  }
                  if (!created) {
                    var errCode = FS.mayOpen(node, flags);
                    if (errCode) {
                      throw new FS.ErrnoError(errCode);
                    }
                  }
                  if (flags & 512) {
                    FS.truncate(node, 0);
                  }
                  flags &= ~(128 | 512 | 131072);
                  var stream = FS.createStream({
                    node,
                    path: FS.getPath(node),
                    flags,
                    seekable: true,
                    position: 0,
                    stream_ops: node.stream_ops,
                    ungotten: [],
                    error: false
                  }, fd_start, fd_end);
                  if (stream.stream_ops.open) {
                    stream.stream_ops.open(stream);
                  }
                  if (Module["logReadFiles"] && !(flags & 1)) {
                    if (!FS.readFiles)
                      FS.readFiles = {};
                    if (!(path in FS.readFiles)) {
                      FS.readFiles[path] = 1;
                    }
                  }
                  return stream;
                }, close: (stream) => {
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if (stream.getdents)
                    stream.getdents = null;
                  try {
                    if (stream.stream_ops.close) {
                      stream.stream_ops.close(stream);
                    }
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(stream.fd);
                  }
                  stream.fd = null;
                }, isClosed: (stream) => {
                  return stream.fd === null;
                }, llseek: (stream, offset, whence) => {
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if (!stream.seekable || !stream.stream_ops.llseek) {
                    throw new FS.ErrnoError(70);
                  }
                  if (whence != 0 && whence != 1 && whence != 2) {
                    throw new FS.ErrnoError(28);
                  }
                  stream.position = stream.stream_ops.llseek(stream, offset, whence);
                  stream.ungotten = [];
                  return stream.position;
                }, read: (stream, buffer2, offset, length, position) => {
                  if (length < 0 || position < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if ((stream.flags & 2097155) === 1) {
                    throw new FS.ErrnoError(8);
                  }
                  if (FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(31);
                  }
                  if (!stream.stream_ops.read) {
                    throw new FS.ErrnoError(28);
                  }
                  var seeking = typeof position != "undefined";
                  if (!seeking) {
                    position = stream.position;
                  } else if (!stream.seekable) {
                    throw new FS.ErrnoError(70);
                  }
                  var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
                  if (!seeking)
                    stream.position += bytesRead;
                  return bytesRead;
                }, write: (stream, buffer2, offset, length, position, canOwn) => {
                  if (length < 0 || position < 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(8);
                  }
                  if (FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(31);
                  }
                  if (!stream.stream_ops.write) {
                    throw new FS.ErrnoError(28);
                  }
                  if (stream.seekable && stream.flags & 1024) {
                    FS.llseek(stream, 0, 2);
                  }
                  var seeking = typeof position != "undefined";
                  if (!seeking) {
                    position = stream.position;
                  } else if (!stream.seekable) {
                    throw new FS.ErrnoError(70);
                  }
                  var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
                  if (!seeking)
                    stream.position += bytesWritten;
                  return bytesWritten;
                }, allocate: (stream, offset, length) => {
                  if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8);
                  }
                  if (offset < 0 || length <= 0) {
                    throw new FS.ErrnoError(28);
                  }
                  if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(8);
                  }
                  if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(43);
                  }
                  if (!stream.stream_ops.allocate) {
                    throw new FS.ErrnoError(138);
                  }
                  stream.stream_ops.allocate(stream, offset, length);
                }, mmap: (stream, address, length, position, prot, flags) => {
                  if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
                    throw new FS.ErrnoError(2);
                  }
                  if ((stream.flags & 2097155) === 1) {
                    throw new FS.ErrnoError(2);
                  }
                  if (!stream.stream_ops.mmap) {
                    throw new FS.ErrnoError(43);
                  }
                  return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
                }, msync: (stream, buffer2, offset, length, mmapFlags) => {
                  if (!stream || !stream.stream_ops.msync) {
                    return 0;
                  }
                  return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
                }, munmap: (stream) => 0, ioctl: (stream, cmd, arg) => {
                  if (!stream.stream_ops.ioctl) {
                    throw new FS.ErrnoError(59);
                  }
                  return stream.stream_ops.ioctl(stream, cmd, arg);
                }, readFile: (path, opts = {}) => {
                  opts.flags = opts.flags || 0;
                  opts.encoding = opts.encoding || "binary";
                  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
                    throw new Error('Invalid encoding type "' + opts.encoding + '"');
                  }
                  var ret;
                  var stream = FS.open(path, opts.flags);
                  var stat = FS.stat(path);
                  var length = stat.size;
                  var buf = new Uint8Array(length);
                  FS.read(stream, buf, 0, length, 0);
                  if (opts.encoding === "utf8") {
                    ret = UTF8ArrayToString(buf, 0);
                  } else if (opts.encoding === "binary") {
                    ret = buf;
                  }
                  FS.close(stream);
                  return ret;
                }, writeFile: (path, data, opts = {}) => {
                  opts.flags = opts.flags || 577;
                  var stream = FS.open(path, opts.flags, opts.mode);
                  if (typeof data == "string") {
                    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
                    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
                    FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
                  } else if (ArrayBuffer.isView(data)) {
                    FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
                  } else {
                    throw new Error("Unsupported data type");
                  }
                  FS.close(stream);
                }, cwd: () => FS.currentPath, chdir: (path) => {
                  var lookup = FS.lookupPath(path, { follow: true });
                  if (lookup.node === null) {
                    throw new FS.ErrnoError(44);
                  }
                  if (!FS.isDir(lookup.node.mode)) {
                    throw new FS.ErrnoError(54);
                  }
                  var errCode = FS.nodePermissions(lookup.node, "x");
                  if (errCode) {
                    throw new FS.ErrnoError(errCode);
                  }
                  FS.currentPath = lookup.path;
                }, createDefaultDirectories: () => {
                  FS.mkdir("/tmp");
                  FS.mkdir("/home");
                  FS.mkdir("/home/web_user");
                }, createDefaultDevices: () => {
                  FS.mkdir("/dev");
                  FS.registerDevice(FS.makedev(1, 3), {
                    read: () => 0,
                    write: (stream, buffer2, offset, length, pos) => length
                  });
                  FS.mkdev("/dev/null", FS.makedev(1, 3));
                  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
                  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
                  FS.mkdev("/dev/tty", FS.makedev(5, 0));
                  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var random_device = getRandomDevice();
                  FS.createDevice("/dev", "random", random_device);
                  FS.createDevice("/dev", "urandom", random_device);
                  FS.mkdir("/dev/shm");
                  FS.mkdir("/dev/shm/tmp");
                }, createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var proc_self = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd");
                  FS.mount({
                    mount: () => {
                      var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
                      node.node_ops = {
                        lookup: (parent, name) => {
                          var fd = +name;
                          var stream = FS.getStream(fd);
                          if (!stream)
                            throw new FS.ErrnoError(8);
                          var ret = {
                            parent: null,
                            mount: { mountpoint: "fake" },
                            node_ops: { readlink: () => stream.path }
                          };
                          ret.parent = ret;
                          return ret;
                        }
                      };
                      return node;
                    }
                  }, {}, "/proc/self/fd");
                }, createStandardStreams: () => {
                  if (Module["stdin"]) {
                    FS.createDevice("/dev", "stdin", Module["stdin"]);
                  } else {
                    FS.symlink("/dev/tty", "/dev/stdin");
                  }
                  if (Module["stdout"]) {
                    FS.createDevice("/dev", "stdout", null, Module["stdout"]);
                  } else {
                    FS.symlink("/dev/tty", "/dev/stdout");
                  }
                  if (Module["stderr"]) {
                    FS.createDevice("/dev", "stderr", null, Module["stderr"]);
                  } else {
                    FS.symlink("/dev/tty1", "/dev/stderr");
                  }
                  var stdin = FS.open("/dev/stdin", 0);
                  var stdout = FS.open("/dev/stdout", 1);
                  var stderr = FS.open("/dev/stderr", 1);
                  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
                  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
                  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
                }, ensureErrnoError: () => {
                  if (FS.ErrnoError)
                    return;
                  FS.ErrnoError = function ErrnoError(errno, node) {
                    this.node = node;
                    this.setErrno = function(errno2) {
                      this.errno = errno2;
                      for (var key in ERRNO_CODES) {
                        if (ERRNO_CODES[key] === errno2) {
                          this.code = key;
                          break;
                        }
                      }
                    };
                    this.setErrno(errno);
                    this.message = ERRNO_MESSAGES[errno];
                    if (this.stack) {
                      Object.defineProperty(this, "stack", { value: new Error().stack, writable: true });
                      this.stack = demangleAll(this.stack);
                    }
                  };
                  FS.ErrnoError.prototype = new Error();
                  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
                  [44].forEach((code) => {
                    FS.genericErrors[code] = new FS.ErrnoError(code);
                    FS.genericErrors[code].stack = "<generic error, no stack>";
                  });
                }, staticInit: () => {
                  FS.ensureErrnoError();
                  FS.nameTable = new Array(4096);
                  FS.mount(MEMFS, {}, "/");
                  FS.createDefaultDirectories();
                  FS.createDefaultDevices();
                  FS.createSpecialDirectories();
                  FS.filesystems = {
                    "MEMFS": MEMFS
                  };
                }, init: (input, output, error) => {
                  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
                  FS.init.initialized = true;
                  FS.ensureErrnoError();
                  Module["stdin"] = input || Module["stdin"];
                  Module["stdout"] = output || Module["stdout"];
                  Module["stderr"] = error || Module["stderr"];
                  FS.createStandardStreams();
                }, quit: () => {
                  FS.init.initialized = false;
                  ___stdio_exit();
                  for (var i = 0; i < FS.streams.length; i++) {
                    var stream = FS.streams[i];
                    if (!stream) {
                      continue;
                    }
                    FS.close(stream);
                  }
                }, getMode: (canRead, canWrite) => {
                  var mode = 0;
                  if (canRead)
                    mode |= 292 | 73;
                  if (canWrite)
                    mode |= 146;
                  return mode;
                }, findObject: (path, dontResolveLastLink) => {
                  var ret = FS.analyzePath(path, dontResolveLastLink);
                  if (ret.exists) {
                    return ret.object;
                  } else {
                    return null;
                  }
                }, analyzePath: (path, dontResolveLastLink) => {
                  try {
                    var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                    path = lookup.path;
                  } catch (e) {
                  }
                  var ret = {
                    isRoot: false,
                    exists: false,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: false,
                    parentPath: null,
                    parentObject: null
                  };
                  try {
                    var lookup = FS.lookupPath(path, { parent: true });
                    ret.parentExists = true;
                    ret.parentPath = lookup.path;
                    ret.parentObject = lookup.node;
                    ret.name = PATH.basename(path);
                    lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                    ret.exists = true;
                    ret.path = lookup.path;
                    ret.object = lookup.node;
                    ret.name = lookup.node.name;
                    ret.isRoot = lookup.path === "/";
                  } catch (e) {
                    ret.error = e.errno;
                  }
                  ;
                  return ret;
                }, createPath: (parent, path, canRead, canWrite) => {
                  parent = typeof parent == "string" ? parent : FS.getPath(parent);
                  var parts = path.split("/").reverse();
                  while (parts.length) {
                    var part = parts.pop();
                    if (!part)
                      continue;
                    var current = PATH.join2(parent, part);
                    try {
                      FS.mkdir(current);
                    } catch (e) {
                    }
                    parent = current;
                  }
                  return current;
                }, createFile: (parent, name, properties, canRead, canWrite) => {
                  var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
                  var mode = FS.getMode(canRead, canWrite);
                  return FS.create(path, mode);
                }, createDataFile: (parent, name, data, canRead, canWrite, canOwn) => {
                  var path = name;
                  if (parent) {
                    parent = typeof parent == "string" ? parent : FS.getPath(parent);
                    path = name ? PATH.join2(parent, name) : parent;
                  }
                  var mode = FS.getMode(canRead, canWrite);
                  var node = FS.create(path, mode);
                  if (data) {
                    if (typeof data == "string") {
                      var arr = new Array(data.length);
                      for (var i = 0, len = data.length; i < len; ++i)
                        arr[i] = data.charCodeAt(i);
                      data = arr;
                    }
                    FS.chmod(node, mode | 146);
                    var stream = FS.open(node, 577);
                    FS.write(stream, data, 0, data.length, 0, canOwn);
                    FS.close(stream);
                    FS.chmod(node, mode);
                  }
                  return node;
                }, createDevice: (parent, name, input, output) => {
                  var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
                  var mode = FS.getMode(!!input, !!output);
                  if (!FS.createDevice.major)
                    FS.createDevice.major = 64;
                  var dev = FS.makedev(FS.createDevice.major++, 0);
                  FS.registerDevice(dev, {
                    open: (stream) => {
                      stream.seekable = false;
                    },
                    close: (stream) => {
                      if (output && output.buffer && output.buffer.length) {
                        output(10);
                      }
                    },
                    read: (stream, buffer2, offset, length, pos) => {
                      var bytesRead = 0;
                      for (var i = 0; i < length; i++) {
                        var result;
                        try {
                          result = input();
                        } catch (e) {
                          throw new FS.ErrnoError(29);
                        }
                        if (result === void 0 && bytesRead === 0) {
                          throw new FS.ErrnoError(6);
                        }
                        if (result === null || result === void 0)
                          break;
                        bytesRead++;
                        buffer2[offset + i] = result;
                      }
                      if (bytesRead) {
                        stream.node.timestamp = Date.now();
                      }
                      return bytesRead;
                    },
                    write: (stream, buffer2, offset, length, pos) => {
                      for (var i = 0; i < length; i++) {
                        try {
                          output(buffer2[offset + i]);
                        } catch (e) {
                          throw new FS.ErrnoError(29);
                        }
                      }
                      if (length) {
                        stream.node.timestamp = Date.now();
                      }
                      return i;
                    }
                  });
                  return FS.mkdev(path, mode, dev);
                }, forceLoadFile: (obj) => {
                  if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
                    return true;
                  if (typeof XMLHttpRequest != "undefined") {
                    throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
                  } else if (read_) {
                    try {
                      obj.contents = intArrayFromString(read_(obj.url), true);
                      obj.usedBytes = obj.contents.length;
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                  } else {
                    throw new Error("Cannot load without read() or XMLHttpRequest.");
                  }
                }, createLazyFile: (parent, name, url, canRead, canWrite) => {
                  function LazyUint8Array() {
                    this.lengthKnown = false;
                    this.chunks = [];
                  }
                  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
                    if (idx > this.length - 1 || idx < 0) {
                      return void 0;
                    }
                    var chunkOffset = idx % this.chunkSize;
                    var chunkNum = idx / this.chunkSize | 0;
                    return this.getter(chunkNum)[chunkOffset];
                  };
                  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
                    this.getter = getter;
                  };
                  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                    var xhr = new XMLHttpRequest();
                    xhr.open("HEAD", url, false);
                    xhr.send(null);
                    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                      throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                    var datalength = Number(xhr.getResponseHeader("Content-length"));
                    var header;
                    var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
                    var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
                    var chunkSize = 1024 * 1024;
                    if (!hasByteServing)
                      chunkSize = datalength;
                    var doXHR = (from, to) => {
                      if (from > to)
                        throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                      if (to > datalength - 1)
                        throw new Error("only " + datalength + " bytes available! programmer error!");
                      var xhr2 = new XMLHttpRequest();
                      xhr2.open("GET", url, false);
                      if (datalength !== chunkSize)
                        xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
                      xhr2.responseType = "arraybuffer";
                      if (xhr2.overrideMimeType) {
                        xhr2.overrideMimeType("text/plain; charset=x-user-defined");
                      }
                      xhr2.send(null);
                      if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))
                        throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
                      if (xhr2.response !== void 0) {
                        return new Uint8Array(xhr2.response || []);
                      } else {
                        return intArrayFromString(xhr2.responseText || "", true);
                      }
                    };
                    var lazyArray2 = this;
                    lazyArray2.setDataGetter((chunkNum) => {
                      var start = chunkNum * chunkSize;
                      var end = (chunkNum + 1) * chunkSize - 1;
                      end = Math.min(end, datalength - 1);
                      if (typeof lazyArray2.chunks[chunkNum] == "undefined") {
                        lazyArray2.chunks[chunkNum] = doXHR(start, end);
                      }
                      if (typeof lazyArray2.chunks[chunkNum] == "undefined")
                        throw new Error("doXHR failed!");
                      return lazyArray2.chunks[chunkNum];
                    });
                    if (usesGzip || !datalength) {
                      chunkSize = datalength = 1;
                      datalength = this.getter(0).length;
                      chunkSize = datalength;
                      out("LazyFiles on gzip forces download of the whole file when length is accessed");
                    }
                    this._length = datalength;
                    this._chunkSize = chunkSize;
                    this.lengthKnown = true;
                  };
                  if (typeof XMLHttpRequest != "undefined") {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var lazyArray = new LazyUint8Array();
                    Object.defineProperties(lazyArray, {
                      length: {
                        get: function() {
                          if (!this.lengthKnown) {
                            this.cacheLength();
                          }
                          return this._length;
                        }
                      },
                      chunkSize: {
                        get: function() {
                          if (!this.lengthKnown) {
                            this.cacheLength();
                          }
                          return this._chunkSize;
                        }
                      }
                    });
                    var properties = { isDevice: false, contents: lazyArray };
                  } else {
                    var properties = { isDevice: false, url };
                  }
                  var node = FS.createFile(parent, name, properties, canRead, canWrite);
                  if (properties.contents) {
                    node.contents = properties.contents;
                  } else if (properties.url) {
                    node.contents = null;
                    node.url = properties.url;
                  }
                  Object.defineProperties(node, {
                    usedBytes: {
                      get: function() {
                        return this.contents.length;
                      }
                    }
                  });
                  var stream_ops = {};
                  var keys = Object.keys(node.stream_ops);
                  keys.forEach((key) => {
                    var fn = node.stream_ops[key];
                    stream_ops[key] = function forceLoadLazyFile() {
                      FS.forceLoadFile(node);
                      return fn.apply(null, arguments);
                    };
                  });
                  stream_ops.read = (stream, buffer2, offset, length, position) => {
                    FS.forceLoadFile(node);
                    var contents = stream.node.contents;
                    if (position >= contents.length)
                      return 0;
                    var size = Math.min(contents.length - position, length);
                    assert(size >= 0);
                    if (contents.slice) {
                      for (var i = 0; i < size; i++) {
                        buffer2[offset + i] = contents[position + i];
                      }
                    } else {
                      for (var i = 0; i < size; i++) {
                        buffer2[offset + i] = contents.get(position + i);
                      }
                    }
                    return size;
                  };
                  node.stream_ops = stream_ops;
                  return node;
                }, createPreloadedFile: (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
                  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
                  var dep = getUniqueRunDependency("cp " + fullname);
                  function processData(byteArray) {
                    function finish(byteArray2) {
                      if (preFinish)
                        preFinish();
                      if (!dontCreateFile) {
                        FS.createDataFile(parent, name, byteArray2, canRead, canWrite, canOwn);
                      }
                      if (onload)
                        onload();
                      removeRunDependency(dep);
                    }
                    if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {
                      if (onerror)
                        onerror();
                      removeRunDependency(dep);
                    })) {
                      return;
                    }
                    finish(byteArray);
                  }
                  addRunDependency(dep);
                  if (typeof url == "string") {
                    asyncLoad(url, (byteArray) => processData(byteArray), onerror);
                  } else {
                    processData(url);
                  }
                }, indexedDB: () => {
                  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
                }, DB_NAME: () => {
                  return "EM_FS_" + window.location.pathname;
                }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: (paths, onload, onerror) => {
                  onload = onload || (() => {
                  });
                  onerror = onerror || (() => {
                  });
                  var indexedDB = FS.indexedDB();
                  try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return onerror(e);
                  }
                  openRequest.onupgradeneeded = () => {
                    out("creating db");
                    var db = openRequest.result;
                    db.createObjectStore(FS.DB_STORE_NAME);
                  };
                  openRequest.onsuccess = () => {
                    var db = openRequest.result;
                    var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0, fail = 0, total = paths.length;
                    function finish() {
                      if (fail == 0)
                        onload();
                      else
                        onerror();
                    }
                    paths.forEach((path) => {
                      var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                      putRequest.onsuccess = () => {
                        ok++;
                        if (ok + fail == total)
                          finish();
                      };
                      putRequest.onerror = () => {
                        fail++;
                        if (ok + fail == total)
                          finish();
                      };
                    });
                    transaction.onerror = onerror;
                  };
                  openRequest.onerror = onerror;
                }, loadFilesFromDB: (paths, onload, onerror) => {
                  onload = onload || (() => {
                  });
                  onerror = onerror || (() => {
                  });
                  var indexedDB = FS.indexedDB();
                  try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return onerror(e);
                  }
                  openRequest.onupgradeneeded = onerror;
                  openRequest.onsuccess = () => {
                    var db = openRequest.result;
                    try {
                      var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
                    } catch (e) {
                      onerror(e);
                      return;
                    }
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0, fail = 0, total = paths.length;
                    function finish() {
                      if (fail == 0)
                        onload();
                      else
                        onerror();
                    }
                    paths.forEach((path) => {
                      var getRequest = files.get(path);
                      getRequest.onsuccess = () => {
                        if (FS.analyzePath(path).exists) {
                          FS.unlink(path);
                        }
                        FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                        ok++;
                        if (ok + fail == total)
                          finish();
                      };
                      getRequest.onerror = () => {
                        fail++;
                        if (ok + fail == total)
                          finish();
                      };
                    });
                    transaction.onerror = onerror;
                  };
                  openRequest.onerror = onerror;
                }, absolutePath: () => {
                  abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
                }, createFolder: () => {
                  abort("FS.createFolder has been removed; use FS.mkdir instead");
                }, createLink: () => {
                  abort("FS.createLink has been removed; use FS.symlink instead");
                }, joinPath: () => {
                  abort("FS.joinPath has been removed; use PATH.join instead");
                }, mmapAlloc: () => {
                  abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
                }, standardizePath: () => {
                  abort("FS.standardizePath has been removed; use PATH.normalize instead");
                } };
                var SYSCALLS = { DEFAULT_POLLMASK: 5, calculateAt: function(dirfd, path, allowEmpty) {
                  if (path[0] === "/") {
                    return path;
                  }
                  var dir;
                  if (dirfd === -100) {
                    dir = FS.cwd();
                  } else {
                    var dirstream = FS.getStream(dirfd);
                    if (!dirstream)
                      throw new FS.ErrnoError(8);
                    dir = dirstream.path;
                  }
                  if (path.length == 0) {
                    if (!allowEmpty) {
                      throw new FS.ErrnoError(44);
                      ;
                    }
                    return dir;
                  }
                  return PATH.join2(dir, path);
                }, doStat: function(func, path, buf) {
                  try {
                    var stat = func(path);
                  } catch (e) {
                    if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                      return -54;
                    }
                    throw e;
                  }
                  HEAP32[buf >> 2] = stat.dev;
                  HEAP32[buf + 4 >> 2] = 0;
                  HEAP32[buf + 8 >> 2] = stat.ino;
                  HEAP32[buf + 12 >> 2] = stat.mode;
                  HEAP32[buf + 16 >> 2] = stat.nlink;
                  HEAP32[buf + 20 >> 2] = stat.uid;
                  HEAP32[buf + 24 >> 2] = stat.gid;
                  HEAP32[buf + 28 >> 2] = stat.rdev;
                  HEAP32[buf + 32 >> 2] = 0;
                  tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
                  HEAP32[buf + 48 >> 2] = 4096;
                  HEAP32[buf + 52 >> 2] = stat.blocks;
                  HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
                  HEAP32[buf + 60 >> 2] = 0;
                  HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
                  HEAP32[buf + 68 >> 2] = 0;
                  HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
                  HEAP32[buf + 76 >> 2] = 0;
                  tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
                  return 0;
                }, doMsync: function(addr, stream, len, flags, offset) {
                  var buffer2 = HEAPU8.slice(addr, addr + len);
                  FS.msync(stream, buffer2, offset, len, flags);
                }, doMkdir: function(path, mode) {
                  path = PATH.normalize(path);
                  if (path[path.length - 1] === "/")
                    path = path.substr(0, path.length - 1);
                  FS.mkdir(path, mode, 0);
                  return 0;
                }, doMknod: function(path, mode, dev) {
                  switch (mode & 61440) {
                    case 32768:
                    case 8192:
                    case 24576:
                    case 4096:
                    case 49152:
                      break;
                    default:
                      return -28;
                  }
                  FS.mknod(path, mode, dev);
                  return 0;
                }, doReadlink: function(path, buf, bufsize) {
                  if (bufsize <= 0)
                    return -28;
                  var ret = FS.readlink(path);
                  var len = Math.min(bufsize, lengthBytesUTF8(ret));
                  var endChar = HEAP8[buf + len];
                  stringToUTF8(ret, buf, bufsize + 1);
                  HEAP8[buf + len] = endChar;
                  return len;
                }, doAccess: function(path, amode) {
                  if (amode & ~7) {
                    return -28;
                  }
                  var lookup = FS.lookupPath(path, { follow: true });
                  var node = lookup.node;
                  if (!node) {
                    return -44;
                  }
                  var perms = "";
                  if (amode & 4)
                    perms += "r";
                  if (amode & 2)
                    perms += "w";
                  if (amode & 1)
                    perms += "x";
                  if (perms && FS.nodePermissions(node, perms)) {
                    return -2;
                  }
                  return 0;
                }, doDup: function(path, flags, suggestFD) {
                  var suggest = FS.getStream(suggestFD);
                  if (suggest)
                    FS.close(suggest);
                  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
                }, doReadv: function(stream, iov, iovcnt, offset) {
                  var ret = 0;
                  for (var i = 0; i < iovcnt; i++) {
                    var ptr = HEAP32[iov + i * 8 >> 2];
                    var len = HEAP32[iov + (i * 8 + 4) >> 2];
                    var curr = FS.read(stream, HEAP8, ptr, len, offset);
                    if (curr < 0)
                      return -1;
                    ret += curr;
                    if (curr < len)
                      break;
                  }
                  return ret;
                }, doWritev: function(stream, iov, iovcnt, offset) {
                  var ret = 0;
                  for (var i = 0; i < iovcnt; i++) {
                    var ptr = HEAP32[iov + i * 8 >> 2];
                    var len = HEAP32[iov + (i * 8 + 4) >> 2];
                    var curr = FS.write(stream, HEAP8, ptr, len, offset);
                    if (curr < 0)
                      return -1;
                    ret += curr;
                  }
                  return ret;
                }, varargs: void 0, get: function() {
                  assert(SYSCALLS.varargs != void 0);
                  SYSCALLS.varargs += 4;
                  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
                  return ret;
                }, getStr: function(ptr) {
                  var ret = UTF8ToString(ptr);
                  return ret;
                }, getStreamFromFD: function(fd) {
                  var stream = FS.getStream(fd);
                  if (!stream)
                    throw new FS.ErrnoError(8);
                  return stream;
                }, get64: function(low, high) {
                  if (low >= 0)
                    assert(high === 0);
                  else
                    assert(high === -1);
                  return low;
                } };
                function ___syscall_dup(fd) {
                  try {
                    var old = SYSCALLS.getStreamFromFD(fd);
                    return FS.open(old.path, old.flags, 0).fd;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return -e.errno;
                  }
                }
                function ___syscall_open(path, flags, varargs) {
                  SYSCALLS.varargs = varargs;
                  try {
                    var pathname = SYSCALLS.getStr(path);
                    var mode = varargs ? SYSCALLS.get() : 0;
                    var stream = FS.open(pathname, flags, mode);
                    return stream.fd;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return -e.errno;
                  }
                }
                function ___syscall_stat64(path, buf) {
                  try {
                    path = SYSCALLS.getStr(path);
                    return SYSCALLS.doStat(FS.stat, path, buf);
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return -e.errno;
                  }
                }
                function __localtime_js(time, tmPtr) {
                  var date = new Date(HEAP32[time >> 2] * 1e3);
                  HEAP32[tmPtr >> 2] = date.getSeconds();
                  HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
                  HEAP32[tmPtr + 8 >> 2] = date.getHours();
                  HEAP32[tmPtr + 12 >> 2] = date.getDate();
                  HEAP32[tmPtr + 16 >> 2] = date.getMonth();
                  HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
                  HEAP32[tmPtr + 24 >> 2] = date.getDay();
                  var start = new Date(date.getFullYear(), 0, 1);
                  var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
                  HEAP32[tmPtr + 28 >> 2] = yday;
                  HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
                  var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
                  var winterOffset = start.getTimezoneOffset();
                  var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
                  HEAP32[tmPtr + 32 >> 2] = dst;
                }
                function __mmap_js(addr, len, prot, flags, fd, off, allocated, builtin) {
                  try {
                    var info = FS.getStream(fd);
                    if (!info)
                      return -8;
                    var res = FS.mmap(info, addr, len, off, prot, flags);
                    var ptr = res.ptr;
                    HEAP32[allocated >> 2] = res.allocated;
                    return ptr;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return -e.errno;
                  }
                }
                function __munmap_js(addr, len, prot, flags, fd, offset) {
                  try {
                    var stream = FS.getStream(fd);
                    if (stream) {
                      if (prot & 2) {
                        SYSCALLS.doMsync(addr, stream, len, flags, offset);
                      }
                      FS.munmap(stream);
                    }
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return -e.errno;
                  }
                }
                function _tzset_impl(timezone, daylight, tzname) {
                  var currentYear = new Date().getFullYear();
                  var winter = new Date(currentYear, 0, 1);
                  var summer = new Date(currentYear, 6, 1);
                  var winterOffset = winter.getTimezoneOffset();
                  var summerOffset = summer.getTimezoneOffset();
                  var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
                  HEAP32[timezone >> 2] = stdTimezoneOffset * 60;
                  HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);
                  function extractZone(date) {
                    var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                    return match ? match[1] : "GMT";
                  }
                  ;
                  var winterName = extractZone(winter);
                  var summerName = extractZone(summer);
                  var winterNamePtr = allocateUTF8(winterName);
                  var summerNamePtr = allocateUTF8(summerName);
                  if (summerOffset < winterOffset) {
                    HEAP32[tzname >> 2] = winterNamePtr;
                    HEAP32[tzname + 4 >> 2] = summerNamePtr;
                  } else {
                    HEAP32[tzname >> 2] = summerNamePtr;
                    HEAP32[tzname + 4 >> 2] = winterNamePtr;
                  }
                }
                function __tzset_js(timezone, daylight, tzname) {
                  if (__tzset_js.called)
                    return;
                  __tzset_js.called = true;
                  _tzset_impl(timezone, daylight, tzname);
                }
                function _abort() {
                  abort("native code called abort()");
                }
                var readAsmConstArgsArray = [];
                function readAsmConstArgs(sigPtr, buf) {
                  ;
                  assert(Array.isArray(readAsmConstArgsArray));
                  assert(buf % 16 == 0);
                  readAsmConstArgsArray.length = 0;
                  var ch;
                  buf >>= 2;
                  while (ch = HEAPU8[sigPtr++]) {
                    assert(ch === 100 || ch === 102 || ch === 105, "Invalid character " + ch + '("' + String.fromCharCode(ch) + '") in readAsmConstArgs! Use only "d", "f" or "i", and do not specify "v" for void return argument.');
                    var readAsmConstArgsDouble = ch < 105;
                    if (readAsmConstArgsDouble && buf & 1)
                      buf++;
                    readAsmConstArgsArray.push(readAsmConstArgsDouble ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
                    ++buf;
                  }
                  return readAsmConstArgsArray;
                }
                function _emscripten_asm_const_int(code, sigPtr, argbuf) {
                  var args = readAsmConstArgs(sigPtr, argbuf);
                  if (!ASM_CONSTS.hasOwnProperty(code))
                    abort("No EM_ASM constant found at address " + code);
                  return ASM_CONSTS[code].apply(null, args);
                }
                function _emscripten_get_heap_max() {
                  return 2147483648;
                }
                function _emscripten_get_module_name(buf, length) {
                  return stringToUTF8(wasmBinaryFile, buf, length);
                }
                var _emscripten_get_now;
                if (ENVIRONMENT_IS_NODE) {
                  _emscripten_get_now = () => {
                    var t = process["hrtime"]();
                    return t[0] * 1e3 + t[1] / 1e6;
                  };
                } else
                  _emscripten_get_now = () => performance.now();
                ;
                function _emscripten_memcpy_big(dest, src, num) {
                  HEAPU8.copyWithin(dest, src, src + num);
                }
                var UNWIND_CACHE = {};
                function convertFrameToPC(frame) {
                  assert(wasmOffsetConverter);
                  var match;
                  if (match = /\bwasm-function\[\d+\]:(0x[0-9a-f]+)/.exec(frame)) {
                    return +match[1];
                  } else if (match = /\bwasm-function\[(\d+)\]:(\d+)/.exec(frame)) {
                    return wasmOffsetConverter.convert(+match[1], +match[2]);
                  } else if (match = /:(\d+):\d+(?:\)|$)/.exec(frame)) {
                    return 2147483648 | +match[1];
                  }
                  return 0;
                }
                function convertPCtoSourceLocation(pc) {
                  if (UNWIND_CACHE.last_get_source_pc == pc)
                    return UNWIND_CACHE.last_source;
                  var match;
                  var source;
                  if (wasmSourceMap) {
                    var info = wasmSourceMap.lookup(pc);
                    if (info) {
                      source = { file: info.source, line: info.line, column: info.column };
                    }
                  }
                  if (!source) {
                    var frame = UNWIND_CACHE[pc];
                    if (!frame)
                      return null;
                    if (match = /\((.*):(\d+):(\d+)\)$/.exec(frame)) {
                      source = { file: match[1], line: match[2], column: match[3] };
                    } else if (match = /@(.*):(\d+):(\d+)/.exec(frame)) {
                      source = { file: match[1], line: match[2], column: match[3] };
                    }
                  }
                  UNWIND_CACHE.last_get_source_pc = pc;
                  UNWIND_CACHE.last_source = source;
                  return source;
                }
                function _emscripten_pc_get_column(pc) {
                  var result = convertPCtoSourceLocation(pc);
                  return result ? result.column || 0 : 0;
                }
                function withBuiltinMalloc(func) {
                  var prev_malloc = typeof _malloc != "undefined" ? _malloc : void 0;
                  var prev_memalign = typeof _memalign != "undefined" ? _memalign : void 0;
                  var prev_free = typeof _free != "undefined" ? _free : void 0;
                  _malloc = _emscripten_builtin_malloc;
                  _memalign = _emscripten_builtin_memalign;
                  _free = _emscripten_builtin_free;
                  try {
                    return func();
                  } finally {
                    _malloc = prev_malloc;
                    _memalign = prev_memalign;
                    _free = prev_free;
                  }
                }
                function _emscripten_pc_get_file(pc) {
                  return withBuiltinMalloc(function() {
                    var result = convertPCtoSourceLocation(pc);
                    if (!result)
                      return 0;
                    if (_emscripten_pc_get_file.ret)
                      _free(_emscripten_pc_get_file.ret);
                    _emscripten_pc_get_file.ret = allocateUTF8(result.file);
                    return _emscripten_pc_get_file.ret;
                  });
                }
                function _emscripten_pc_get_function(pc) {
                  return withBuiltinMalloc(function() {
                    var name;
                    if (pc & 2147483648) {
                      var frame = UNWIND_CACHE[pc];
                      if (!frame)
                        return 0;
                      var match;
                      if (match = /^\s+at (.*) \(.*\)$/.exec(frame)) {
                        name = match[1];
                      } else if (match = /^(.+?)@/.exec(frame)) {
                        name = match[1];
                      } else {
                        return 0;
                      }
                    } else {
                      name = wasmOffsetConverter.getName(pc);
                    }
                    if (_emscripten_pc_get_function.ret)
                      _free(_emscripten_pc_get_function.ret);
                    _emscripten_pc_get_function.ret = allocateUTF8(name);
                    return _emscripten_pc_get_function.ret;
                  });
                }
                function _emscripten_pc_get_line(pc) {
                  var result = convertPCtoSourceLocation(pc);
                  return result ? result.line : 0;
                }
                function emscripten_realloc_buffer(size) {
                  try {
                    wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
                    updateGlobalBufferAndViews(wasmMemory.buffer);
                    return 1;
                  } catch (e) {
                    err("emscripten_realloc_buffer: Attempted to grow heap from " + buffer.byteLength + " bytes to " + size + " bytes, but got error: " + e);
                  }
                }
                function _emscripten_resize_heap(requestedSize) {
                  var oldSize = HEAPU8.length;
                  requestedSize = requestedSize >>> 0;
                  assert(requestedSize > oldSize);
                  var maxHeapSize = _emscripten_get_heap_max();
                  if (requestedSize > maxHeapSize) {
                    err("Cannot enlarge memory, asked to go up to " + requestedSize + " bytes, but the limit is " + maxHeapSize + " bytes!");
                    return false;
                  }
                  let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
                  for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
                    var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
                    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
                    var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
                    var replacement = emscripten_realloc_buffer(newSize);
                    if (replacement) {
                      return true;
                    }
                  }
                  err("Failed to grow the heap from " + oldSize + " bytes to " + newSize + " bytes, not enough memory!");
                  return false;
                }
                function saveInUnwindCache(callstack) {
                  callstack.forEach(function(frame) {
                    var pc = convertFrameToPC(frame);
                    if (pc) {
                      UNWIND_CACHE[pc] = frame;
                    }
                  });
                }
                function _emscripten_stack_snapshot() {
                  var callstack = new Error().stack.split("\n");
                  if (callstack[0] == "Error") {
                    callstack.shift();
                  }
                  saveInUnwindCache(callstack);
                  UNWIND_CACHE.last_addr = convertFrameToPC(callstack[2]);
                  UNWIND_CACHE.last_stack = callstack;
                  return UNWIND_CACHE.last_addr;
                }
                function _emscripten_stack_unwind_buffer(addr, buffer2, count) {
                  var stack;
                  if (UNWIND_CACHE.last_addr == addr) {
                    stack = UNWIND_CACHE.last_stack;
                  } else {
                    stack = new Error().stack.split("\n");
                    if (stack[0] == "Error") {
                      stack.shift();
                    }
                    saveInUnwindCache(stack);
                  }
                  var offset = 2;
                  while (stack[offset] && convertFrameToPC(stack[offset]) != addr) {
                    ++offset;
                  }
                  for (var i = 0; i < count && stack[i + offset]; ++i) {
                    HEAP32[buffer2 + i * 4 >> 2] = convertFrameToPC(stack[i + offset]);
                  }
                  return i;
                }
                function _fd_close(fd) {
                  try {
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    FS.close(stream);
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _fd_read(fd, iov, iovcnt, pnum) {
                  try {
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var num = SYSCALLS.doReadv(stream, iov, iovcnt);
                    HEAP32[pnum >> 2] = num;
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
                  try {
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var HIGH_OFFSET = 4294967296;
                    var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
                    var DOUBLE_LIMIT = 9007199254740992;
                    if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
                      return -61;
                    }
                    FS.llseek(stream, offset, whence);
                    tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
                    if (stream.getdents && offset === 0 && whence === 0)
                      stream.getdents = null;
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _fd_write(fd, iov, iovcnt, pnum) {
                  try {
                    ;
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var num = SYSCALLS.doWritev(stream, iov, iovcnt);
                    HEAP32[pnum >> 2] = num;
                    return 0;
                  } catch (e) {
                    if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                      throw e;
                    return e.errno;
                  }
                }
                function _gettimeofday(ptr) {
                  var now = Date.now();
                  HEAP32[ptr >> 2] = now / 1e3 | 0;
                  HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
                  return 0;
                }
                function _proc_exit(code) {
                  procExit(code);
                }
                function _setTempRet0(val) {
                  setTempRet0(val);
                }
                var FSNode = function(parent, name, mode, rdev) {
                  if (!parent) {
                    parent = this;
                  }
                  this.parent = parent;
                  this.mount = parent.mount;
                  this.mounted = null;
                  this.id = FS.nextInode++;
                  this.name = name;
                  this.mode = mode;
                  this.node_ops = {};
                  this.stream_ops = {};
                  this.rdev = rdev;
                };
                var readMode = 292 | 73;
                var writeMode = 146;
                Object.defineProperties(FSNode.prototype, {
                  read: {
                    get: function() {
                      return (this.mode & readMode) === readMode;
                    },
                    set: function(val) {
                      val ? this.mode |= readMode : this.mode &= ~readMode;
                    }
                  },
                  write: {
                    get: function() {
                      return (this.mode & writeMode) === writeMode;
                    },
                    set: function(val) {
                      val ? this.mode |= writeMode : this.mode &= ~writeMode;
                    }
                  },
                  isFolder: {
                    get: function() {
                      return FS.isDir(this.mode);
                    }
                  },
                  isDevice: {
                    get: function() {
                      return FS.isChrdev(this.mode);
                    }
                  }
                });
                FS.FSNode = FSNode;
                FS.staticInit();
                ;
                ERRNO_CODES = {
                  "EPERM": 63,
                  "ENOENT": 44,
                  "ESRCH": 71,
                  "EINTR": 27,
                  "EIO": 29,
                  "ENXIO": 60,
                  "E2BIG": 1,
                  "ENOEXEC": 45,
                  "EBADF": 8,
                  "ECHILD": 12,
                  "EAGAIN": 6,
                  "EWOULDBLOCK": 6,
                  "ENOMEM": 48,
                  "EACCES": 2,
                  "EFAULT": 21,
                  "ENOTBLK": 105,
                  "EBUSY": 10,
                  "EEXIST": 20,
                  "EXDEV": 75,
                  "ENODEV": 43,
                  "ENOTDIR": 54,
                  "EISDIR": 31,
                  "EINVAL": 28,
                  "ENFILE": 41,
                  "EMFILE": 33,
                  "ENOTTY": 59,
                  "ETXTBSY": 74,
                  "EFBIG": 22,
                  "ENOSPC": 51,
                  "ESPIPE": 70,
                  "EROFS": 69,
                  "EMLINK": 34,
                  "EPIPE": 64,
                  "EDOM": 18,
                  "ERANGE": 68,
                  "ENOMSG": 49,
                  "EIDRM": 24,
                  "ECHRNG": 106,
                  "EL2NSYNC": 156,
                  "EL3HLT": 107,
                  "EL3RST": 108,
                  "ELNRNG": 109,
                  "EUNATCH": 110,
                  "ENOCSI": 111,
                  "EL2HLT": 112,
                  "EDEADLK": 16,
                  "ENOLCK": 46,
                  "EBADE": 113,
                  "EBADR": 114,
                  "EXFULL": 115,
                  "ENOANO": 104,
                  "EBADRQC": 103,
                  "EBADSLT": 102,
                  "EDEADLOCK": 16,
                  "EBFONT": 101,
                  "ENOSTR": 100,
                  "ENODATA": 116,
                  "ETIME": 117,
                  "ENOSR": 118,
                  "ENONET": 119,
                  "ENOPKG": 120,
                  "EREMOTE": 121,
                  "ENOLINK": 47,
                  "EADV": 122,
                  "ESRMNT": 123,
                  "ECOMM": 124,
                  "EPROTO": 65,
                  "EMULTIHOP": 36,
                  "EDOTDOT": 125,
                  "EBADMSG": 9,
                  "ENOTUNIQ": 126,
                  "EBADFD": 127,
                  "EREMCHG": 128,
                  "ELIBACC": 129,
                  "ELIBBAD": 130,
                  "ELIBSCN": 131,
                  "ELIBMAX": 132,
                  "ELIBEXEC": 133,
                  "ENOSYS": 52,
                  "ENOTEMPTY": 55,
                  "ENAMETOOLONG": 37,
                  "ELOOP": 32,
                  "EOPNOTSUPP": 138,
                  "EPFNOSUPPORT": 139,
                  "ECONNRESET": 15,
                  "ENOBUFS": 42,
                  "EAFNOSUPPORT": 5,
                  "EPROTOTYPE": 67,
                  "ENOTSOCK": 57,
                  "ENOPROTOOPT": 50,
                  "ESHUTDOWN": 140,
                  "ECONNREFUSED": 14,
                  "EADDRINUSE": 3,
                  "ECONNABORTED": 13,
                  "ENETUNREACH": 40,
                  "ENETDOWN": 38,
                  "ETIMEDOUT": 73,
                  "EHOSTDOWN": 142,
                  "EHOSTUNREACH": 23,
                  "EINPROGRESS": 26,
                  "EALREADY": 7,
                  "EDESTADDRREQ": 17,
                  "EMSGSIZE": 35,
                  "EPROTONOSUPPORT": 66,
                  "ESOCKTNOSUPPORT": 137,
                  "EADDRNOTAVAIL": 4,
                  "ENETRESET": 39,
                  "EISCONN": 30,
                  "ENOTCONN": 53,
                  "ETOOMANYREFS": 141,
                  "EUSERS": 136,
                  "EDQUOT": 19,
                  "ESTALE": 72,
                  "ENOTSUP": 138,
                  "ENOMEDIUM": 148,
                  "EILSEQ": 25,
                  "EOVERFLOW": 61,
                  "ECANCELED": 11,
                  "ENOTRECOVERABLE": 56,
                  "EOWNERDEAD": 62,
                  "ESTRPIPE": 135
                };
                ;
                var ASSERTIONS = true;
                function intArrayFromString(stringy, dontAddNull, length) {
                  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
                  var u8array = new Array(len);
                  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
                  if (dontAddNull)
                    u8array.length = numBytesWritten;
                  return u8array;
                }
                function intArrayToString(array) {
                  var ret = [];
                  for (var i = 0; i < array.length; i++) {
                    var chr = array[i];
                    if (chr > 255) {
                      if (ASSERTIONS) {
                        assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
                      }
                      chr &= 255;
                    }
                    ret.push(String.fromCharCode(chr));
                  }
                  return ret.join("");
                }
                function checkIncomingModuleAPI() {
                  ignoredModuleProp("fetchSettings");
                }
                var asmLibraryArg = {
                  "__assert_fail": ___assert_fail,
                  "__syscall_dup": ___syscall_dup,
                  "__syscall_open": ___syscall_open,
                  "__syscall_stat64": ___syscall_stat64,
                  "_localtime_js": __localtime_js,
                  "_mmap_js": __mmap_js,
                  "_munmap_js": __munmap_js,
                  "_tzset_js": __tzset_js,
                  "abort": _abort,
                  "emscripten_asm_const_int": _emscripten_asm_const_int,
                  "emscripten_get_heap_max": _emscripten_get_heap_max,
                  "emscripten_get_module_name": _emscripten_get_module_name,
                  "emscripten_get_now": _emscripten_get_now,
                  "emscripten_memcpy_big": _emscripten_memcpy_big,
                  "emscripten_pc_get_column": _emscripten_pc_get_column,
                  "emscripten_pc_get_file": _emscripten_pc_get_file,
                  "emscripten_pc_get_function": _emscripten_pc_get_function,
                  "emscripten_pc_get_line": _emscripten_pc_get_line,
                  "emscripten_resize_heap": _emscripten_resize_heap,
                  "emscripten_stack_snapshot": _emscripten_stack_snapshot,
                  "emscripten_stack_unwind_buffer": _emscripten_stack_unwind_buffer,
                  "fd_close": _fd_close,
                  "fd_read": _fd_read,
                  "fd_seek": _fd_seek,
                  "fd_write": _fd_write,
                  "gettimeofday": _gettimeofday,
                  "proc_exit": _proc_exit,
                  "qts_host_call_function": qts_host_call_function,
                  "qts_host_interrupt_handler": qts_host_interrupt_handler,
                  "qts_host_load_module_source": qts_host_load_module_source,
                  "qts_host_normalize_module": qts_host_normalize_module,
                  "setTempRet0": _setTempRet0
                };
                var asm = createWasm();
                var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");
                var _malloc = Module["_malloc"] = createExportWrapper("malloc");
                var _QTS_Throw = Module["_QTS_Throw"] = createExportWrapper("QTS_Throw");
                var _QTS_NewError = Module["_QTS_NewError"] = createExportWrapper("QTS_NewError");
                var _QTS_RuntimeSetMemoryLimit = Module["_QTS_RuntimeSetMemoryLimit"] = createExportWrapper("QTS_RuntimeSetMemoryLimit");
                var _QTS_RuntimeComputeMemoryUsage = Module["_QTS_RuntimeComputeMemoryUsage"] = createExportWrapper("QTS_RuntimeComputeMemoryUsage");
                var _QTS_RuntimeDumpMemoryUsage = Module["_QTS_RuntimeDumpMemoryUsage"] = createExportWrapper("QTS_RuntimeDumpMemoryUsage");
                var _QTS_RecoverableLeakCheck = Module["_QTS_RecoverableLeakCheck"] = createExportWrapper("QTS_RecoverableLeakCheck");
                var _QTS_BuildIsSanitizeLeak = Module["_QTS_BuildIsSanitizeLeak"] = createExportWrapper("QTS_BuildIsSanitizeLeak");
                var _QTS_GetUndefined = Module["_QTS_GetUndefined"] = createExportWrapper("QTS_GetUndefined");
                var _QTS_GetNull = Module["_QTS_GetNull"] = createExportWrapper("QTS_GetNull");
                var _QTS_GetFalse = Module["_QTS_GetFalse"] = createExportWrapper("QTS_GetFalse");
                var _QTS_GetTrue = Module["_QTS_GetTrue"] = createExportWrapper("QTS_GetTrue");
                var _QTS_NewRuntime = Module["_QTS_NewRuntime"] = createExportWrapper("QTS_NewRuntime");
                var _QTS_FreeRuntime = Module["_QTS_FreeRuntime"] = createExportWrapper("QTS_FreeRuntime");
                var _QTS_NewContext = Module["_QTS_NewContext"] = createExportWrapper("QTS_NewContext");
                var _QTS_FreeContext = Module["_QTS_FreeContext"] = createExportWrapper("QTS_FreeContext");
                var _QTS_FreeValuePointer = Module["_QTS_FreeValuePointer"] = createExportWrapper("QTS_FreeValuePointer");
                var _free = Module["_free"] = createExportWrapper("free");
                var _QTS_FreeValuePointerRuntime = Module["_QTS_FreeValuePointerRuntime"] = createExportWrapper("QTS_FreeValuePointerRuntime");
                var _QTS_FreeVoidPointer = Module["_QTS_FreeVoidPointer"] = createExportWrapper("QTS_FreeVoidPointer");
                var _QTS_FreeCString = Module["_QTS_FreeCString"] = createExportWrapper("QTS_FreeCString");
                var _QTS_DupValuePointer = Module["_QTS_DupValuePointer"] = createExportWrapper("QTS_DupValuePointer");
                var _QTS_NewObject = Module["_QTS_NewObject"] = createExportWrapper("QTS_NewObject");
                var _QTS_NewObjectProto = Module["_QTS_NewObjectProto"] = createExportWrapper("QTS_NewObjectProto");
                var _QTS_NewArray = Module["_QTS_NewArray"] = createExportWrapper("QTS_NewArray");
                var _QTS_NewFloat64 = Module["_QTS_NewFloat64"] = createExportWrapper("QTS_NewFloat64");
                var _QTS_GetFloat64 = Module["_QTS_GetFloat64"] = createExportWrapper("QTS_GetFloat64");
                var _QTS_NewString = Module["_QTS_NewString"] = createExportWrapper("QTS_NewString");
                var _QTS_GetString = Module["_QTS_GetString"] = createExportWrapper("QTS_GetString");
                var _QTS_IsJobPending = Module["_QTS_IsJobPending"] = createExportWrapper("QTS_IsJobPending");
                var _QTS_ExecutePendingJob = Module["_QTS_ExecutePendingJob"] = createExportWrapper("QTS_ExecutePendingJob");
                var _QTS_GetProp = Module["_QTS_GetProp"] = createExportWrapper("QTS_GetProp");
                var _QTS_SetProp = Module["_QTS_SetProp"] = createExportWrapper("QTS_SetProp");
                var _QTS_DefineProp = Module["_QTS_DefineProp"] = createExportWrapper("QTS_DefineProp");
                var _QTS_Call = Module["_QTS_Call"] = createExportWrapper("QTS_Call");
                var _QTS_ResolveException = Module["_QTS_ResolveException"] = createExportWrapper("QTS_ResolveException");
                var _QTS_Dump = Module["_QTS_Dump"] = createExportWrapper("QTS_Dump");
                var _QTS_Eval = Module["_QTS_Eval"] = createExportWrapper("QTS_Eval");
                var _QTS_Typeof = Module["_QTS_Typeof"] = createExportWrapper("QTS_Typeof");
                var _QTS_GetGlobalObject = Module["_QTS_GetGlobalObject"] = createExportWrapper("QTS_GetGlobalObject");
                var _QTS_NewPromiseCapability = Module["_QTS_NewPromiseCapability"] = createExportWrapper("QTS_NewPromiseCapability");
                var _QTS_TestStringArg = Module["_QTS_TestStringArg"] = createExportWrapper("QTS_TestStringArg");
                var _QTS_BuildIsDebug = Module["_QTS_BuildIsDebug"] = createExportWrapper("QTS_BuildIsDebug");
                var _QTS_BuildIsAsyncify = Module["_QTS_BuildIsAsyncify"] = createExportWrapper("QTS_BuildIsAsyncify");
                var _QTS_NewFunction = Module["_QTS_NewFunction"] = createExportWrapper("QTS_NewFunction");
                var _QTS_ArgvGetJSValueConstPointer = Module["_QTS_ArgvGetJSValueConstPointer"] = createExportWrapper("QTS_ArgvGetJSValueConstPointer");
                var _QTS_RuntimeEnableInterruptHandler = Module["_QTS_RuntimeEnableInterruptHandler"] = createExportWrapper("QTS_RuntimeEnableInterruptHandler");
                var _QTS_RuntimeDisableInterruptHandler = Module["_QTS_RuntimeDisableInterruptHandler"] = createExportWrapper("QTS_RuntimeDisableInterruptHandler");
                var _QTS_RuntimeEnableModuleLoader = Module["_QTS_RuntimeEnableModuleLoader"] = createExportWrapper("QTS_RuntimeEnableModuleLoader");
                var _QTS_RuntimeDisableModuleLoader = Module["_QTS_RuntimeDisableModuleLoader"] = createExportWrapper("QTS_RuntimeDisableModuleLoader");
                var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");
                var _emscripten_builtin_malloc = Module["_emscripten_builtin_malloc"] = createExportWrapper("emscripten_builtin_malloc");
                var ___stdio_exit = Module["___stdio_exit"] = createExportWrapper("__stdio_exit");
                var ___funcs_on_exit = Module["___funcs_on_exit"] = createExportWrapper("__funcs_on_exit");
                var ___dl_seterr = Module["___dl_seterr"] = createExportWrapper("__dl_seterr");
                var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = createExportWrapper("emscripten_main_thread_process_queued_calls");
                var _memalign = Module["_memalign"] = createExportWrapper("memalign");
                var _emscripten_builtin_free = Module["_emscripten_builtin_free"] = createExportWrapper("emscripten_builtin_free");
                var _emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = createExportWrapper("emscripten_builtin_memalign");
                var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
                  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
                };
                var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
                  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
                };
                var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
                  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
                };
                var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
                  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
                };
                var stackSave = Module["stackSave"] = createExportWrapper("stackSave");
                var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");
                var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");
                var dynCall_jijiii = Module["dynCall_jijiii"] = createExportWrapper("dynCall_jijiii");
                var dynCall_jijjiii = Module["dynCall_jijjiii"] = createExportWrapper("dynCall_jijjiii");
                var dynCall_jijii = Module["dynCall_jijii"] = createExportWrapper("dynCall_jijii");
                var dynCall_jijiiiii = Module["dynCall_jijiiiii"] = createExportWrapper("dynCall_jijiiiii");
                var dynCall_jijj = Module["dynCall_jijj"] = createExportWrapper("dynCall_jijj");
                var dynCall_jiii = Module["dynCall_jiii"] = createExportWrapper("dynCall_jiii");
                var dynCall_jijiiii = Module["dynCall_jijiiii"] = createExportWrapper("dynCall_jijiiii");
                var dynCall_jii = Module["dynCall_jii"] = createExportWrapper("dynCall_jii");
                var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");
                var dynCall_viji = Module["dynCall_viji"] = createExportWrapper("dynCall_viji");
                var dynCall_iijijjji = Module["dynCall_iijijjji"] = createExportWrapper("dynCall_iijijjji");
                var dynCall_iiiji = Module["dynCall_iiiji"] = createExportWrapper("dynCall_iiiji");
                var dynCall_iiji = Module["dynCall_iiji"] = createExportWrapper("dynCall_iiji");
                var dynCall_iiiij = Module["dynCall_iiiij"] = createExportWrapper("dynCall_iiiij");
                var dynCall_jijij = Module["dynCall_jijij"] = createExportWrapper("dynCall_jijij");
                var dynCall_iijijji = Module["dynCall_iijijji"] = createExportWrapper("dynCall_iijijji");
                var dynCall_jiiii = Module["dynCall_jiiii"] = createExportWrapper("dynCall_jiiii");
                var dynCall_jij = Module["dynCall_jij"] = createExportWrapper("dynCall_jij");
                var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");
                unexportedRuntimeFunction("intArrayFromString", false);
                unexportedRuntimeFunction("intArrayToString", false);
                unexportedRuntimeFunction("ccall", false);
                Module["cwrap"] = cwrap;
                unexportedRuntimeFunction("setValue", false);
                unexportedRuntimeFunction("getValue", false);
                unexportedRuntimeFunction("allocate", false);
                unexportedRuntimeFunction("UTF8ArrayToString", false);
                Module["UTF8ToString"] = UTF8ToString;
                unexportedRuntimeFunction("stringToUTF8Array", false);
                Module["stringToUTF8"] = stringToUTF8;
                Module["lengthBytesUTF8"] = lengthBytesUTF8;
                unexportedRuntimeFunction("stackTrace", false);
                unexportedRuntimeFunction("addOnPreRun", false);
                unexportedRuntimeFunction("addOnInit", false);
                unexportedRuntimeFunction("addOnPreMain", false);
                unexportedRuntimeFunction("addOnExit", false);
                unexportedRuntimeFunction("addOnPostRun", false);
                unexportedRuntimeFunction("writeStringToMemory", false);
                unexportedRuntimeFunction("writeArrayToMemory", false);
                unexportedRuntimeFunction("writeAsciiToMemory", false);
                unexportedRuntimeFunction("addRunDependency", true);
                unexportedRuntimeFunction("removeRunDependency", true);
                unexportedRuntimeFunction("FS_createFolder", false);
                unexportedRuntimeFunction("FS_createPath", true);
                unexportedRuntimeFunction("FS_createDataFile", true);
                unexportedRuntimeFunction("FS_createPreloadedFile", true);
                unexportedRuntimeFunction("FS_createLazyFile", true);
                unexportedRuntimeFunction("FS_createLink", false);
                unexportedRuntimeFunction("FS_createDevice", true);
                unexportedRuntimeFunction("FS_unlink", true);
                unexportedRuntimeFunction("getLEB", false);
                unexportedRuntimeFunction("getFunctionTables", false);
                unexportedRuntimeFunction("alignFunctionTables", false);
                unexportedRuntimeFunction("registerFunctions", false);
                unexportedRuntimeFunction("addFunction", false);
                unexportedRuntimeFunction("removeFunction", false);
                unexportedRuntimeFunction("getFuncWrapper", false);
                unexportedRuntimeFunction("prettyPrint", false);
                unexportedRuntimeFunction("dynCall", false);
                unexportedRuntimeFunction("getCompilerSetting", false);
                unexportedRuntimeFunction("print", false);
                unexportedRuntimeFunction("printErr", false);
                unexportedRuntimeFunction("getTempRet0", false);
                unexportedRuntimeFunction("setTempRet0", false);
                unexportedRuntimeFunction("callMain", false);
                unexportedRuntimeFunction("abort", false);
                unexportedRuntimeFunction("keepRuntimeAlive", false);
                unexportedRuntimeFunction("WasmOffsetConverter", false);
                unexportedRuntimeFunction("WasmSourceMap", false);
                unexportedRuntimeFunction("zeroMemory", false);
                unexportedRuntimeFunction("stringToNewUTF8", false);
                unexportedRuntimeFunction("emscripten_realloc_buffer", false);
                unexportedRuntimeFunction("ENV", false);
                unexportedRuntimeFunction("withStackSave", false);
                unexportedRuntimeFunction("ERRNO_CODES", false);
                unexportedRuntimeFunction("ERRNO_MESSAGES", false);
                unexportedRuntimeFunction("setErrNo", false);
                unexportedRuntimeFunction("inetPton4", false);
                unexportedRuntimeFunction("inetNtop4", false);
                unexportedRuntimeFunction("inetPton6", false);
                unexportedRuntimeFunction("inetNtop6", false);
                unexportedRuntimeFunction("readSockaddr", false);
                unexportedRuntimeFunction("writeSockaddr", false);
                unexportedRuntimeFunction("DNS", false);
                unexportedRuntimeFunction("getHostByName", false);
                unexportedRuntimeFunction("Protocols", false);
                unexportedRuntimeFunction("Sockets", false);
                unexportedRuntimeFunction("getRandomDevice", false);
                unexportedRuntimeFunction("traverseStack", false);
                unexportedRuntimeFunction("convertFrameToPC", false);
                unexportedRuntimeFunction("UNWIND_CACHE", false);
                unexportedRuntimeFunction("saveInUnwindCache", false);
                unexportedRuntimeFunction("convertPCtoSourceLocation", false);
                unexportedRuntimeFunction("withBuiltinMalloc", false);
                unexportedRuntimeFunction("readAsmConstArgsArray", false);
                unexportedRuntimeFunction("readAsmConstArgs", false);
                unexportedRuntimeFunction("mainThreadEM_ASM", false);
                unexportedRuntimeFunction("jstoi_q", false);
                unexportedRuntimeFunction("jstoi_s", false);
                unexportedRuntimeFunction("getExecutableName", false);
                unexportedRuntimeFunction("listenOnce", false);
                unexportedRuntimeFunction("autoResumeAudioContext", false);
                unexportedRuntimeFunction("dynCallLegacy", false);
                unexportedRuntimeFunction("getDynCaller", false);
                unexportedRuntimeFunction("dynCall", false);
                unexportedRuntimeFunction("callRuntimeCallbacks", false);
                unexportedRuntimeFunction("wasmTableMirror", false);
                unexportedRuntimeFunction("setWasmTableEntry", false);
                unexportedRuntimeFunction("getWasmTableEntry", false);
                unexportedRuntimeFunction("handleException", false);
                unexportedRuntimeFunction("runtimeKeepalivePush", false);
                unexportedRuntimeFunction("runtimeKeepalivePop", false);
                unexportedRuntimeFunction("callUserCallback", false);
                unexportedRuntimeFunction("maybeExit", false);
                unexportedRuntimeFunction("safeSetTimeout", false);
                unexportedRuntimeFunction("asmjsMangle", false);
                unexportedRuntimeFunction("asyncLoad", false);
                unexportedRuntimeFunction("alignMemory", false);
                unexportedRuntimeFunction("mmapAlloc", false);
                unexportedRuntimeFunction("reallyNegative", false);
                unexportedRuntimeFunction("unSign", false);
                unexportedRuntimeFunction("reSign", false);
                unexportedRuntimeFunction("formatString", false);
                unexportedRuntimeFunction("PATH", false);
                unexportedRuntimeFunction("PATH_FS", false);
                unexportedRuntimeFunction("SYSCALLS", false);
                unexportedRuntimeFunction("getSocketFromFD", false);
                unexportedRuntimeFunction("getSocketAddress", false);
                unexportedRuntimeFunction("JSEvents", false);
                unexportedRuntimeFunction("registerKeyEventCallback", false);
                unexportedRuntimeFunction("specialHTMLTargets", false);
                unexportedRuntimeFunction("maybeCStringToJsString", false);
                unexportedRuntimeFunction("findEventTarget", false);
                unexportedRuntimeFunction("findCanvasEventTarget", false);
                unexportedRuntimeFunction("getBoundingClientRect", false);
                unexportedRuntimeFunction("fillMouseEventData", false);
                unexportedRuntimeFunction("registerMouseEventCallback", false);
                unexportedRuntimeFunction("registerWheelEventCallback", false);
                unexportedRuntimeFunction("registerUiEventCallback", false);
                unexportedRuntimeFunction("registerFocusEventCallback", false);
                unexportedRuntimeFunction("fillDeviceOrientationEventData", false);
                unexportedRuntimeFunction("registerDeviceOrientationEventCallback", false);
                unexportedRuntimeFunction("fillDeviceMotionEventData", false);
                unexportedRuntimeFunction("registerDeviceMotionEventCallback", false);
                unexportedRuntimeFunction("screenOrientation", false);
                unexportedRuntimeFunction("fillOrientationChangeEventData", false);
                unexportedRuntimeFunction("registerOrientationChangeEventCallback", false);
                unexportedRuntimeFunction("fillFullscreenChangeEventData", false);
                unexportedRuntimeFunction("registerFullscreenChangeEventCallback", false);
                unexportedRuntimeFunction("registerRestoreOldStyle", false);
                unexportedRuntimeFunction("hideEverythingExceptGivenElement", false);
                unexportedRuntimeFunction("restoreHiddenElements", false);
                unexportedRuntimeFunction("setLetterbox", false);
                unexportedRuntimeFunction("currentFullscreenStrategy", false);
                unexportedRuntimeFunction("restoreOldWindowedStyle", false);
                unexportedRuntimeFunction("softFullscreenResizeWebGLRenderTarget", false);
                unexportedRuntimeFunction("doRequestFullscreen", false);
                unexportedRuntimeFunction("fillPointerlockChangeEventData", false);
                unexportedRuntimeFunction("registerPointerlockChangeEventCallback", false);
                unexportedRuntimeFunction("registerPointerlockErrorEventCallback", false);
                unexportedRuntimeFunction("requestPointerLock", false);
                unexportedRuntimeFunction("fillVisibilityChangeEventData", false);
                unexportedRuntimeFunction("registerVisibilityChangeEventCallback", false);
                unexportedRuntimeFunction("registerTouchEventCallback", false);
                unexportedRuntimeFunction("fillGamepadEventData", false);
                unexportedRuntimeFunction("registerGamepadEventCallback", false);
                unexportedRuntimeFunction("registerBeforeUnloadEventCallback", false);
                unexportedRuntimeFunction("fillBatteryEventData", false);
                unexportedRuntimeFunction("battery", false);
                unexportedRuntimeFunction("registerBatteryEventCallback", false);
                unexportedRuntimeFunction("setCanvasElementSize", false);
                unexportedRuntimeFunction("getCanvasElementSize", false);
                unexportedRuntimeFunction("demangle", false);
                unexportedRuntimeFunction("demangleAll", false);
                unexportedRuntimeFunction("jsStackTrace", false);
                unexportedRuntimeFunction("stackTrace", false);
                unexportedRuntimeFunction("getEnvStrings", false);
                unexportedRuntimeFunction("checkWasiClock", false);
                unexportedRuntimeFunction("writeI53ToI64", false);
                unexportedRuntimeFunction("writeI53ToI64Clamped", false);
                unexportedRuntimeFunction("writeI53ToI64Signaling", false);
                unexportedRuntimeFunction("writeI53ToU64Clamped", false);
                unexportedRuntimeFunction("writeI53ToU64Signaling", false);
                unexportedRuntimeFunction("readI53FromI64", false);
                unexportedRuntimeFunction("readI53FromU64", false);
                unexportedRuntimeFunction("convertI32PairToI53", false);
                unexportedRuntimeFunction("convertU32PairToI53", false);
                unexportedRuntimeFunction("setImmediateWrapped", false);
                unexportedRuntimeFunction("clearImmediateWrapped", false);
                unexportedRuntimeFunction("polyfillSetImmediate", false);
                unexportedRuntimeFunction("uncaughtExceptionCount", false);
                unexportedRuntimeFunction("exceptionLast", false);
                unexportedRuntimeFunction("exceptionCaught", false);
                unexportedRuntimeFunction("ExceptionInfo", false);
                unexportedRuntimeFunction("CatchInfo", false);
                unexportedRuntimeFunction("exception_addRef", false);
                unexportedRuntimeFunction("exception_decRef", false);
                unexportedRuntimeFunction("Browser", false);
                unexportedRuntimeFunction("funcWrappers", false);
                unexportedRuntimeFunction("getFuncWrapper", false);
                unexportedRuntimeFunction("setMainLoop", false);
                unexportedRuntimeFunction("wget", false);
                unexportedRuntimeFunction("FS", false);
                unexportedRuntimeFunction("MEMFS", false);
                unexportedRuntimeFunction("TTY", false);
                unexportedRuntimeFunction("PIPEFS", false);
                unexportedRuntimeFunction("SOCKFS", false);
                unexportedRuntimeFunction("_setNetworkCallback", false);
                unexportedRuntimeFunction("tempFixedLengthArray", false);
                unexportedRuntimeFunction("miniTempWebGLFloatBuffers", false);
                unexportedRuntimeFunction("heapObjectForWebGLType", false);
                unexportedRuntimeFunction("heapAccessShiftForWebGLHeap", false);
                unexportedRuntimeFunction("GL", false);
                unexportedRuntimeFunction("emscriptenWebGLGet", false);
                unexportedRuntimeFunction("computeUnpackAlignedImageSize", false);
                unexportedRuntimeFunction("emscriptenWebGLGetTexPixelData", false);
                unexportedRuntimeFunction("emscriptenWebGLGetUniform", false);
                unexportedRuntimeFunction("webglGetUniformLocation", false);
                unexportedRuntimeFunction("webglPrepareUniformLocationsBeforeFirstUse", false);
                unexportedRuntimeFunction("webglGetLeftBracePos", false);
                unexportedRuntimeFunction("emscriptenWebGLGetVertexAttrib", false);
                unexportedRuntimeFunction("writeGLArray", false);
                unexportedRuntimeFunction("AL", false);
                unexportedRuntimeFunction("SDL_unicode", false);
                unexportedRuntimeFunction("SDL_ttfContext", false);
                unexportedRuntimeFunction("SDL_audio", false);
                unexportedRuntimeFunction("SDL", false);
                unexportedRuntimeFunction("SDL_gfx", false);
                unexportedRuntimeFunction("GLUT", false);
                unexportedRuntimeFunction("EGL", false);
                unexportedRuntimeFunction("GLFW_Window", false);
                unexportedRuntimeFunction("GLFW", false);
                unexportedRuntimeFunction("GLEW", false);
                unexportedRuntimeFunction("IDBStore", false);
                unexportedRuntimeFunction("runAndAbortIfError", false);
                unexportedRuntimeFunction("warnOnce", false);
                unexportedRuntimeFunction("stackSave", false);
                unexportedRuntimeFunction("stackRestore", false);
                unexportedRuntimeFunction("stackAlloc", false);
                unexportedRuntimeFunction("AsciiToString", false);
                unexportedRuntimeFunction("stringToAscii", false);
                unexportedRuntimeFunction("UTF16ToString", false);
                unexportedRuntimeFunction("stringToUTF16", false);
                unexportedRuntimeFunction("lengthBytesUTF16", false);
                unexportedRuntimeFunction("UTF32ToString", false);
                unexportedRuntimeFunction("stringToUTF32", false);
                unexportedRuntimeFunction("lengthBytesUTF32", false);
                unexportedRuntimeFunction("allocateUTF8", false);
                unexportedRuntimeFunction("allocateUTF8OnStack", false);
                Module["writeStackCookie"] = writeStackCookie;
                Module["checkStackCookie"] = checkStackCookie;
                unexportedRuntimeSymbol("ALLOC_NORMAL", false);
                unexportedRuntimeSymbol("ALLOC_STACK", false);
                var calledRun;
                function ExitStatus(status) {
                  this.name = "ExitStatus";
                  this.message = "Program terminated with exit(" + status + ")";
                  this.status = status;
                }
                var calledMain = false;
                dependenciesFulfilled = function runCaller() {
                  if (!calledRun)
                    run();
                  if (!calledRun)
                    dependenciesFulfilled = runCaller;
                };
                function stackCheckInit() {
                  _emscripten_stack_init();
                  writeStackCookie();
                }
                function run(args) {
                  args = args || arguments_;
                  if (runDependencies > 0) {
                    return;
                  }
                  stackCheckInit();
                  preRun();
                  if (runDependencies > 0) {
                    return;
                  }
                  function doRun() {
                    if (calledRun)
                      return;
                    calledRun = true;
                    Module["calledRun"] = true;
                    if (ABORT)
                      return;
                    initRuntime();
                    readyPromiseResolve(Module);
                    if (Module["onRuntimeInitialized"])
                      Module["onRuntimeInitialized"]();
                    assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
                    postRun();
                  }
                  if (Module["setStatus"]) {
                    Module["setStatus"]("Running...");
                    setTimeout(function() {
                      setTimeout(function() {
                        Module["setStatus"]("");
                      }, 1);
                      doRun();
                    }, 1);
                  } else {
                    doRun();
                  }
                  checkStackCookie();
                }
                Module["run"] = run;
                function exit(status, implicit) {
                  EXITSTATUS = status;
                  if (keepRuntimeAlive()) {
                    if (!implicit) {
                      var msg = "program exited (with status: " + status + "), but keepRuntimeAlive() is set (counter=" + runtimeKeepaliveCounter + ") due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)";
                      readyPromiseReject(msg);
                      err(msg);
                    }
                  } else {
                    exitRuntime();
                  }
                  procExit(status);
                }
                function procExit(code) {
                  EXITSTATUS = code;
                  if (!keepRuntimeAlive()) {
                    if (Module["onExit"])
                      Module["onExit"](code);
                    ABORT = true;
                  }
                  quit_(code, new ExitStatus(code));
                }
                if (Module["preInit"]) {
                  if (typeof Module["preInit"] == "function")
                    Module["preInit"] = [Module["preInit"]];
                  while (Module["preInit"].length > 0) {
                    Module["preInit"].pop()();
                  }
                }
                run();
                return QuickJSRaw2.ready;
              };
            })();
            if (typeof exports3 === "object" && typeof module3 === "object")
              module3.exports = QuickJSRaw;
            else if (typeof define2 === "function" && define2["amd"])
              define2([], function() {
                return QuickJSRaw;
              });
            else if (typeof exports3 === "object")
              exports3["QuickJSRaw"] = QuickJSRaw;
          }).call(this);
        }).call(this, require2("_process"), require2("buffer").Buffer, "/node_modules/quickjs-emscripten/dist/generated/emscripten-module.WASM_DEBUG_SYNC.js", arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/quickjs-emscripten/dist/generated");
      }, { "_process": 151, "buffer": 63, "crypto": 72, "fs": 62, "path": 144 }], 167: [function(require2, module3, exports3) {
        (function(process, Buffer2, __filename, __argument0, __argument1, __argument2, __argument3, __dirname) {
          (function() {
            "use strict";
            var QuickJSRaw = (() => {
              var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
              if (typeof __filename !== "undefined")
                _scriptDir = _scriptDir || __filename;
              return function(QuickJSRaw2) {
                QuickJSRaw2 = QuickJSRaw2 || {};
                var a;
                a || (a = typeof QuickJSRaw2 !== "undefined" ? QuickJSRaw2 : {});
                var aa, k;
                a.ready = new Promise(function(b, c) {
                  aa = b;
                  k = c;
                });
                var ba = Object.assign({}, a), m = "./this.program", n = (b, c) => {
                  throw c;
                }, ca = typeof window == "object", t = typeof importScripts == "function", u = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", v = "", w, x, y, fs, z, A;
                if (u)
                  v = t ? require2("path").dirname(v) + "/" : __dirname + "/", A = () => {
                    z || (fs = require2("fs"), z = require2("path"));
                  }, w = function(b, c) {
                    var d = D(b);
                    if (d)
                      return c ? d : d.toString();
                    A();
                    b = z.normalize(b);
                    return fs.readFileSync(b, c ? void 0 : "utf8");
                  }, y = (b) => {
                    b = w(b, true);
                    b.buffer || (b = new Uint8Array(b));
                    return b;
                  }, x = (b, c, d) => {
                    var e = D(b);
                    e && c(e);
                    A();
                    b = z.normalize(b);
                    fs.readFile(b, function(f, g) {
                      f ? d(f) : c(g.buffer);
                    });
                  }, 1 < process.argv.length && (m = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("unhandledRejection", function(b) {
                    throw b;
                  }), n = (b, c) => {
                    if (noExitRuntime || 0 < E)
                      throw process.exitCode = b, c;
                    F("exiting due to exception: " + c);
                    process.exit(b);
                  }, a.inspect = function() {
                    return "[Emscripten Module object]";
                  };
                else if (ca || t)
                  t ? v = self.location.href : typeof document != "undefined" && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), v.indexOf("blob:") !== 0 ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", w = (b) => {
                    try {
                      var c = new XMLHttpRequest();
                      c.open("GET", b, false);
                      c.send(null);
                      return c.responseText;
                    } catch (f) {
                      if (b = D(b)) {
                        c = [];
                        for (var d = 0; d < b.length; d++) {
                          var e = b[d];
                          255 < e && (da && G("Character code " + e + " (" + String.fromCharCode(e) + ")  at offset " + d + " not in 0x00-0xFF."), e &= 255);
                          c.push(String.fromCharCode(e));
                        }
                        return c.join("");
                      }
                      throw f;
                    }
                  }, t && (y = (b) => {
                    try {
                      var c = new XMLHttpRequest();
                      c.open("GET", b, false);
                      c.responseType = "arraybuffer";
                      c.send(null);
                      return new Uint8Array(c.response);
                    } catch (d) {
                      if (b = D(b))
                        return b;
                      throw d;
                    }
                  }), x = (b, c, d) => {
                    var e = new XMLHttpRequest();
                    e.open("GET", b, true);
                    e.responseType = "arraybuffer";
                    e.onload = () => {
                      if (e.status == 200 || e.status == 0 && e.response)
                        c(e.response);
                      else {
                        var f = D(b);
                        f ? c(f.buffer) : d();
                      }
                    };
                    e.onerror = d;
                    e.send(null);
                  };
                var ea = a.print || console.log.bind(console), F = a.printErr || console.warn.bind(console);
                Object.assign(a, ba);
                ba = null;
                a.thisProgram && (m = a.thisProgram);
                a.quit && (n = a.quit);
                var H;
                a.wasmBinary && (H = a.wasmBinary);
                var noExitRuntime = a.noExitRuntime || true;
                typeof WebAssembly != "object" && G("no native wasm support detected");
                var I, J = false;
                function fa(b, c, d, e, f) {
                  function g(p) {
                    --E;
                    q !== 0 && ha(q);
                    return c === "string" ? K(p) : c === "boolean" ? !!p : p;
                  }
                  var h = { string: function(p) {
                    var B = 0;
                    if (p !== null && p !== void 0 && p !== 0) {
                      var ma = (p.length << 2) + 1;
                      B = L(ma);
                      ia(p, B, ma);
                    }
                    return B;
                  }, array: function(p) {
                    var B = L(p.length);
                    M.set(p, B);
                    return B;
                  } };
                  b = a["_" + b];
                  var l = [], q = 0;
                  if (e)
                    for (var r = 0; r < e.length; r++) {
                      var C = h[d[r]];
                      C ? (q === 0 && (q = ja()), l[r] = C(e[r])) : l[r] = e[r];
                    }
                  d = N;
                  e = b.apply(null, l);
                  E += 1;
                  f = f && f.async;
                  if (N != d)
                    return ka().then(g);
                  e = g(e);
                  return f ? Promise.resolve(e) : e;
                }
                var la = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
                function na(b, c, d) {
                  var e = c + d;
                  for (d = c; b[d] && !(d >= e); )
                    ++d;
                  if (16 < d - c && b.subarray && la)
                    return la.decode(b.subarray(c, d));
                  for (e = ""; c < d; ) {
                    var f = b[c++];
                    if (f & 128) {
                      var g = b[c++] & 63;
                      if ((f & 224) == 192)
                        e += String.fromCharCode((f & 31) << 6 | g);
                      else {
                        var h = b[c++] & 63;
                        f = (f & 240) == 224 ? (f & 15) << 12 | g << 6 | h : (f & 7) << 18 | g << 12 | h << 6 | b[c++] & 63;
                        65536 > f ? e += String.fromCharCode(f) : (f -= 65536, e += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
                      }
                    } else
                      e += String.fromCharCode(f);
                  }
                  return e;
                }
                function K(b, c) {
                  return b ? na(O, b, c) : "";
                }
                function oa(b, c, d, e) {
                  if (!(0 < e))
                    return 0;
                  var f = d;
                  e = d + e - 1;
                  for (var g = 0; g < b.length; ++g) {
                    var h = b.charCodeAt(g);
                    if (55296 <= h && 57343 >= h) {
                      var l = b.charCodeAt(++g);
                      h = 65536 + ((h & 1023) << 10) | l & 1023;
                    }
                    if (127 >= h) {
                      if (d >= e)
                        break;
                      c[d++] = h;
                    } else {
                      if (2047 >= h) {
                        if (d + 1 >= e)
                          break;
                        c[d++] = 192 | h >> 6;
                      } else {
                        if (65535 >= h) {
                          if (d + 2 >= e)
                            break;
                          c[d++] = 224 | h >> 12;
                        } else {
                          if (d + 3 >= e)
                            break;
                          c[d++] = 240 | h >> 18;
                          c[d++] = 128 | h >> 12 & 63;
                        }
                        c[d++] = 128 | h >> 6 & 63;
                      }
                      c[d++] = 128 | h & 63;
                    }
                  }
                  c[d] = 0;
                  return d - f;
                }
                function ia(b, c, d) {
                  return oa(b, O, c, d);
                }
                function pa(b) {
                  for (var c = 0, d = 0; d < b.length; ++d) {
                    var e = b.charCodeAt(d);
                    55296 <= e && 57343 >= e && (e = 65536 + ((e & 1023) << 10) | b.charCodeAt(++d) & 1023);
                    127 >= e ? ++c : c = 2047 >= e ? c + 2 : 65535 >= e ? c + 3 : c + 4;
                  }
                  return c;
                }
                function qa(b) {
                  var c = pa(b) + 1, d = P(c);
                  d && oa(b, M, d, c);
                  return d;
                }
                var ra, M, O, Q;
                function sa() {
                  var b = I.buffer;
                  ra = b;
                  a.HEAP8 = M = new Int8Array(b);
                  a.HEAP16 = new Int16Array(b);
                  a.HEAP32 = Q = new Int32Array(b);
                  a.HEAPU8 = O = new Uint8Array(b);
                  a.HEAPU16 = new Uint16Array(b);
                  a.HEAPU32 = new Uint32Array(b);
                  a.HEAPF32 = new Float32Array(b);
                  a.HEAPF64 = new Float64Array(b);
                }
                var ta = [], ua = [], va = [], E = 0;
                function wa() {
                  var b = a.preRun.shift();
                  ta.unshift(b);
                }
                var R = 0, S = null, T = null;
                a.preloadedImages = {};
                a.preloadedAudios = {};
                function G(b) {
                  if (a.onAbort)
                    a.onAbort(b);
                  b = "Aborted(" + b + ")";
                  F(b);
                  J = true;
                  b = new WebAssembly.RuntimeError(b + ". Build with -s ASSERTIONS=1 for more info.");
                  k(b);
                  throw b;
                }
                var U = "data:application/octet-stream;base64,", V;
                V = "data:application/octet-stream;base64,";
                if (!V.startsWith(U)) {
                  var xa = V;
                  V = a.locateFile ? a.locateFile(xa, v) : v + xa;
                }
                function ya() {
                  var b = V;
                  try {
                    if (b == V && H)
                      return new Uint8Array(H);
                    var c = D(b);
                    if (c)
                      return c;
                    if (y)
                      return y(b);
                    throw "both async and sync fetching of the wasm failed";
                  } catch (d) {
                    G(d);
                  }
                }
                function za() {
                  if (!H && (ca || t)) {
                    if (typeof fetch == "function" && !V.startsWith("file://"))
                      return fetch(V, { credentials: "same-origin" }).then(function(b) {
                        if (!b.ok)
                          throw "failed to load wasm binary file at '" + V + "'";
                        return b.arrayBuffer();
                      }).catch(function() {
                        return ya();
                      });
                    if (x)
                      return new Promise(function(b, c) {
                        x(V, function(d) {
                          b(new Uint8Array(d));
                        }, c);
                      });
                  }
                  return Promise.resolve().then(function() {
                    return ya();
                  });
                }
                function Aa(b) {
                  for (; 0 < b.length; ) {
                    var c = b.shift();
                    if (typeof c == "function")
                      c(a);
                    else {
                      var d = c.va;
                      typeof d != "number" && d(c.wa === void 0 ? null : c.wa);
                    }
                  }
                }
                function Ba(b, c, d) {
                  function e(q) {
                    return (q = q.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? q[1] : "GMT";
                  }
                  var f = new Date().getFullYear(), g = new Date(f, 0, 1), h = new Date(f, 6, 1);
                  f = g.getTimezoneOffset();
                  var l = h.getTimezoneOffset();
                  Q[b >> 2] = 60 * Math.max(f, l);
                  Q[c >> 2] = Number(f != l);
                  b = e(g);
                  c = e(h);
                  b = qa(b);
                  c = qa(c);
                  l < f ? (Q[d >> 2] = b, Q[d + 4 >> 2] = c) : (Q[d >> 2] = c, Q[d + 4 >> 2] = b);
                }
                function Ca(b, c, d) {
                  Ca.xa || (Ca.xa = true, Ba(b, c, d));
                }
                var Da = {};
                function Ea() {
                  if (!Fa) {
                    var b = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: m || "./this.program" }, c;
                    for (c in Da)
                      Da[c] === void 0 ? delete b[c] : b[c] = Da[c];
                    var d = [];
                    for (c in b)
                      d.push(c + "=" + b[c]);
                    Fa = d;
                  }
                  return Fa;
                }
                var Fa, Ga = [null, [], []];
                function W(b) {
                  try {
                    b();
                  } catch (c) {
                    G(c);
                  }
                }
                var X = 0, N = null, Ha = 0, Y = [], Ia = {}, Ja = {}, Ka = 0, La = null, Ma = [];
                function Na(b) {
                  var c = {}, d;
                  for (d in b)
                    (function(e) {
                      var f = b[e];
                      c[e] = typeof f == "function" ? function() {
                        Y.push(e);
                        try {
                          return f.apply(null, arguments);
                        } finally {
                          J || (Y.pop() === e || G(void 0), N && X === 1 && Y.length === 0 && (X = 0, W(a._asyncify_stop_unwind), typeof Fibers != "undefined" && Fibers.ya()));
                        }
                      } : f;
                    })(d);
                  return c;
                }
                function ka() {
                  return new Promise((b, c) => {
                    La = { resolve: b, reject: c };
                  });
                }
                function Oa() {
                  var b = P(4108), c = b + 12;
                  Q[b >> 2] = c;
                  Q[b + 4 >> 2] = c + 4096;
                  c = Y[0];
                  var d = Ia[c];
                  d === void 0 && (d = Ka++, Ia[c] = d, Ja[d] = c);
                  Q[b + 8 >> 2] = d;
                  return b;
                }
                function Pa(b) {
                  if (!J) {
                    if (X === 0) {
                      var c = false, d = false;
                      b((e) => {
                        if (!J && (Ha = e || 0, c = true, d)) {
                          X = 2;
                          W(() => a._asyncify_start_rewind(N));
                          typeof Browser != "undefined" && Browser.na.va && Browser.na.resume();
                          e = false;
                          try {
                            var f = (0, a.asm[Ja[Q[N + 8 >> 2]]])();
                          } catch (l) {
                            f = l, e = true;
                          }
                          var g = false;
                          if (!N) {
                            var h = La;
                            h && (La = null, (e ? h.reject : h.resolve)(f), g = true);
                          }
                          if (e && !g)
                            throw f;
                        }
                      });
                      d = true;
                      c || (X = 1, N = Oa(), W(() => a._asyncify_start_unwind(N)), typeof Browser != "undefined" && Browser.na.va && Browser.na.pause());
                    } else
                      X === 2 ? (X = 0, W(a._asyncify_stop_rewind), Qa(N), N = null, Ma.forEach((e) => {
                        if (!J)
                          try {
                            e();
                          } catch (f) {
                            f != "unwind" && n(1, f);
                          }
                      })) : G("invalid state: " + X);
                    return Ha;
                  }
                }
                var da = false, Ra = typeof atob == "function" ? atob : function(b) {
                  var c = "", d = 0;
                  b = b.replace(/[^A-Za-z0-9\+\/=]/g, "");
                  do {
                    var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    var f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    var g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    var h = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    e = e << 2 | f >> 4;
                    f = (f & 15) << 4 | g >> 2;
                    var l = (g & 3) << 6 | h;
                    c += String.fromCharCode(e);
                    g !== 64 && (c += String.fromCharCode(f));
                    h !== 64 && (c += String.fromCharCode(l));
                  } while (d < b.length);
                  return c;
                };
                function D(b) {
                  if (b.startsWith(U)) {
                    b = b.slice(U.length);
                    if (typeof u == "boolean" && u) {
                      var c = Buffer2.from(b, "base64");
                      c = new Uint8Array(c.buffer, c.byteOffset, c.byteLength);
                    } else
                      try {
                        var d = Ra(b), e = new Uint8Array(d.length);
                        for (b = 0; b < d.length; ++b)
                          e[b] = d.charCodeAt(b);
                        c = e;
                      } catch (f) {
                        throw Error("Converting base64 string to bytes failed.");
                      }
                    return c;
                  }
                }
                var Sa = {
                  a: function(b, c, d, e) {
                    G("Assertion failed: " + K(b) + ", at: " + [c ? K(c) : "unknown filename", d, e ? K(e) : "unknown function"]);
                  },
                  k: function(b, c) {
                    b = new Date(1e3 * Q[b >> 2]);
                    Q[c >> 2] = b.getSeconds();
                    Q[c + 4 >> 2] = b.getMinutes();
                    Q[c + 8 >> 2] = b.getHours();
                    Q[c + 12 >> 2] = b.getDate();
                    Q[c + 16 >> 2] = b.getMonth();
                    Q[c + 20 >> 2] = b.getFullYear() - 1900;
                    Q[c + 24 >> 2] = b.getDay();
                    var d = new Date(b.getFullYear(), 0, 1);
                    Q[c + 28 >> 2] = (b.getTime() - d.getTime()) / 864e5 | 0;
                    Q[c + 36 >> 2] = -(60 * b.getTimezoneOffset());
                    var e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset();
                    d = d.getTimezoneOffset();
                    Q[c + 32 >> 2] = (e != d && b.getTimezoneOffset() == Math.min(d, e)) | 0;
                  },
                  l: Ca,
                  b: function() {
                    G("");
                  },
                  d: function(b) {
                    var c = O.length;
                    b >>>= 0;
                    if (2147483648 < b)
                      return false;
                    for (var d = 1; 4 >= d; d *= 2) {
                      var e = c * (1 + 0.2 / d);
                      e = Math.min(e, b + 100663296);
                      var f = Math;
                      e = Math.max(b, e);
                      f = f.min.call(f, 2147483648, e + (65536 - e % 65536) % 65536);
                      a: {
                        try {
                          I.grow(f - ra.byteLength + 65535 >>> 16);
                          sa();
                          var g = 1;
                          break a;
                        } catch (h) {
                        }
                        g = void 0;
                      }
                      if (g)
                        return true;
                    }
                    return false;
                  },
                  f: function(b, c) {
                    var d = 0;
                    Ea().forEach(function(e, f) {
                      var g = c + d;
                      f = Q[b + 4 * f >> 2] = g;
                      for (g = 0; g < e.length; ++g)
                        M[f++ >> 0] = e.charCodeAt(g);
                      M[f >> 0] = 0;
                      d += e.length + 1;
                    });
                    return 0;
                  },
                  g: function(b, c) {
                    var d = Ea();
                    Q[b >> 2] = d.length;
                    var e = 0;
                    d.forEach(function(f) {
                      e += f.length + 1;
                    });
                    Q[c >> 2] = e;
                    return 0;
                  },
                  e: function() {
                    return 0;
                  },
                  j: function() {
                  },
                  m: function(b, c, d, e) {
                    for (var f = 0, g = 0; g < d; g++) {
                      var h = Q[c >> 2], l = Q[c + 4 >> 2];
                      c += 8;
                      for (var q = 0; q < l; q++) {
                        var r = O[h + q], C = Ga[b];
                        r === 0 || r === 10 ? ((b === 1 ? ea : F)(na(C, 0)), C.length = 0) : C.push(r);
                      }
                      f += l;
                    }
                    Q[e >> 2] = f;
                    return 0;
                  },
                  c: function(b) {
                    var c = Date.now();
                    Q[b >> 2] = c / 1e3 | 0;
                    Q[b + 4 >> 2] = c % 1e3 * 1e3 | 0;
                    return 0;
                  },
                  o: function(b, c, d, e, f) {
                    return a.callbacks.callFunction({ handleSleep: Pa }, b, c, d, e, f);
                  },
                  n: function(b) {
                    return a.callbacks.shouldInterrupt(void 0, b);
                  },
                  i: function(b, c, d) {
                    const e = { handleSleep: Pa };
                    d = K(d);
                    return a.callbacks.loadModuleSource(e, b, c, d);
                  },
                  h: function(b, c, d, e) {
                    const f = { handleSleep: Pa };
                    d = K(d);
                    e = K(e);
                    return a.callbacks.normalizeModule(f, b, c, d, e);
                  }
                };
                (function() {
                  function b(g) {
                    g = g.exports;
                    g = Na(g);
                    a.asm = g;
                    I = a.asm.p;
                    sa();
                    ua.unshift(a.asm.q);
                    R--;
                    a.monitorRunDependencies && a.monitorRunDependencies(R);
                    R == 0 && (S !== null && (clearInterval(S), S = null), T && (g = T, T = null, g()));
                  }
                  function c(g) {
                    b(g.instance);
                  }
                  function d(g) {
                    return za().then(function(h) {
                      return WebAssembly.instantiate(h, e);
                    }).then(function(h) {
                      return h;
                    }).then(g, function(h) {
                      F("failed to asynchronously prepare wasm: " + h);
                      G(h);
                    });
                  }
                  var e = { a: Sa };
                  R++;
                  a.monitorRunDependencies && a.monitorRunDependencies(R);
                  if (a.instantiateWasm)
                    try {
                      var f = a.instantiateWasm(e, b);
                      return f = Na(f);
                    } catch (g) {
                      return F("Module.instantiateWasm callback failed with error: " + g), false;
                    }
                  (function() {
                    return H || typeof WebAssembly.instantiateStreaming != "function" || V.startsWith(U) || V.startsWith("file://") || typeof fetch != "function" ? d(c) : fetch(V, { credentials: "same-origin" }).then(function(g) {
                      return WebAssembly.instantiateStreaming(g, e).then(c, function(h) {
                        F("wasm streaming compile failed: " + h);
                        F("falling back to ArrayBuffer instantiation");
                        return d(c);
                      });
                    });
                  })().catch(k);
                  return {};
                })();
                a.___wasm_call_ctors = function() {
                  return (a.___wasm_call_ctors = a.asm.q).apply(null, arguments);
                };
                var P = a._malloc = function() {
                  return (P = a._malloc = a.asm.r).apply(null, arguments);
                };
                a._QTS_Throw = function() {
                  return (a._QTS_Throw = a.asm.s).apply(null, arguments);
                };
                a._QTS_NewError = function() {
                  return (a._QTS_NewError = a.asm.t).apply(null, arguments);
                };
                a._QTS_RuntimeSetMemoryLimit = function() {
                  return (a._QTS_RuntimeSetMemoryLimit = a.asm.u).apply(null, arguments);
                };
                a._QTS_RuntimeComputeMemoryUsage = function() {
                  return (a._QTS_RuntimeComputeMemoryUsage = a.asm.v).apply(null, arguments);
                };
                a._QTS_RuntimeDumpMemoryUsage = function() {
                  return (a._QTS_RuntimeDumpMemoryUsage = a.asm.w).apply(null, arguments);
                };
                a._QTS_RecoverableLeakCheck = function() {
                  return (a._QTS_RecoverableLeakCheck = a.asm.x).apply(null, arguments);
                };
                a._QTS_BuildIsSanitizeLeak = function() {
                  return (a._QTS_BuildIsSanitizeLeak = a.asm.y).apply(null, arguments);
                };
                a._QTS_GetUndefined = function() {
                  return (a._QTS_GetUndefined = a.asm.z).apply(null, arguments);
                };
                a._QTS_GetNull = function() {
                  return (a._QTS_GetNull = a.asm.A).apply(null, arguments);
                };
                a._QTS_GetFalse = function() {
                  return (a._QTS_GetFalse = a.asm.B).apply(null, arguments);
                };
                a._QTS_GetTrue = function() {
                  return (a._QTS_GetTrue = a.asm.C).apply(null, arguments);
                };
                a._QTS_NewRuntime = function() {
                  return (a._QTS_NewRuntime = a.asm.D).apply(null, arguments);
                };
                a._QTS_FreeRuntime = function() {
                  return (a._QTS_FreeRuntime = a.asm.E).apply(null, arguments);
                };
                a._QTS_NewContext = function() {
                  return (a._QTS_NewContext = a.asm.F).apply(null, arguments);
                };
                a._QTS_FreeContext = function() {
                  return (a._QTS_FreeContext = a.asm.G).apply(null, arguments);
                };
                a._QTS_FreeValuePointer = function() {
                  return (a._QTS_FreeValuePointer = a.asm.H).apply(null, arguments);
                };
                var Qa = a._free = function() {
                  return (Qa = a._free = a.asm.I).apply(null, arguments);
                };
                a._QTS_FreeValuePointerRuntime = function() {
                  return (a._QTS_FreeValuePointerRuntime = a.asm.J).apply(null, arguments);
                };
                a._QTS_FreeVoidPointer = function() {
                  return (a._QTS_FreeVoidPointer = a.asm.K).apply(null, arguments);
                };
                a._QTS_FreeCString = function() {
                  return (a._QTS_FreeCString = a.asm.L).apply(null, arguments);
                };
                a._QTS_DupValuePointer = function() {
                  return (a._QTS_DupValuePointer = a.asm.M).apply(null, arguments);
                };
                a._QTS_NewObject = function() {
                  return (a._QTS_NewObject = a.asm.N).apply(null, arguments);
                };
                a._QTS_NewObjectProto = function() {
                  return (a._QTS_NewObjectProto = a.asm.O).apply(null, arguments);
                };
                a._QTS_NewArray = function() {
                  return (a._QTS_NewArray = a.asm.P).apply(null, arguments);
                };
                a._QTS_NewFloat64 = function() {
                  return (a._QTS_NewFloat64 = a.asm.Q).apply(null, arguments);
                };
                a._QTS_GetFloat64 = function() {
                  return (a._QTS_GetFloat64 = a.asm.R).apply(null, arguments);
                };
                a._QTS_NewString = function() {
                  return (a._QTS_NewString = a.asm.S).apply(null, arguments);
                };
                a._QTS_GetString = function() {
                  return (a._QTS_GetString = a.asm.T).apply(null, arguments);
                };
                a._QTS_IsJobPending = function() {
                  return (a._QTS_IsJobPending = a.asm.U).apply(null, arguments);
                };
                a._QTS_ExecutePendingJob = function() {
                  return (a._QTS_ExecutePendingJob = a.asm.V).apply(null, arguments);
                };
                a._QTS_GetProp = function() {
                  return (a._QTS_GetProp = a.asm.W).apply(null, arguments);
                };
                a._QTS_SetProp = function() {
                  return (a._QTS_SetProp = a.asm.X).apply(null, arguments);
                };
                a._QTS_DefineProp = function() {
                  return (a._QTS_DefineProp = a.asm.Y).apply(null, arguments);
                };
                a._QTS_Call = function() {
                  return (a._QTS_Call = a.asm.Z).apply(null, arguments);
                };
                a._QTS_ResolveException = function() {
                  return (a._QTS_ResolveException = a.asm._).apply(null, arguments);
                };
                a._QTS_Dump = function() {
                  return (a._QTS_Dump = a.asm.$).apply(null, arguments);
                };
                a._QTS_Eval = function() {
                  return (a._QTS_Eval = a.asm.aa).apply(null, arguments);
                };
                a._QTS_Typeof = function() {
                  return (a._QTS_Typeof = a.asm.ba).apply(null, arguments);
                };
                a._QTS_GetGlobalObject = function() {
                  return (a._QTS_GetGlobalObject = a.asm.ca).apply(null, arguments);
                };
                a._QTS_NewPromiseCapability = function() {
                  return (a._QTS_NewPromiseCapability = a.asm.da).apply(null, arguments);
                };
                a._QTS_TestStringArg = function() {
                  return (a._QTS_TestStringArg = a.asm.ea).apply(null, arguments);
                };
                a._QTS_BuildIsDebug = function() {
                  return (a._QTS_BuildIsDebug = a.asm.fa).apply(null, arguments);
                };
                a._QTS_BuildIsAsyncify = function() {
                  return (a._QTS_BuildIsAsyncify = a.asm.ga).apply(null, arguments);
                };
                a._QTS_NewFunction = function() {
                  return (a._QTS_NewFunction = a.asm.ha).apply(null, arguments);
                };
                a._QTS_ArgvGetJSValueConstPointer = function() {
                  return (a._QTS_ArgvGetJSValueConstPointer = a.asm.ia).apply(null, arguments);
                };
                a._QTS_RuntimeEnableInterruptHandler = function() {
                  return (a._QTS_RuntimeEnableInterruptHandler = a.asm.ja).apply(null, arguments);
                };
                a._QTS_RuntimeDisableInterruptHandler = function() {
                  return (a._QTS_RuntimeDisableInterruptHandler = a.asm.ka).apply(null, arguments);
                };
                a._QTS_RuntimeEnableModuleLoader = function() {
                  return (a._QTS_RuntimeEnableModuleLoader = a.asm.la).apply(null, arguments);
                };
                a._QTS_RuntimeDisableModuleLoader = function() {
                  return (a._QTS_RuntimeDisableModuleLoader = a.asm.ma).apply(null, arguments);
                };
                var ja = a.stackSave = function() {
                  return (ja = a.stackSave = a.asm.oa).apply(null, arguments);
                }, ha = a.stackRestore = function() {
                  return (ha = a.stackRestore = a.asm.pa).apply(null, arguments);
                }, L = a.stackAlloc = function() {
                  return (L = a.stackAlloc = a.asm.qa).apply(null, arguments);
                };
                a._asyncify_start_unwind = function() {
                  return (a._asyncify_start_unwind = a.asm.ra).apply(null, arguments);
                };
                a._asyncify_stop_unwind = function() {
                  return (a._asyncify_stop_unwind = a.asm.sa).apply(null, arguments);
                };
                a._asyncify_start_rewind = function() {
                  return (a._asyncify_start_rewind = a.asm.ta).apply(null, arguments);
                };
                a._asyncify_stop_rewind = function() {
                  return (a._asyncify_stop_rewind = a.asm.ua).apply(null, arguments);
                };
                a.cwrap = function(b, c, d, e) {
                  d = d || [];
                  var f = d.every(function(g) {
                    return g === "number";
                  });
                  return c !== "string" && f && !e ? a["_" + b] : function() {
                    return fa(b, c, d, arguments, e);
                  };
                };
                a.UTF8ToString = K;
                a.stringToUTF8 = ia;
                a.lengthBytesUTF8 = pa;
                var Z;
                T = function Ta() {
                  Z || Ua();
                  Z || (T = Ta);
                };
                function Ua() {
                  function b() {
                    if (!Z && (Z = true, a.calledRun = true, !J)) {
                      Aa(ua);
                      aa(a);
                      if (a.onRuntimeInitialized)
                        a.onRuntimeInitialized();
                      if (a.postRun)
                        for (typeof a.postRun == "function" && (a.postRun = [a.postRun]); a.postRun.length; ) {
                          var c = a.postRun.shift();
                          va.unshift(c);
                        }
                      Aa(va);
                    }
                  }
                  if (!(0 < R)) {
                    if (a.preRun)
                      for (typeof a.preRun == "function" && (a.preRun = [a.preRun]); a.preRun.length; )
                        wa();
                    Aa(ta);
                    0 < R || (a.setStatus ? (a.setStatus("Running..."), setTimeout(function() {
                      setTimeout(function() {
                        a.setStatus("");
                      }, 1);
                      b();
                    }, 1)) : b());
                  }
                }
                a.run = Ua;
                if (a.preInit)
                  for (typeof a.preInit == "function" && (a.preInit = [a.preInit]); 0 < a.preInit.length; )
                    a.preInit.pop()();
                Ua();
                return QuickJSRaw2.ready;
              };
            })();
            if (typeof exports3 === "object" && typeof module3 === "object")
              module3.exports = QuickJSRaw;
            else if (typeof define2 === "function" && define2["amd"])
              define2([], function() {
                return QuickJSRaw;
              });
            else if (typeof exports3 === "object")
              exports3["QuickJSRaw"] = QuickJSRaw;
          }).call(this);
        }).call(this, require2("_process"), require2("buffer").Buffer, "/node_modules/quickjs-emscripten/dist/generated/emscripten-module.WASM_RELEASE_ASYNCIFY.js", arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/quickjs-emscripten/dist/generated");
      }, { "_process": 151, "buffer": 63, "fs": 62, "path": 144 }], 168: [function(require2, module3, exports3) {
        (function(process, Buffer2, __filename, __argument0, __argument1, __argument2, __argument3, __dirname) {
          (function() {
            "use strict";
            var QuickJSRaw = (() => {
              var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
              if (typeof __filename !== "undefined")
                _scriptDir = _scriptDir || __filename;
              return function(QuickJSRaw2) {
                QuickJSRaw2 = QuickJSRaw2 || {};
                var a;
                a || (a = typeof QuickJSRaw2 !== "undefined" ? QuickJSRaw2 : {});
                var k, n;
                a.ready = new Promise(function(b, c) {
                  k = b;
                  n = c;
                });
                var p = Object.assign({}, a), t = "./this.program", u = typeof window == "object", v = typeof importScripts == "function", w = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", x = "", y, z, A, fs, B, C;
                if (w)
                  x = v ? require2("path").dirname(x) + "/" : __dirname + "/", C = () => {
                    B || (fs = require2("fs"), B = require2("path"));
                  }, y = function(b, c) {
                    var d = D(b);
                    if (d)
                      return c ? d : d.toString();
                    C();
                    b = B.normalize(b);
                    return fs.readFileSync(b, c ? void 0 : "utf8");
                  }, A = (b) => {
                    b = y(b, true);
                    b.buffer || (b = new Uint8Array(b));
                    return b;
                  }, z = (b, c, d) => {
                    var e = D(b);
                    e && c(e);
                    C();
                    b = B.normalize(b);
                    fs.readFile(b, function(f, g) {
                      f ? d(f) : c(g.buffer);
                    });
                  }, 1 < process.argv.length && (t = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("unhandledRejection", function(b) {
                    throw b;
                  }), a.inspect = function() {
                    return "[Emscripten Module object]";
                  };
                else if (u || v)
                  v ? x = self.location.href : typeof document != "undefined" && document.currentScript && (x = document.currentScript.src), _scriptDir && (x = _scriptDir), x.indexOf("blob:") !== 0 ? x = x.substr(0, x.replace(/[?#].*/, "").lastIndexOf("/") + 1) : x = "", y = (b) => {
                    try {
                      var c = new XMLHttpRequest();
                      c.open("GET", b, false);
                      c.send(null);
                      return c.responseText;
                    } catch (f) {
                      if (b = D(b)) {
                        c = [];
                        for (var d = 0; d < b.length; d++) {
                          var e = b[d];
                          255 < e && (ba && E("Character code " + e + " (" + String.fromCharCode(e) + ")  at offset " + d + " not in 0x00-0xFF."), e &= 255);
                          c.push(String.fromCharCode(e));
                        }
                        return c.join("");
                      }
                      throw f;
                    }
                  }, v && (A = (b) => {
                    try {
                      var c = new XMLHttpRequest();
                      c.open("GET", b, false);
                      c.responseType = "arraybuffer";
                      c.send(null);
                      return new Uint8Array(c.response);
                    } catch (d) {
                      if (b = D(b))
                        return b;
                      throw d;
                    }
                  }), z = (b, c, d) => {
                    var e = new XMLHttpRequest();
                    e.open("GET", b, true);
                    e.responseType = "arraybuffer";
                    e.onload = () => {
                      if (e.status == 200 || e.status == 0 && e.response)
                        c(e.response);
                      else {
                        var f = D(b);
                        f ? c(f.buffer) : d();
                      }
                    };
                    e.onerror = d;
                    e.send(null);
                  };
                var ca = a.print || console.log.bind(console), F = a.printErr || console.warn.bind(console);
                Object.assign(a, p);
                p = null;
                a.thisProgram && (t = a.thisProgram);
                var G;
                a.wasmBinary && (G = a.wasmBinary);
                var noExitRuntime = a.noExitRuntime || true;
                typeof WebAssembly != "object" && E("no native wasm support detected");
                var H, I = false;
                function da(b, c, d, e) {
                  var f = { string: function(m) {
                    var q = 0;
                    if (m !== null && m !== void 0 && m !== 0) {
                      var aa = (m.length << 2) + 1;
                      q = J(aa);
                      ea(m, q, aa);
                    }
                    return q;
                  }, array: function(m) {
                    var q = J(m.length);
                    K.set(m, q);
                    return q;
                  } };
                  b = a["_" + b];
                  var g = [], h = 0;
                  if (e)
                    for (var l = 0; l < e.length; l++) {
                      var r = f[d[l]];
                      r ? (h === 0 && (h = fa()), g[l] = r(e[l])) : g[l] = e[l];
                    }
                  d = b.apply(null, g);
                  return d = function(m) {
                    h !== 0 && ha(h);
                    return c === "string" ? L(m) : c === "boolean" ? !!m : m;
                  }(d);
                }
                var ia = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
                function ja(b, c, d) {
                  var e = c + d;
                  for (d = c; b[d] && !(d >= e); )
                    ++d;
                  if (16 < d - c && b.subarray && ia)
                    return ia.decode(b.subarray(c, d));
                  for (e = ""; c < d; ) {
                    var f = b[c++];
                    if (f & 128) {
                      var g = b[c++] & 63;
                      if ((f & 224) == 192)
                        e += String.fromCharCode((f & 31) << 6 | g);
                      else {
                        var h = b[c++] & 63;
                        f = (f & 240) == 224 ? (f & 15) << 12 | g << 6 | h : (f & 7) << 18 | g << 12 | h << 6 | b[c++] & 63;
                        65536 > f ? e += String.fromCharCode(f) : (f -= 65536, e += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
                      }
                    } else
                      e += String.fromCharCode(f);
                  }
                  return e;
                }
                function L(b, c) {
                  return b ? ja(M, b, c) : "";
                }
                function ka(b, c, d, e) {
                  if (!(0 < e))
                    return 0;
                  var f = d;
                  e = d + e - 1;
                  for (var g = 0; g < b.length; ++g) {
                    var h = b.charCodeAt(g);
                    if (55296 <= h && 57343 >= h) {
                      var l = b.charCodeAt(++g);
                      h = 65536 + ((h & 1023) << 10) | l & 1023;
                    }
                    if (127 >= h) {
                      if (d >= e)
                        break;
                      c[d++] = h;
                    } else {
                      if (2047 >= h) {
                        if (d + 1 >= e)
                          break;
                        c[d++] = 192 | h >> 6;
                      } else {
                        if (65535 >= h) {
                          if (d + 2 >= e)
                            break;
                          c[d++] = 224 | h >> 12;
                        } else {
                          if (d + 3 >= e)
                            break;
                          c[d++] = 240 | h >> 18;
                          c[d++] = 128 | h >> 12 & 63;
                        }
                        c[d++] = 128 | h >> 6 & 63;
                      }
                      c[d++] = 128 | h & 63;
                    }
                  }
                  c[d] = 0;
                  return d - f;
                }
                function ea(b, c, d) {
                  return ka(b, M, c, d);
                }
                function la(b) {
                  for (var c = 0, d = 0; d < b.length; ++d) {
                    var e = b.charCodeAt(d);
                    55296 <= e && 57343 >= e && (e = 65536 + ((e & 1023) << 10) | b.charCodeAt(++d) & 1023);
                    127 >= e ? ++c : c = 2047 >= e ? c + 2 : 65535 >= e ? c + 3 : c + 4;
                  }
                  return c;
                }
                function ma(b) {
                  var c = la(b) + 1, d = na(c);
                  d && ka(b, K, d, c);
                  return d;
                }
                var oa, K, M, N;
                function pa() {
                  var b = H.buffer;
                  oa = b;
                  a.HEAP8 = K = new Int8Array(b);
                  a.HEAP16 = new Int16Array(b);
                  a.HEAP32 = N = new Int32Array(b);
                  a.HEAPU8 = M = new Uint8Array(b);
                  a.HEAPU16 = new Uint16Array(b);
                  a.HEAPU32 = new Uint32Array(b);
                  a.HEAPF32 = new Float32Array(b);
                  a.HEAPF64 = new Float64Array(b);
                }
                var O, qa = [], ra = [], sa = [];
                function ta() {
                  var b = a.preRun.shift();
                  qa.unshift(b);
                }
                var P = 0, Q = null, R = null;
                a.preloadedImages = {};
                a.preloadedAudios = {};
                function E(b) {
                  if (a.onAbort)
                    a.onAbort(b);
                  b = "Aborted(" + b + ")";
                  F(b);
                  I = true;
                  b = new WebAssembly.RuntimeError(b + ". Build with -s ASSERTIONS=1 for more info.");
                  n(b);
                  throw b;
                }
                var S = "data:application/octet-stream;base64,", T;
                T = "data:application/octet-stream;base64,";
                if (!T.startsWith(S)) {
                  var ua = T;
                  T = a.locateFile ? a.locateFile(ua, x) : x + ua;
                }
                function va() {
                  var b = T;
                  try {
                    if (b == T && G)
                      return new Uint8Array(G);
                    var c = D(b);
                    if (c)
                      return c;
                    if (A)
                      return A(b);
                    throw "both async and sync fetching of the wasm failed";
                  } catch (d) {
                    E(d);
                  }
                }
                function wa() {
                  if (!G && (u || v)) {
                    if (typeof fetch == "function" && !T.startsWith("file://"))
                      return fetch(T, { credentials: "same-origin" }).then(function(b) {
                        if (!b.ok)
                          throw "failed to load wasm binary file at '" + T + "'";
                        return b.arrayBuffer();
                      }).catch(function() {
                        return va();
                      });
                    if (z)
                      return new Promise(function(b, c) {
                        z(T, function(d) {
                          b(new Uint8Array(d));
                        }, c);
                      });
                  }
                  return Promise.resolve().then(function() {
                    return va();
                  });
                }
                function U(b) {
                  for (; 0 < b.length; ) {
                    var c = b.shift();
                    if (typeof c == "function")
                      c(a);
                    else {
                      var d = c.ta;
                      typeof d == "number" ? c.ra === void 0 ? O.get(d)() : O.get(d)(c.ra) : d(c.ra === void 0 ? null : c.ra);
                    }
                  }
                }
                function xa(b, c, d) {
                  function e(r) {
                    return (r = r.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? r[1] : "GMT";
                  }
                  var f = new Date().getFullYear(), g = new Date(f, 0, 1), h = new Date(f, 6, 1);
                  f = g.getTimezoneOffset();
                  var l = h.getTimezoneOffset();
                  N[b >> 2] = 60 * Math.max(f, l);
                  N[c >> 2] = Number(f != l);
                  b = e(g);
                  c = e(h);
                  b = ma(b);
                  c = ma(c);
                  l < f ? (N[d >> 2] = b, N[d + 4 >> 2] = c) : (N[d >> 2] = c, N[d + 4 >> 2] = b);
                }
                function V(b, c, d) {
                  V.sa || (V.sa = true, xa(b, c, d));
                }
                var W = {};
                function ya() {
                  if (!X) {
                    var b = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: t || "./this.program" }, c;
                    for (c in W)
                      W[c] === void 0 ? delete b[c] : b[c] = W[c];
                    var d = [];
                    for (c in b)
                      d.push(c + "=" + b[c]);
                    X = d;
                  }
                  return X;
                }
                var X, za = [null, [], []], ba = false, Aa = typeof atob == "function" ? atob : function(b) {
                  var c = "", d = 0;
                  b = b.replace(/[^A-Za-z0-9\+\/=]/g, "");
                  do {
                    var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    var f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    var g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    var h = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(d++));
                    e = e << 2 | f >> 4;
                    f = (f & 15) << 4 | g >> 2;
                    var l = (g & 3) << 6 | h;
                    c += String.fromCharCode(e);
                    g !== 64 && (c += String.fromCharCode(f));
                    h !== 64 && (c += String.fromCharCode(l));
                  } while (d < b.length);
                  return c;
                };
                function D(b) {
                  if (b.startsWith(S)) {
                    b = b.slice(S.length);
                    if (typeof w == "boolean" && w) {
                      var c = Buffer2.from(b, "base64");
                      c = new Uint8Array(c.buffer, c.byteOffset, c.byteLength);
                    } else
                      try {
                        var d = Aa(b), e = new Uint8Array(d.length);
                        for (b = 0; b < d.length; ++b)
                          e[b] = d.charCodeAt(b);
                        c = e;
                      } catch (f) {
                        throw Error("Converting base64 string to bytes failed.");
                      }
                    return c;
                  }
                }
                var Ba = {
                  a: function(b, c, d, e) {
                    E("Assertion failed: " + L(b) + ", at: " + [c ? L(c) : "unknown filename", d, e ? L(e) : "unknown function"]);
                  },
                  k: function(b, c) {
                    b = new Date(1e3 * N[b >> 2]);
                    N[c >> 2] = b.getSeconds();
                    N[c + 4 >> 2] = b.getMinutes();
                    N[c + 8 >> 2] = b.getHours();
                    N[c + 12 >> 2] = b.getDate();
                    N[c + 16 >> 2] = b.getMonth();
                    N[c + 20 >> 2] = b.getFullYear() - 1900;
                    N[c + 24 >> 2] = b.getDay();
                    var d = new Date(b.getFullYear(), 0, 1);
                    N[c + 28 >> 2] = (b.getTime() - d.getTime()) / 864e5 | 0;
                    N[c + 36 >> 2] = -(60 * b.getTimezoneOffset());
                    var e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset();
                    d = d.getTimezoneOffset();
                    N[c + 32 >> 2] = (e != d && b.getTimezoneOffset() == Math.min(d, e)) | 0;
                  },
                  l: V,
                  b: function() {
                    E("");
                  },
                  d: function(b) {
                    var c = M.length;
                    b >>>= 0;
                    if (2147483648 < b)
                      return false;
                    for (var d = 1; 4 >= d; d *= 2) {
                      var e = c * (1 + 0.2 / d);
                      e = Math.min(e, b + 100663296);
                      var f = Math;
                      e = Math.max(b, e);
                      f = f.min.call(f, 2147483648, e + (65536 - e % 65536) % 65536);
                      a: {
                        try {
                          H.grow(f - oa.byteLength + 65535 >>> 16);
                          pa();
                          var g = 1;
                          break a;
                        } catch (h) {
                        }
                        g = void 0;
                      }
                      if (g)
                        return true;
                    }
                    return false;
                  },
                  f: function(b, c) {
                    var d = 0;
                    ya().forEach(function(e, f) {
                      var g = c + d;
                      f = N[b + 4 * f >> 2] = g;
                      for (g = 0; g < e.length; ++g)
                        K[f++ >> 0] = e.charCodeAt(g);
                      K[f >> 0] = 0;
                      d += e.length + 1;
                    });
                    return 0;
                  },
                  g: function(b, c) {
                    var d = ya();
                    N[b >> 2] = d.length;
                    var e = 0;
                    d.forEach(function(f) {
                      e += f.length + 1;
                    });
                    N[c >> 2] = e;
                    return 0;
                  },
                  e: function() {
                    return 0;
                  },
                  j: function() {
                  },
                  m: function(b, c, d, e) {
                    for (var f = 0, g = 0; g < d; g++) {
                      var h = N[c >> 2], l = N[c + 4 >> 2];
                      c += 8;
                      for (var r = 0; r < l; r++) {
                        var m = M[h + r], q = za[b];
                        m === 0 || m === 10 ? ((b === 1 ? ca : F)(ja(q, 0)), q.length = 0) : q.push(m);
                      }
                      f += l;
                    }
                    N[e >> 2] = f;
                    return 0;
                  },
                  c: function(b) {
                    var c = Date.now();
                    N[b >> 2] = c / 1e3 | 0;
                    N[b + 4 >> 2] = c % 1e3 * 1e3 | 0;
                    return 0;
                  },
                  o: function(b, c, d, e, f) {
                    return a.callbacks.callFunction(void 0, b, c, d, e, f);
                  },
                  n: function(b) {
                    return a.callbacks.shouldInterrupt(void 0, b);
                  },
                  i: function(b, c, d) {
                    d = L(d);
                    return a.callbacks.loadModuleSource(void 0, b, c, d);
                  },
                  h: function(b, c, d, e) {
                    d = L(d);
                    e = L(e);
                    return a.callbacks.normalizeModule(void 0, b, c, d, e);
                  }
                };
                (function() {
                  function b(f) {
                    a.asm = f.exports;
                    H = a.asm.p;
                    pa();
                    O = a.asm.na;
                    ra.unshift(a.asm.q);
                    P--;
                    a.monitorRunDependencies && a.monitorRunDependencies(P);
                    P == 0 && (Q !== null && (clearInterval(Q), Q = null), R && (f = R, R = null, f()));
                  }
                  function c(f) {
                    b(f.instance);
                  }
                  function d(f) {
                    return wa().then(function(g) {
                      return WebAssembly.instantiate(g, e);
                    }).then(function(g) {
                      return g;
                    }).then(f, function(g) {
                      F("failed to asynchronously prepare wasm: " + g);
                      E(g);
                    });
                  }
                  var e = { a: Ba };
                  P++;
                  a.monitorRunDependencies && a.monitorRunDependencies(P);
                  if (a.instantiateWasm)
                    try {
                      return a.instantiateWasm(e, b);
                    } catch (f) {
                      return F("Module.instantiateWasm callback failed with error: " + f), false;
                    }
                  (function() {
                    return G || typeof WebAssembly.instantiateStreaming != "function" || T.startsWith(S) || T.startsWith("file://") || typeof fetch != "function" ? d(c) : fetch(T, { credentials: "same-origin" }).then(function(f) {
                      return WebAssembly.instantiateStreaming(f, e).then(c, function(g) {
                        F("wasm streaming compile failed: " + g);
                        F("falling back to ArrayBuffer instantiation");
                        return d(c);
                      });
                    });
                  })().catch(n);
                  return {};
                })();
                a.___wasm_call_ctors = function() {
                  return (a.___wasm_call_ctors = a.asm.q).apply(null, arguments);
                };
                var na = a._malloc = function() {
                  return (na = a._malloc = a.asm.r).apply(null, arguments);
                };
                a._QTS_Throw = function() {
                  return (a._QTS_Throw = a.asm.s).apply(null, arguments);
                };
                a._QTS_NewError = function() {
                  return (a._QTS_NewError = a.asm.t).apply(null, arguments);
                };
                a._QTS_RuntimeSetMemoryLimit = function() {
                  return (a._QTS_RuntimeSetMemoryLimit = a.asm.u).apply(null, arguments);
                };
                a._QTS_RuntimeComputeMemoryUsage = function() {
                  return (a._QTS_RuntimeComputeMemoryUsage = a.asm.v).apply(null, arguments);
                };
                a._QTS_RuntimeDumpMemoryUsage = function() {
                  return (a._QTS_RuntimeDumpMemoryUsage = a.asm.w).apply(null, arguments);
                };
                a._QTS_RecoverableLeakCheck = function() {
                  return (a._QTS_RecoverableLeakCheck = a.asm.x).apply(null, arguments);
                };
                a._QTS_BuildIsSanitizeLeak = function() {
                  return (a._QTS_BuildIsSanitizeLeak = a.asm.y).apply(null, arguments);
                };
                a._QTS_GetUndefined = function() {
                  return (a._QTS_GetUndefined = a.asm.z).apply(null, arguments);
                };
                a._QTS_GetNull = function() {
                  return (a._QTS_GetNull = a.asm.A).apply(null, arguments);
                };
                a._QTS_GetFalse = function() {
                  return (a._QTS_GetFalse = a.asm.B).apply(null, arguments);
                };
                a._QTS_GetTrue = function() {
                  return (a._QTS_GetTrue = a.asm.C).apply(null, arguments);
                };
                a._QTS_NewRuntime = function() {
                  return (a._QTS_NewRuntime = a.asm.D).apply(null, arguments);
                };
                a._QTS_FreeRuntime = function() {
                  return (a._QTS_FreeRuntime = a.asm.E).apply(null, arguments);
                };
                a._QTS_NewContext = function() {
                  return (a._QTS_NewContext = a.asm.F).apply(null, arguments);
                };
                a._QTS_FreeContext = function() {
                  return (a._QTS_FreeContext = a.asm.G).apply(null, arguments);
                };
                a._QTS_FreeValuePointer = function() {
                  return (a._QTS_FreeValuePointer = a.asm.H).apply(null, arguments);
                };
                a._free = function() {
                  return (a._free = a.asm.I).apply(null, arguments);
                };
                a._QTS_FreeValuePointerRuntime = function() {
                  return (a._QTS_FreeValuePointerRuntime = a.asm.J).apply(null, arguments);
                };
                a._QTS_FreeVoidPointer = function() {
                  return (a._QTS_FreeVoidPointer = a.asm.K).apply(null, arguments);
                };
                a._QTS_FreeCString = function() {
                  return (a._QTS_FreeCString = a.asm.L).apply(null, arguments);
                };
                a._QTS_DupValuePointer = function() {
                  return (a._QTS_DupValuePointer = a.asm.M).apply(null, arguments);
                };
                a._QTS_NewObject = function() {
                  return (a._QTS_NewObject = a.asm.N).apply(null, arguments);
                };
                a._QTS_NewObjectProto = function() {
                  return (a._QTS_NewObjectProto = a.asm.O).apply(null, arguments);
                };
                a._QTS_NewArray = function() {
                  return (a._QTS_NewArray = a.asm.P).apply(null, arguments);
                };
                a._QTS_NewFloat64 = function() {
                  return (a._QTS_NewFloat64 = a.asm.Q).apply(null, arguments);
                };
                a._QTS_GetFloat64 = function() {
                  return (a._QTS_GetFloat64 = a.asm.R).apply(null, arguments);
                };
                a._QTS_NewString = function() {
                  return (a._QTS_NewString = a.asm.S).apply(null, arguments);
                };
                a._QTS_GetString = function() {
                  return (a._QTS_GetString = a.asm.T).apply(null, arguments);
                };
                a._QTS_IsJobPending = function() {
                  return (a._QTS_IsJobPending = a.asm.U).apply(null, arguments);
                };
                a._QTS_ExecutePendingJob = function() {
                  return (a._QTS_ExecutePendingJob = a.asm.V).apply(null, arguments);
                };
                a._QTS_GetProp = function() {
                  return (a._QTS_GetProp = a.asm.W).apply(null, arguments);
                };
                a._QTS_SetProp = function() {
                  return (a._QTS_SetProp = a.asm.X).apply(null, arguments);
                };
                a._QTS_DefineProp = function() {
                  return (a._QTS_DefineProp = a.asm.Y).apply(null, arguments);
                };
                a._QTS_Call = function() {
                  return (a._QTS_Call = a.asm.Z).apply(null, arguments);
                };
                a._QTS_ResolveException = function() {
                  return (a._QTS_ResolveException = a.asm._).apply(null, arguments);
                };
                a._QTS_Dump = function() {
                  return (a._QTS_Dump = a.asm.$).apply(null, arguments);
                };
                a._QTS_Eval = function() {
                  return (a._QTS_Eval = a.asm.aa).apply(null, arguments);
                };
                a._QTS_Typeof = function() {
                  return (a._QTS_Typeof = a.asm.ba).apply(null, arguments);
                };
                a._QTS_GetGlobalObject = function() {
                  return (a._QTS_GetGlobalObject = a.asm.ca).apply(null, arguments);
                };
                a._QTS_NewPromiseCapability = function() {
                  return (a._QTS_NewPromiseCapability = a.asm.da).apply(null, arguments);
                };
                a._QTS_TestStringArg = function() {
                  return (a._QTS_TestStringArg = a.asm.ea).apply(null, arguments);
                };
                a._QTS_BuildIsDebug = function() {
                  return (a._QTS_BuildIsDebug = a.asm.fa).apply(null, arguments);
                };
                a._QTS_BuildIsAsyncify = function() {
                  return (a._QTS_BuildIsAsyncify = a.asm.ga).apply(null, arguments);
                };
                a._QTS_NewFunction = function() {
                  return (a._QTS_NewFunction = a.asm.ha).apply(null, arguments);
                };
                a._QTS_ArgvGetJSValueConstPointer = function() {
                  return (a._QTS_ArgvGetJSValueConstPointer = a.asm.ia).apply(null, arguments);
                };
                a._QTS_RuntimeEnableInterruptHandler = function() {
                  return (a._QTS_RuntimeEnableInterruptHandler = a.asm.ja).apply(null, arguments);
                };
                a._QTS_RuntimeDisableInterruptHandler = function() {
                  return (a._QTS_RuntimeDisableInterruptHandler = a.asm.ka).apply(null, arguments);
                };
                a._QTS_RuntimeEnableModuleLoader = function() {
                  return (a._QTS_RuntimeEnableModuleLoader = a.asm.la).apply(null, arguments);
                };
                a._QTS_RuntimeDisableModuleLoader = function() {
                  return (a._QTS_RuntimeDisableModuleLoader = a.asm.ma).apply(null, arguments);
                };
                var fa = a.stackSave = function() {
                  return (fa = a.stackSave = a.asm.oa).apply(null, arguments);
                }, ha = a.stackRestore = function() {
                  return (ha = a.stackRestore = a.asm.pa).apply(null, arguments);
                }, J = a.stackAlloc = function() {
                  return (J = a.stackAlloc = a.asm.qa).apply(null, arguments);
                };
                a.cwrap = function(b, c, d, e) {
                  d = d || [];
                  var f = d.every(function(g) {
                    return g === "number";
                  });
                  return c !== "string" && f && !e ? a["_" + b] : function() {
                    return da(b, c, d, arguments);
                  };
                };
                a.UTF8ToString = L;
                a.stringToUTF8 = ea;
                a.lengthBytesUTF8 = la;
                var Y;
                R = function Ca() {
                  Y || Z();
                  Y || (R = Ca);
                };
                function Z() {
                  function b() {
                    if (!Y && (Y = true, a.calledRun = true, !I)) {
                      U(ra);
                      k(a);
                      if (a.onRuntimeInitialized)
                        a.onRuntimeInitialized();
                      if (a.postRun)
                        for (typeof a.postRun == "function" && (a.postRun = [a.postRun]); a.postRun.length; ) {
                          var c = a.postRun.shift();
                          sa.unshift(c);
                        }
                      U(sa);
                    }
                  }
                  if (!(0 < P)) {
                    if (a.preRun)
                      for (typeof a.preRun == "function" && (a.preRun = [a.preRun]); a.preRun.length; )
                        ta();
                    U(qa);
                    0 < P || (a.setStatus ? (a.setStatus("Running..."), setTimeout(function() {
                      setTimeout(function() {
                        a.setStatus("");
                      }, 1);
                      b();
                    }, 1)) : b());
                  }
                }
                a.run = Z;
                if (a.preInit)
                  for (typeof a.preInit == "function" && (a.preInit = [a.preInit]); 0 < a.preInit.length; )
                    a.preInit.pop()();
                Z();
                return QuickJSRaw2.ready;
              };
            })();
            if (typeof exports3 === "object" && typeof module3 === "object")
              module3.exports = QuickJSRaw;
            else if (typeof define2 === "function" && define2["amd"])
              define2([], function() {
                return QuickJSRaw;
              });
            else if (typeof exports3 === "object")
              exports3["QuickJSRaw"] = QuickJSRaw;
          }).call(this);
        }).call(this, require2("_process"), require2("buffer").Buffer, "/node_modules/quickjs-emscripten/dist/generated/emscripten-module.WASM_RELEASE_SYNC.js", arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/quickjs-emscripten/dist/generated");
      }, { "_process": 151, "buffer": 63, "fs": 62, "path": 144 }], 169: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSAsyncFFI = void 0;
        const types_ffi_1 = require2("../types-ffi");
        class QuickJSAsyncFFI {
          constructor(module4) {
            this.module = module4;
            this.DEBUG = true;
            this.QTS_Throw = this.module.cwrap("QTS_Throw", "number", ["number", "number"]);
            this.QTS_NewError = this.module.cwrap("QTS_NewError", "number", ["number"]);
            this.QTS_RuntimeSetMemoryLimit = this.module.cwrap("QTS_RuntimeSetMemoryLimit", null, ["number", "number"]);
            this.QTS_RuntimeComputeMemoryUsage = this.module.cwrap("QTS_RuntimeComputeMemoryUsage", "number", ["number", "number"]);
            this.QTS_RuntimeDumpMemoryUsage = this.module.cwrap("QTS_RuntimeDumpMemoryUsage", "number", ["number"]);
            this.QTS_RecoverableLeakCheck = this.module.cwrap("QTS_RecoverableLeakCheck", "number", []);
            this.QTS_BuildIsSanitizeLeak = this.module.cwrap("QTS_BuildIsSanitizeLeak", "number", []);
            this.QTS_GetUndefined = this.module.cwrap("QTS_GetUndefined", "number", []);
            this.QTS_GetNull = this.module.cwrap("QTS_GetNull", "number", []);
            this.QTS_GetFalse = this.module.cwrap("QTS_GetFalse", "number", []);
            this.QTS_GetTrue = this.module.cwrap("QTS_GetTrue", "number", []);
            this.QTS_NewRuntime = this.module.cwrap("QTS_NewRuntime", "number", []);
            this.QTS_FreeRuntime = this.module.cwrap("QTS_FreeRuntime", null, ["number"]);
            this.QTS_NewContext = this.module.cwrap("QTS_NewContext", "number", ["number"]);
            this.QTS_FreeContext = this.module.cwrap("QTS_FreeContext", null, ["number"]);
            this.QTS_FreeValuePointer = this.module.cwrap("QTS_FreeValuePointer", null, ["number", "number"]);
            this.QTS_FreeValuePointerRuntime = this.module.cwrap("QTS_FreeValuePointerRuntime", null, ["number", "number"]);
            this.QTS_FreeVoidPointer = this.module.cwrap("QTS_FreeVoidPointer", null, ["number", "number"]);
            this.QTS_FreeCString = this.module.cwrap("QTS_FreeCString", null, ["number", "number"]);
            this.QTS_DupValuePointer = this.module.cwrap("QTS_DupValuePointer", "number", ["number", "number"]);
            this.QTS_NewObject = this.module.cwrap("QTS_NewObject", "number", ["number"]);
            this.QTS_NewObjectProto = this.module.cwrap("QTS_NewObjectProto", "number", ["number", "number"]);
            this.QTS_NewArray = this.module.cwrap("QTS_NewArray", "number", ["number"]);
            this.QTS_NewFloat64 = this.module.cwrap("QTS_NewFloat64", "number", ["number", "number"]);
            this.QTS_GetFloat64 = this.module.cwrap("QTS_GetFloat64", "number", ["number", "number"]);
            this.QTS_NewString = this.module.cwrap("QTS_NewString", "number", ["number", "number"]);
            this.QTS_GetString = this.module.cwrap("QTS_GetString", "number", ["number", "number"]);
            this.QTS_IsJobPending = this.module.cwrap("QTS_IsJobPending", "number", ["number"]);
            this.QTS_ExecutePendingJob = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_ExecutePendingJob", "number", ["number", "number", "number"]));
            this.QTS_ExecutePendingJob_MaybeAsync = this.module.cwrap("QTS_ExecutePendingJob", "number", ["number", "number", "number"], { async: true });
            this.QTS_GetProp = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_GetProp", "number", ["number", "number", "number"]));
            this.QTS_GetProp_MaybeAsync = this.module.cwrap("QTS_GetProp", "number", ["number", "number", "number"], { async: true });
            this.QTS_SetProp = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_SetProp", null, ["number", "number", "number", "number"]));
            this.QTS_SetProp_MaybeAsync = this.module.cwrap("QTS_SetProp", null, ["number", "number", "number", "number"], { async: true });
            this.QTS_DefineProp = this.module.cwrap("QTS_DefineProp", null, ["number", "number", "number", "number", "number", "number", "boolean", "boolean", "boolean"]);
            this.QTS_Call = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_Call", "number", ["number", "number", "number", "number", "number"]));
            this.QTS_Call_MaybeAsync = this.module.cwrap("QTS_Call", "number", ["number", "number", "number", "number", "number"], { async: true });
            this.QTS_ResolveException = this.module.cwrap("QTS_ResolveException", "number", ["number", "number"]);
            this.QTS_Dump = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_Dump", "number", ["number", "number"]));
            this.QTS_Dump_MaybeAsync = this.module.cwrap("QTS_Dump", "number", ["number", "number"], { async: true });
            this.QTS_Eval = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_Eval", "number", ["number", "number", "string", "number", "number"]));
            this.QTS_Eval_MaybeAsync = this.module.cwrap("QTS_Eval", "number", ["number", "number", "string", "number", "number"], { async: true });
            this.QTS_Typeof = this.module.cwrap("QTS_Typeof", "number", ["number", "number"]);
            this.QTS_GetGlobalObject = this.module.cwrap("QTS_GetGlobalObject", "number", ["number"]);
            this.QTS_NewPromiseCapability = this.module.cwrap("QTS_NewPromiseCapability", "number", ["number", "number"]);
            this.QTS_TestStringArg = this.module.cwrap("QTS_TestStringArg", null, ["string"]);
            this.QTS_BuildIsDebug = this.module.cwrap("QTS_BuildIsDebug", "number", []);
            this.QTS_BuildIsAsyncify = this.module.cwrap("QTS_BuildIsAsyncify", "number", []);
            this.QTS_NewFunction = this.module.cwrap("QTS_NewFunction", "number", ["number", "number", "string"]);
            this.QTS_ArgvGetJSValueConstPointer = this.module.cwrap("QTS_ArgvGetJSValueConstPointer", "number", ["number", "number"]);
            this.QTS_RuntimeEnableInterruptHandler = this.module.cwrap("QTS_RuntimeEnableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeDisableInterruptHandler = this.module.cwrap("QTS_RuntimeDisableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeEnableModuleLoader = this.module.cwrap("QTS_RuntimeEnableModuleLoader", null, ["number", "number"]);
            this.QTS_RuntimeDisableModuleLoader = this.module.cwrap("QTS_RuntimeDisableModuleLoader", null, ["number"]);
          }
        }
        exports3.QuickJSAsyncFFI = QuickJSAsyncFFI;
      }, { "../types-ffi": 181 }], 170: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSFFI = void 0;
        class QuickJSFFI {
          constructor(module4) {
            this.module = module4;
            this.DEBUG = true;
            this.QTS_Throw = this.module.cwrap("QTS_Throw", "number", ["number", "number"]);
            this.QTS_NewError = this.module.cwrap("QTS_NewError", "number", ["number"]);
            this.QTS_RuntimeSetMemoryLimit = this.module.cwrap("QTS_RuntimeSetMemoryLimit", null, ["number", "number"]);
            this.QTS_RuntimeComputeMemoryUsage = this.module.cwrap("QTS_RuntimeComputeMemoryUsage", "number", ["number", "number"]);
            this.QTS_RuntimeDumpMemoryUsage = this.module.cwrap("QTS_RuntimeDumpMemoryUsage", "number", ["number"]);
            this.QTS_RecoverableLeakCheck = this.module.cwrap("QTS_RecoverableLeakCheck", "number", []);
            this.QTS_BuildIsSanitizeLeak = this.module.cwrap("QTS_BuildIsSanitizeLeak", "number", []);
            this.QTS_GetUndefined = this.module.cwrap("QTS_GetUndefined", "number", []);
            this.QTS_GetNull = this.module.cwrap("QTS_GetNull", "number", []);
            this.QTS_GetFalse = this.module.cwrap("QTS_GetFalse", "number", []);
            this.QTS_GetTrue = this.module.cwrap("QTS_GetTrue", "number", []);
            this.QTS_NewRuntime = this.module.cwrap("QTS_NewRuntime", "number", []);
            this.QTS_FreeRuntime = this.module.cwrap("QTS_FreeRuntime", null, ["number"]);
            this.QTS_NewContext = this.module.cwrap("QTS_NewContext", "number", ["number"]);
            this.QTS_FreeContext = this.module.cwrap("QTS_FreeContext", null, ["number"]);
            this.QTS_FreeValuePointer = this.module.cwrap("QTS_FreeValuePointer", null, ["number", "number"]);
            this.QTS_FreeValuePointerRuntime = this.module.cwrap("QTS_FreeValuePointerRuntime", null, ["number", "number"]);
            this.QTS_FreeVoidPointer = this.module.cwrap("QTS_FreeVoidPointer", null, ["number", "number"]);
            this.QTS_FreeCString = this.module.cwrap("QTS_FreeCString", null, ["number", "number"]);
            this.QTS_DupValuePointer = this.module.cwrap("QTS_DupValuePointer", "number", ["number", "number"]);
            this.QTS_NewObject = this.module.cwrap("QTS_NewObject", "number", ["number"]);
            this.QTS_NewObjectProto = this.module.cwrap("QTS_NewObjectProto", "number", ["number", "number"]);
            this.QTS_NewArray = this.module.cwrap("QTS_NewArray", "number", ["number"]);
            this.QTS_NewFloat64 = this.module.cwrap("QTS_NewFloat64", "number", ["number", "number"]);
            this.QTS_GetFloat64 = this.module.cwrap("QTS_GetFloat64", "number", ["number", "number"]);
            this.QTS_NewString = this.module.cwrap("QTS_NewString", "number", ["number", "number"]);
            this.QTS_GetString = this.module.cwrap("QTS_GetString", "number", ["number", "number"]);
            this.QTS_IsJobPending = this.module.cwrap("QTS_IsJobPending", "number", ["number"]);
            this.QTS_ExecutePendingJob = this.module.cwrap("QTS_ExecutePendingJob", "number", ["number", "number", "number"]);
            this.QTS_GetProp = this.module.cwrap("QTS_GetProp", "number", ["number", "number", "number"]);
            this.QTS_SetProp = this.module.cwrap("QTS_SetProp", null, ["number", "number", "number", "number"]);
            this.QTS_DefineProp = this.module.cwrap("QTS_DefineProp", null, ["number", "number", "number", "number", "number", "number", "boolean", "boolean", "boolean"]);
            this.QTS_Call = this.module.cwrap("QTS_Call", "number", ["number", "number", "number", "number", "number"]);
            this.QTS_ResolveException = this.module.cwrap("QTS_ResolveException", "number", ["number", "number"]);
            this.QTS_Dump = this.module.cwrap("QTS_Dump", "number", ["number", "number"]);
            this.QTS_Eval = this.module.cwrap("QTS_Eval", "number", ["number", "number", "string", "number", "number"]);
            this.QTS_Typeof = this.module.cwrap("QTS_Typeof", "number", ["number", "number"]);
            this.QTS_GetGlobalObject = this.module.cwrap("QTS_GetGlobalObject", "number", ["number"]);
            this.QTS_NewPromiseCapability = this.module.cwrap("QTS_NewPromiseCapability", "number", ["number", "number"]);
            this.QTS_TestStringArg = this.module.cwrap("QTS_TestStringArg", null, ["string"]);
            this.QTS_BuildIsDebug = this.module.cwrap("QTS_BuildIsDebug", "number", []);
            this.QTS_BuildIsAsyncify = this.module.cwrap("QTS_BuildIsAsyncify", "number", []);
            this.QTS_NewFunction = this.module.cwrap("QTS_NewFunction", "number", ["number", "number", "string"]);
            this.QTS_ArgvGetJSValueConstPointer = this.module.cwrap("QTS_ArgvGetJSValueConstPointer", "number", ["number", "number"]);
            this.QTS_RuntimeEnableInterruptHandler = this.module.cwrap("QTS_RuntimeEnableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeDisableInterruptHandler = this.module.cwrap("QTS_RuntimeDisableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeEnableModuleLoader = this.module.cwrap("QTS_RuntimeEnableModuleLoader", null, ["number", "number"]);
            this.QTS_RuntimeDisableModuleLoader = this.module.cwrap("QTS_RuntimeDisableModuleLoader", null, ["number"]);
          }
        }
        exports3.QuickJSFFI = QuickJSFFI;
      }, {}], 171: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSAsyncFFI = void 0;
        const types_ffi_1 = require2("../types-ffi");
        class QuickJSAsyncFFI {
          constructor(module4) {
            this.module = module4;
            this.DEBUG = false;
            this.QTS_Throw = this.module.cwrap("QTS_Throw", "number", ["number", "number"]);
            this.QTS_NewError = this.module.cwrap("QTS_NewError", "number", ["number"]);
            this.QTS_RuntimeSetMemoryLimit = this.module.cwrap("QTS_RuntimeSetMemoryLimit", null, ["number", "number"]);
            this.QTS_RuntimeComputeMemoryUsage = this.module.cwrap("QTS_RuntimeComputeMemoryUsage", "number", ["number", "number"]);
            this.QTS_RuntimeDumpMemoryUsage = this.module.cwrap("QTS_RuntimeDumpMemoryUsage", "number", ["number"]);
            this.QTS_RecoverableLeakCheck = this.module.cwrap("QTS_RecoverableLeakCheck", "number", []);
            this.QTS_BuildIsSanitizeLeak = this.module.cwrap("QTS_BuildIsSanitizeLeak", "number", []);
            this.QTS_GetUndefined = this.module.cwrap("QTS_GetUndefined", "number", []);
            this.QTS_GetNull = this.module.cwrap("QTS_GetNull", "number", []);
            this.QTS_GetFalse = this.module.cwrap("QTS_GetFalse", "number", []);
            this.QTS_GetTrue = this.module.cwrap("QTS_GetTrue", "number", []);
            this.QTS_NewRuntime = this.module.cwrap("QTS_NewRuntime", "number", []);
            this.QTS_FreeRuntime = this.module.cwrap("QTS_FreeRuntime", null, ["number"]);
            this.QTS_NewContext = this.module.cwrap("QTS_NewContext", "number", ["number"]);
            this.QTS_FreeContext = this.module.cwrap("QTS_FreeContext", null, ["number"]);
            this.QTS_FreeValuePointer = this.module.cwrap("QTS_FreeValuePointer", null, ["number", "number"]);
            this.QTS_FreeValuePointerRuntime = this.module.cwrap("QTS_FreeValuePointerRuntime", null, ["number", "number"]);
            this.QTS_FreeVoidPointer = this.module.cwrap("QTS_FreeVoidPointer", null, ["number", "number"]);
            this.QTS_FreeCString = this.module.cwrap("QTS_FreeCString", null, ["number", "number"]);
            this.QTS_DupValuePointer = this.module.cwrap("QTS_DupValuePointer", "number", ["number", "number"]);
            this.QTS_NewObject = this.module.cwrap("QTS_NewObject", "number", ["number"]);
            this.QTS_NewObjectProto = this.module.cwrap("QTS_NewObjectProto", "number", ["number", "number"]);
            this.QTS_NewArray = this.module.cwrap("QTS_NewArray", "number", ["number"]);
            this.QTS_NewFloat64 = this.module.cwrap("QTS_NewFloat64", "number", ["number", "number"]);
            this.QTS_GetFloat64 = this.module.cwrap("QTS_GetFloat64", "number", ["number", "number"]);
            this.QTS_NewString = this.module.cwrap("QTS_NewString", "number", ["number", "number"]);
            this.QTS_GetString = this.module.cwrap("QTS_GetString", "number", ["number", "number"]);
            this.QTS_IsJobPending = this.module.cwrap("QTS_IsJobPending", "number", ["number"]);
            this.QTS_ExecutePendingJob = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_ExecutePendingJob", "number", ["number", "number", "number"]));
            this.QTS_ExecutePendingJob_MaybeAsync = this.module.cwrap("QTS_ExecutePendingJob", "number", ["number", "number", "number"]);
            this.QTS_GetProp = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_GetProp", "number", ["number", "number", "number"]));
            this.QTS_GetProp_MaybeAsync = this.module.cwrap("QTS_GetProp", "number", ["number", "number", "number"]);
            this.QTS_SetProp = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_SetProp", null, ["number", "number", "number", "number"]));
            this.QTS_SetProp_MaybeAsync = this.module.cwrap("QTS_SetProp", null, ["number", "number", "number", "number"]);
            this.QTS_DefineProp = this.module.cwrap("QTS_DefineProp", null, ["number", "number", "number", "number", "number", "number", "boolean", "boolean", "boolean"]);
            this.QTS_Call = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_Call", "number", ["number", "number", "number", "number", "number"]));
            this.QTS_Call_MaybeAsync = this.module.cwrap("QTS_Call", "number", ["number", "number", "number", "number", "number"]);
            this.QTS_ResolveException = this.module.cwrap("QTS_ResolveException", "number", ["number", "number"]);
            this.QTS_Dump = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_Dump", "number", ["number", "number"]));
            this.QTS_Dump_MaybeAsync = this.module.cwrap("QTS_Dump", "number", ["number", "number"]);
            this.QTS_Eval = (0, types_ffi_1.assertSync)(this.module.cwrap("QTS_Eval", "number", ["number", "number", "string", "number", "number"]));
            this.QTS_Eval_MaybeAsync = this.module.cwrap("QTS_Eval", "number", ["number", "number", "string", "number", "number"]);
            this.QTS_Typeof = this.module.cwrap("QTS_Typeof", "number", ["number", "number"]);
            this.QTS_GetGlobalObject = this.module.cwrap("QTS_GetGlobalObject", "number", ["number"]);
            this.QTS_NewPromiseCapability = this.module.cwrap("QTS_NewPromiseCapability", "number", ["number", "number"]);
            this.QTS_TestStringArg = this.module.cwrap("QTS_TestStringArg", null, ["string"]);
            this.QTS_BuildIsDebug = this.module.cwrap("QTS_BuildIsDebug", "number", []);
            this.QTS_BuildIsAsyncify = this.module.cwrap("QTS_BuildIsAsyncify", "number", []);
            this.QTS_NewFunction = this.module.cwrap("QTS_NewFunction", "number", ["number", "number", "string"]);
            this.QTS_ArgvGetJSValueConstPointer = this.module.cwrap("QTS_ArgvGetJSValueConstPointer", "number", ["number", "number"]);
            this.QTS_RuntimeEnableInterruptHandler = this.module.cwrap("QTS_RuntimeEnableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeDisableInterruptHandler = this.module.cwrap("QTS_RuntimeDisableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeEnableModuleLoader = this.module.cwrap("QTS_RuntimeEnableModuleLoader", null, ["number", "number"]);
            this.QTS_RuntimeDisableModuleLoader = this.module.cwrap("QTS_RuntimeDisableModuleLoader", null, ["number"]);
          }
        }
        exports3.QuickJSAsyncFFI = QuickJSAsyncFFI;
      }, { "../types-ffi": 181 }], 172: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSFFI = void 0;
        class QuickJSFFI {
          constructor(module4) {
            this.module = module4;
            this.DEBUG = false;
            this.QTS_Throw = this.module.cwrap("QTS_Throw", "number", ["number", "number"]);
            this.QTS_NewError = this.module.cwrap("QTS_NewError", "number", ["number"]);
            this.QTS_RuntimeSetMemoryLimit = this.module.cwrap("QTS_RuntimeSetMemoryLimit", null, ["number", "number"]);
            this.QTS_RuntimeComputeMemoryUsage = this.module.cwrap("QTS_RuntimeComputeMemoryUsage", "number", ["number", "number"]);
            this.QTS_RuntimeDumpMemoryUsage = this.module.cwrap("QTS_RuntimeDumpMemoryUsage", "number", ["number"]);
            this.QTS_RecoverableLeakCheck = this.module.cwrap("QTS_RecoverableLeakCheck", "number", []);
            this.QTS_BuildIsSanitizeLeak = this.module.cwrap("QTS_BuildIsSanitizeLeak", "number", []);
            this.QTS_GetUndefined = this.module.cwrap("QTS_GetUndefined", "number", []);
            this.QTS_GetNull = this.module.cwrap("QTS_GetNull", "number", []);
            this.QTS_GetFalse = this.module.cwrap("QTS_GetFalse", "number", []);
            this.QTS_GetTrue = this.module.cwrap("QTS_GetTrue", "number", []);
            this.QTS_NewRuntime = this.module.cwrap("QTS_NewRuntime", "number", []);
            this.QTS_FreeRuntime = this.module.cwrap("QTS_FreeRuntime", null, ["number"]);
            this.QTS_NewContext = this.module.cwrap("QTS_NewContext", "number", ["number"]);
            this.QTS_FreeContext = this.module.cwrap("QTS_FreeContext", null, ["number"]);
            this.QTS_FreeValuePointer = this.module.cwrap("QTS_FreeValuePointer", null, ["number", "number"]);
            this.QTS_FreeValuePointerRuntime = this.module.cwrap("QTS_FreeValuePointerRuntime", null, ["number", "number"]);
            this.QTS_FreeVoidPointer = this.module.cwrap("QTS_FreeVoidPointer", null, ["number", "number"]);
            this.QTS_FreeCString = this.module.cwrap("QTS_FreeCString", null, ["number", "number"]);
            this.QTS_DupValuePointer = this.module.cwrap("QTS_DupValuePointer", "number", ["number", "number"]);
            this.QTS_NewObject = this.module.cwrap("QTS_NewObject", "number", ["number"]);
            this.QTS_NewObjectProto = this.module.cwrap("QTS_NewObjectProto", "number", ["number", "number"]);
            this.QTS_NewArray = this.module.cwrap("QTS_NewArray", "number", ["number"]);
            this.QTS_NewFloat64 = this.module.cwrap("QTS_NewFloat64", "number", ["number", "number"]);
            this.QTS_GetFloat64 = this.module.cwrap("QTS_GetFloat64", "number", ["number", "number"]);
            this.QTS_NewString = this.module.cwrap("QTS_NewString", "number", ["number", "number"]);
            this.QTS_GetString = this.module.cwrap("QTS_GetString", "number", ["number", "number"]);
            this.QTS_IsJobPending = this.module.cwrap("QTS_IsJobPending", "number", ["number"]);
            this.QTS_ExecutePendingJob = this.module.cwrap("QTS_ExecutePendingJob", "number", ["number", "number", "number"]);
            this.QTS_GetProp = this.module.cwrap("QTS_GetProp", "number", ["number", "number", "number"]);
            this.QTS_SetProp = this.module.cwrap("QTS_SetProp", null, ["number", "number", "number", "number"]);
            this.QTS_DefineProp = this.module.cwrap("QTS_DefineProp", null, ["number", "number", "number", "number", "number", "number", "boolean", "boolean", "boolean"]);
            this.QTS_Call = this.module.cwrap("QTS_Call", "number", ["number", "number", "number", "number", "number"]);
            this.QTS_ResolveException = this.module.cwrap("QTS_ResolveException", "number", ["number", "number"]);
            this.QTS_Dump = this.module.cwrap("QTS_Dump", "number", ["number", "number"]);
            this.QTS_Eval = this.module.cwrap("QTS_Eval", "number", ["number", "number", "string", "number", "number"]);
            this.QTS_Typeof = this.module.cwrap("QTS_Typeof", "number", ["number", "number"]);
            this.QTS_GetGlobalObject = this.module.cwrap("QTS_GetGlobalObject", "number", ["number"]);
            this.QTS_NewPromiseCapability = this.module.cwrap("QTS_NewPromiseCapability", "number", ["number", "number"]);
            this.QTS_TestStringArg = this.module.cwrap("QTS_TestStringArg", null, ["string"]);
            this.QTS_BuildIsDebug = this.module.cwrap("QTS_BuildIsDebug", "number", []);
            this.QTS_BuildIsAsyncify = this.module.cwrap("QTS_BuildIsAsyncify", "number", []);
            this.QTS_NewFunction = this.module.cwrap("QTS_NewFunction", "number", ["number", "number", "string"]);
            this.QTS_ArgvGetJSValueConstPointer = this.module.cwrap("QTS_ArgvGetJSValueConstPointer", "number", ["number", "number"]);
            this.QTS_RuntimeEnableInterruptHandler = this.module.cwrap("QTS_RuntimeEnableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeDisableInterruptHandler = this.module.cwrap("QTS_RuntimeDisableInterruptHandler", null, ["number"]);
            this.QTS_RuntimeEnableModuleLoader = this.module.cwrap("QTS_RuntimeEnableModuleLoader", null, ["number", "number"]);
            this.QTS_RuntimeDisableModuleLoader = this.module.cwrap("QTS_RuntimeDisableModuleLoader", null, ["number"]);
          }
        }
        exports3.QuickJSFFI = QuickJSFFI;
      }, {}], 173: [function(require2, module3, exports3) {
        "use strict";
        var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        });
        var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        });
        var __exportStar = this && this.__exportStar || function(m, exports4) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports4, p))
              __createBinding(exports4, m, p);
        };
        var __importStar = this && this.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.shouldInterruptAfterDeadline = exports3.newAsyncContext = exports3.newAsyncRuntime = exports3.getQuickJSSync = exports3.getQuickJS = exports3.errors = exports3.RELEASE_SYNC = exports3.RELEASE_ASYNC = exports3.DEBUG_SYNC = exports3.DEBUG_ASYNC = exports3.newQuickJSAsyncWASMModule = exports3.newQuickJSWASMModule = void 0;
        const variants_1 = require2("./variants");
        Object.defineProperty(exports3, "newQuickJSWASMModule", { enumerable: true, get: function() {
          return variants_1.newQuickJSWASMModule;
        } });
        Object.defineProperty(exports3, "newQuickJSAsyncWASMModule", { enumerable: true, get: function() {
          return variants_1.newQuickJSAsyncWASMModule;
        } });
        Object.defineProperty(exports3, "DEBUG_ASYNC", { enumerable: true, get: function() {
          return variants_1.DEBUG_ASYNC;
        } });
        Object.defineProperty(exports3, "DEBUG_SYNC", { enumerable: true, get: function() {
          return variants_1.DEBUG_SYNC;
        } });
        Object.defineProperty(exports3, "RELEASE_ASYNC", { enumerable: true, get: function() {
          return variants_1.RELEASE_ASYNC;
        } });
        Object.defineProperty(exports3, "RELEASE_SYNC", { enumerable: true, get: function() {
          return variants_1.RELEASE_SYNC;
        } });
        __exportStar(require2("./vm-interface"), exports3);
        __exportStar(require2("./lifetime"), exports3);
        exports3.errors = __importStar(require2("./errors"));
        __exportStar(require2("./deferred-promise"), exports3);
        __exportStar(require2("./module-test"), exports3);
        let singleton = void 0;
        let singletonPromise = void 0;
        async function getQuickJS() {
          singletonPromise !== null && singletonPromise !== void 0 ? singletonPromise : singletonPromise = (0, variants_1.newQuickJSWASMModule)().then((instance) => {
            singleton = instance;
            return instance;
          });
          return await singletonPromise;
        }
        exports3.getQuickJS = getQuickJS;
        function getQuickJSSync() {
          if (!singleton) {
            throw new Error("QuickJS not initialized. Await getQuickJS() at least once.");
          }
          return singleton;
        }
        exports3.getQuickJSSync = getQuickJSSync;
        async function newAsyncRuntime(options) {
          const module4 = await (0, variants_1.newQuickJSAsyncWASMModule)();
          return module4.newRuntime(options);
        }
        exports3.newAsyncRuntime = newAsyncRuntime;
        async function newAsyncContext(options) {
          const module4 = await (0, variants_1.newQuickJSAsyncWASMModule)();
          return module4.newContext(options);
        }
        exports3.newAsyncContext = newAsyncContext;
        function shouldInterruptAfterDeadline(deadline) {
          const deadlineAsNumber = typeof deadline === "number" ? deadline : deadline.getTime();
          return function() {
            return Date.now() > deadlineAsNumber;
          };
        }
        exports3.shouldInterruptAfterDeadline = shouldInterruptAfterDeadline;
      }, { "./deferred-promise": 163, "./errors": 164, "./lifetime": 174, "./module-test": 177, "./variants": 183, "./vm-interface": 184 }], 174: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.Scope = exports3.WeakLifetime = exports3.StaticLifetime = exports3.Lifetime = void 0;
        const asyncify_helpers_1 = require2("./asyncify-helpers");
        const debug_1 = require2("./debug");
        const errors_1 = require2("./errors");
        class Lifetime {
          constructor(_value, copier, disposer, _owner) {
            this._value = _value;
            this.copier = copier;
            this.disposer = disposer;
            this._owner = _owner;
            this._alive = true;
            this._constructorStack = debug_1.QTS_DEBUG ? new Error("Lifetime constructed").stack : void 0;
          }
          get alive() {
            return this._alive;
          }
          get value() {
            this.assertAlive();
            return this._value;
          }
          get owner() {
            return this._owner;
          }
          get dupable() {
            return !!this.copier;
          }
          dup() {
            this.assertAlive();
            if (!this.copier) {
              throw new Error("Non-dupable lifetime");
            }
            return new Lifetime(this.copier(this._value), this.copier, this.disposer, this._owner);
          }
          consume(map) {
            this.assertAlive();
            const result = map(this);
            this.dispose();
            return result;
          }
          dispose() {
            this.assertAlive();
            if (this.disposer) {
              this.disposer(this._value);
            }
            this._alive = false;
          }
          assertAlive() {
            if (!this.alive) {
              if (this._constructorStack) {
                throw new errors_1.QuickJSUseAfterFree(`Lifetime not alive
${this._constructorStack}
Lifetime used`);
              }
              throw new errors_1.QuickJSUseAfterFree("Lifetime not alive");
            }
          }
        }
        exports3.Lifetime = Lifetime;
        class StaticLifetime extends Lifetime {
          constructor(value, owner) {
            super(value, void 0, void 0, owner);
          }
          get dupable() {
            return true;
          }
          dup() {
            return this;
          }
          dispose() {
          }
        }
        exports3.StaticLifetime = StaticLifetime;
        class WeakLifetime extends Lifetime {
          constructor(value, copier, disposer, owner) {
            super(value, copier, disposer, owner);
          }
          dispose() {
            this._alive = false;
          }
        }
        exports3.WeakLifetime = WeakLifetime;
        function scopeFinally(scope, blockError) {
          let disposeError;
          try {
            scope.dispose();
          } catch (error) {
            disposeError = error;
          }
          if (blockError && disposeError) {
            Object.assign(blockError, {
              message: `${blockError.message}
 Then, failed to dispose scope: ${disposeError.message}`,
              disposeError
            });
            throw blockError;
          }
          if (blockError || disposeError) {
            throw blockError || disposeError;
          }
        }
        class Scope {
          constructor() {
            this._disposables = new Lifetime(/* @__PURE__ */ new Set());
          }
          static withScope(block) {
            const scope = new Scope();
            let blockError;
            try {
              return block(scope);
            } catch (error) {
              blockError = error;
              throw error;
            } finally {
              scopeFinally(scope, blockError);
            }
          }
          static withScopeMaybeAsync(_this, block) {
            return (0, asyncify_helpers_1.maybeAsync)(void 0, function* (awaited) {
              const scope = new Scope();
              let blockError;
              try {
                return yield* awaited.of(block.call(_this, awaited, scope));
              } catch (error) {
                blockError = error;
                throw error;
              } finally {
                scopeFinally(scope, blockError);
              }
            });
          }
          static async withScopeAsync(block) {
            const scope = new Scope();
            let blockError;
            try {
              return await block(scope);
            } catch (error) {
              blockError = error;
              throw error;
            } finally {
              scopeFinally(scope, blockError);
            }
          }
          manage(lifetime) {
            this._disposables.value.add(lifetime);
            return lifetime;
          }
          get alive() {
            return this._disposables.alive;
          }
          dispose() {
            const lifetimes = Array.from(this._disposables.value.values()).reverse();
            for (const lifetime of lifetimes) {
              if (lifetime.alive) {
                lifetime.dispose();
              }
            }
            this._disposables.dispose();
          }
        }
        exports3.Scope = Scope;
      }, { "./asyncify-helpers": 159, "./debug": 162, "./errors": 164 }], 175: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.ModuleMemory = void 0;
        const lifetime_1 = require2("./lifetime");
        class ModuleMemory {
          constructor(module4) {
            this.module = module4;
          }
          toPointerArray(handleArray) {
            const typedArray = new Int32Array(handleArray.map((handle) => handle.value));
            const numBytes = typedArray.length * typedArray.BYTES_PER_ELEMENT;
            const ptr = this.module._malloc(numBytes);
            var heapBytes = new Uint8Array(this.module.HEAPU8.buffer, ptr, numBytes);
            heapBytes.set(new Uint8Array(typedArray.buffer));
            return new lifetime_1.Lifetime(ptr, void 0, (ptr2) => this.module._free(ptr2));
          }
          newMutablePointerArray(length) {
            const zeros = new Int32Array(new Array(length).fill(0));
            const numBytes = zeros.length * zeros.BYTES_PER_ELEMENT;
            const ptr = this.module._malloc(numBytes);
            const typedArray = new Int32Array(this.module.HEAPU8.buffer, ptr, length);
            typedArray.set(zeros);
            return new lifetime_1.Lifetime({ typedArray, ptr }, void 0, (value) => this.module._free(value.ptr));
          }
          newHeapCharPointer(string) {
            const numBytes = this.module.lengthBytesUTF8(string) + 1;
            const ptr = this.module._malloc(numBytes);
            this.module.stringToUTF8(string, ptr, numBytes);
            return new lifetime_1.Lifetime(ptr, void 0, (value) => this.module._free(value));
          }
          consumeHeapCharPointer(ptr) {
            const str = this.module.UTF8ToString(ptr);
            this.module._free(ptr);
            return str;
          }
        }
        exports3.ModuleMemory = ModuleMemory;
      }, { "./lifetime": 174 }], 176: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSAsyncWASMModule = void 0;
        const errors_1 = require2("./errors");
        const lifetime_1 = require2("./lifetime");
        const module_1 = require2("./module");
        const runtime_asyncify_1 = require2("./runtime-asyncify");
        class QuickJSAsyncWASMModule extends module_1.QuickJSWASMModule {
          constructor(module4, ffi) {
            super(module4, ffi);
            this.ffi = ffi;
            this.module = module4;
          }
          newRuntime(options = {}) {
            const rt = new lifetime_1.Lifetime(this.ffi.QTS_NewRuntime(), void 0, (rt_ptr) => {
              this.callbacks.deleteRuntime(rt_ptr);
              this.ffi.QTS_FreeRuntime(rt_ptr);
            });
            const runtime = new runtime_asyncify_1.QuickJSAsyncRuntime({
              module: this.module,
              ffi: this.ffi,
              rt,
              callbacks: this.callbacks
            });
            if (options.moduleLoader) {
              runtime.setModuleLoader(options.moduleLoader);
            }
            if (options.interruptHandler) {
              runtime.setInterruptHandler(options.interruptHandler);
            }
            return runtime;
          }
          newContext(options = {}) {
            const runtime = this.newRuntime();
            const lifetimes = options.ownedLifetimes ? options.ownedLifetimes.concat([runtime]) : [runtime];
            const context = runtime.newContext(Object.assign(Object.assign({}, options), { ownedLifetimes: lifetimes }));
            runtime.context = context;
            return context;
          }
          evalCode() {
            throw new errors_1.QuickJSNotImplemented("QuickJSWASMModuleAsyncify.evalCode: use evalCodeAsync instead");
          }
          evalCodeAsync(code, options) {
            return lifetime_1.Scope.withScopeAsync(async (scope) => {
              const vm = scope.manage(this.newContext());
              if (options.moduleLoader) {
                vm.runtime.setModuleLoader(options.moduleLoader);
              }
              if (options.shouldInterrupt) {
                vm.runtime.setInterruptHandler(options.shouldInterrupt);
              }
              if (options.memoryLimitBytes !== void 0) {
                vm.runtime.setMemoryLimit(options.memoryLimitBytes);
              }
              const result = await vm.evalCodeAsync(code, "eval.js");
              if (options.memoryLimitBytes !== void 0) {
                vm.runtime.setMemoryLimit(-1);
              }
              if (result.error) {
                const error = vm.dump(scope.manage(result.error));
                throw error;
              }
              const value = vm.dump(scope.manage(result.value));
              return value;
            });
          }
        }
        exports3.QuickJSAsyncWASMModule = QuickJSAsyncWASMModule;
      }, { "./errors": 164, "./lifetime": 174, "./module": 178, "./runtime-asyncify": 179 }], 177: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.TestQuickJSWASMModule = void 0;
        const errors_1 = require2("./errors");
        const lifetime_1 = require2("./lifetime");
        class TestQuickJSWASMModule {
          constructor(parent) {
            this.parent = parent;
            this.contexts = /* @__PURE__ */ new Set();
            this.runtimes = /* @__PURE__ */ new Set();
          }
          newRuntime(options) {
            var _a;
            const runtime = this.parent.newRuntime(Object.assign(Object.assign({}, options), { ownedLifetimes: [
              new lifetime_1.Lifetime(void 0, void 0, () => this.runtimes.delete(runtime)),
              ...(_a = options === null || options === void 0 ? void 0 : options.ownedLifetimes) !== null && _a !== void 0 ? _a : []
            ] }));
            this.runtimes.add(runtime);
            return runtime;
          }
          newContext(options) {
            var _a;
            const context = this.parent.newContext(Object.assign(Object.assign({}, options), { ownedLifetimes: [
              new lifetime_1.Lifetime(void 0, void 0, () => this.contexts.delete(context)),
              ...(_a = options === null || options === void 0 ? void 0 : options.ownedLifetimes) !== null && _a !== void 0 ? _a : []
            ] }));
            this.contexts.add(context);
            return context;
          }
          evalCode(code, options) {
            return this.parent.evalCode(code, options);
          }
          disposeAll() {
            const allDisposables = [...this.contexts, ...this.runtimes];
            this.runtimes.clear();
            this.contexts.clear();
            allDisposables.forEach((d) => {
              if (d.alive) {
                d.dispose();
              }
            });
          }
          assertNoMemoryAllocated() {
            const leaksDetected = this.getFFI().QTS_RecoverableLeakCheck();
            if (leaksDetected) {
              throw new errors_1.QuickJSMemoryLeakDetected("Leak sanitizer detected un-freed memory");
            }
            if (this.contexts.size > 0) {
              throw new errors_1.QuickJSMemoryLeakDetected(`${this.contexts.size} contexts leaked`);
            }
            if (this.runtimes.size > 0) {
              throw new errors_1.QuickJSMemoryLeakDetected(`${this.runtimes.size} runtimes leaked`);
            }
          }
          getFFI() {
            return this.parent.getFFI();
          }
        }
        exports3.TestQuickJSWASMModule = TestQuickJSWASMModule;
      }, { "./errors": 164, "./lifetime": 174 }], 178: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSWASMModule = exports3.QuickJSModuleCallbacks = void 0;
        const debug_1 = require2("./debug");
        const errors_1 = require2("./errors");
        const lifetime_1 = require2("./lifetime");
        const runtime_1 = require2("./runtime");
        const types_1 = require2("./types");
        class QuickJSEmscriptenModuleCallbacks {
          constructor(args) {
            this.callFunction = args.callFunction;
            this.shouldInterrupt = args.shouldInterrupt;
            this.loadModuleSource = args.loadModuleSource;
            this.normalizeModule = args.normalizeModule;
          }
        }
        class QuickJSModuleCallbacks {
          constructor(module4) {
            this.contextCallbacks = /* @__PURE__ */ new Map();
            this.runtimeCallbacks = /* @__PURE__ */ new Map();
            this.suspendedCount = 0;
            this.cToHostCallbacks = new QuickJSEmscriptenModuleCallbacks({
              callFunction: (asyncify, ctx, this_ptr, argc, argv, fn_id) => this.handleAsyncify(asyncify, () => {
                try {
                  const vm = this.contextCallbacks.get(ctx);
                  if (!vm) {
                    throw new Error(`QuickJSContext(ctx = ${ctx}) not found for C function call "${fn_id}"`);
                  }
                  return vm.callFunction(ctx, this_ptr, argc, argv, fn_id);
                } catch (error) {
                  console.error("[C to host error: returning null]", error);
                  return 0;
                }
              }),
              shouldInterrupt: (asyncify, rt) => this.handleAsyncify(asyncify, () => {
                try {
                  const vm = this.runtimeCallbacks.get(rt);
                  if (!vm) {
                    throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C interrupt`);
                  }
                  return vm.shouldInterrupt(rt);
                } catch (error) {
                  console.error("[C to host interrupt: returning error]", error);
                  return 1;
                }
              }),
              loadModuleSource: (asyncify, rt, ctx, moduleName) => this.handleAsyncify(asyncify, () => {
                try {
                  const runtimeCallbacks = this.runtimeCallbacks.get(rt);
                  if (!runtimeCallbacks) {
                    throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`);
                  }
                  const loadModule = runtimeCallbacks.loadModuleSource;
                  if (!loadModule) {
                    throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`);
                  }
                  return loadModule(rt, ctx, moduleName);
                } catch (error) {
                  console.error("[C to host module loader error: returning null]", error);
                  return 0;
                }
              }),
              normalizeModule: (asyncify, rt, ctx, moduleBaseName, moduleName) => this.handleAsyncify(asyncify, () => {
                try {
                  const runtimeCallbacks = this.runtimeCallbacks.get(rt);
                  if (!runtimeCallbacks) {
                    throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`);
                  }
                  const normalizeModule = runtimeCallbacks.normalizeModule;
                  if (!normalizeModule) {
                    throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`);
                  }
                  return normalizeModule(rt, ctx, moduleBaseName, moduleName);
                } catch (error) {
                  console.error("[C to host module loader error: returning null]", error);
                  return 0;
                }
              })
            });
            this.module = module4;
            this.module.callbacks = this.cToHostCallbacks;
          }
          setRuntimeCallbacks(rt, callbacks) {
            this.runtimeCallbacks.set(rt, callbacks);
          }
          deleteRuntime(rt) {
            this.runtimeCallbacks.delete(rt);
          }
          setContextCallbacks(ctx, callbacks) {
            this.contextCallbacks.set(ctx, callbacks);
          }
          deleteContext(ctx) {
            this.contextCallbacks.delete(ctx);
          }
          handleAsyncify(asyncify, fn) {
            if (asyncify) {
              return asyncify.handleSleep((done) => {
                try {
                  const result = fn();
                  if (!(result instanceof Promise)) {
                    (0, debug_1.debugLog)("asyncify.handleSleep: not suspending:", result);
                    done(result);
                    return;
                  }
                  if (this.suspended) {
                    throw new errors_1.QuickJSAsyncifyError(`Already suspended at: ${this.suspended.stack}
Attempted to suspend at:`);
                  } else {
                    this.suspended = new errors_1.QuickJSAsyncifySuspended(`(${this.suspendedCount++})`);
                    (0, debug_1.debugLog)("asyncify.handleSleep: suspending:", this.suspended);
                  }
                  result.then((resolvedResult) => {
                    this.suspended = void 0;
                    (0, debug_1.debugLog)("asyncify.handleSleep: resolved:", resolvedResult);
                    done(resolvedResult);
                  }, (error) => {
                    (0, debug_1.debugLog)("asyncify.handleSleep: rejected:", error);
                    console.error("QuickJS: cannot handle error in suspended function", error);
                    this.suspended = void 0;
                  });
                } catch (error) {
                  (0, debug_1.debugLog)("asyncify.handleSleep: error:", error);
                  this.suspended = void 0;
                  throw error;
                }
              });
            }
            const value = fn();
            if (value instanceof Promise) {
              throw new Error("Promise return value not supported in non-asyncify context.");
            }
            return value;
          }
        }
        exports3.QuickJSModuleCallbacks = QuickJSModuleCallbacks;
        class QuickJSWASMModule {
          constructor(module4, ffi) {
            this.module = module4;
            this.ffi = ffi;
            this.callbacks = new QuickJSModuleCallbacks(module4);
          }
          newRuntime(options = {}) {
            const rt = new lifetime_1.Lifetime(this.ffi.QTS_NewRuntime(), void 0, (rt_ptr) => {
              this.callbacks.deleteRuntime(rt_ptr);
              this.ffi.QTS_FreeRuntime(rt_ptr);
            });
            const runtime = new runtime_1.QuickJSRuntime({
              module: this.module,
              callbacks: this.callbacks,
              ffi: this.ffi,
              rt
            });
            if (options.moduleLoader) {
              runtime.setModuleLoader(options.moduleLoader);
            }
            if (options.interruptHandler) {
              runtime.setInterruptHandler(options.interruptHandler);
            }
            return runtime;
          }
          newContext(options = {}) {
            const runtime = this.newRuntime();
            const context = runtime.newContext(Object.assign(Object.assign({}, options), { ownedLifetimes: (0, types_1.concat)(runtime, options.ownedLifetimes) }));
            runtime.context = context;
            return context;
          }
          evalCode(code, options = {}) {
            return lifetime_1.Scope.withScope((scope) => {
              const vm = scope.manage(this.newContext());
              if (options.moduleLoader) {
                vm.runtime.setModuleLoader(options.moduleLoader);
              }
              if (options.shouldInterrupt) {
                vm.runtime.setInterruptHandler(options.shouldInterrupt);
              }
              if (options.memoryLimitBytes !== void 0) {
                vm.runtime.setMemoryLimit(options.memoryLimitBytes);
              }
              const result = vm.evalCode(code, "eval.js");
              if (options.memoryLimitBytes !== void 0) {
                vm.runtime.setMemoryLimit(-1);
              }
              if (result.error) {
                const error = vm.dump(scope.manage(result.error));
                throw error;
              }
              const value = vm.dump(scope.manage(result.value));
              return value;
            });
          }
          getFFI() {
            return this.ffi;
          }
        }
        exports3.QuickJSWASMModule = QuickJSWASMModule;
      }, { "./debug": 162, "./errors": 164, "./lifetime": 174, "./runtime": 180, "./types": 182 }], 179: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSAsyncRuntime = void 0;
        const _1 = require2(".");
        const context_asyncify_1 = require2("./context-asyncify");
        const runtime_1 = require2("./runtime");
        const types_1 = require2("./types");
        class QuickJSAsyncRuntime extends runtime_1.QuickJSRuntime {
          constructor(args) {
            super(args);
          }
          newContext(options = {}) {
            if (options.intrinsics && options.intrinsics !== types_1.DefaultIntrinsics) {
              throw new Error("TODO: Custom intrinsics are not supported yet");
            }
            const ctx = new _1.Lifetime(this.ffi.QTS_NewContext(this.rt.value), void 0, (ctx_ptr) => {
              this.contextMap.delete(ctx_ptr);
              this.callbacks.deleteContext(ctx_ptr);
              this.ffi.QTS_FreeContext(ctx_ptr);
            });
            const context = new context_asyncify_1.QuickJSAsyncContext({
              module: this.module,
              ctx,
              ffi: this.ffi,
              rt: this.rt,
              ownedLifetimes: [],
              runtime: this,
              callbacks: this.callbacks
            });
            this.contextMap.set(ctx.value, context);
            return context;
          }
          setModuleLoader(moduleLoader, moduleNormalizer) {
            super.setModuleLoader(moduleLoader, moduleNormalizer);
          }
        }
        exports3.QuickJSAsyncRuntime = QuickJSAsyncRuntime;
      }, { ".": 173, "./context-asyncify": 160, "./runtime": 180, "./types": 182 }], 180: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.QuickJSRuntime = void 0;
        const asyncify_helpers_1 = require2("./asyncify-helpers");
        const context_1 = require2("./context");
        const debug_1 = require2("./debug");
        const errors_1 = require2("./errors");
        const lifetime_1 = require2("./lifetime");
        const memory_1 = require2("./memory");
        const types_1 = require2("./types");
        class QuickJSRuntime {
          constructor(args) {
            var _a;
            this.scope = new lifetime_1.Scope();
            this.contextMap = /* @__PURE__ */ new Map();
            this.cToHostCallbacks = {
              shouldInterrupt: (rt) => {
                if (rt !== this.rt.value) {
                  throw new Error("QuickJSContext instance received C -> JS interrupt with mismatched rt");
                }
                const fn = this.interruptHandler;
                if (!fn) {
                  throw new Error("QuickJSContext had no interrupt handler");
                }
                return fn(this) ? 1 : 0;
              },
              loadModuleSource: (0, asyncify_helpers_1.maybeAsyncFn)(this, function* (awaited, rt, ctx, moduleName) {
                var _a2;
                const moduleLoader = this.moduleLoader;
                if (!moduleLoader) {
                  throw new Error("Runtime has no module loader");
                }
                if (rt !== this.rt.value) {
                  throw new Error("Runtime pointer mismatch");
                }
                const context = (_a2 = this.contextMap.get(ctx)) !== null && _a2 !== void 0 ? _a2 : this.newContext({
                  contextPointer: ctx
                });
                try {
                  const result = yield* awaited(moduleLoader(moduleName, context));
                  if (typeof result === "object" && "error" in result && result.error) {
                    (0, debug_1.debugLog)("cToHostLoadModule: loader returned error", result.error);
                    throw result.error;
                  }
                  const moduleSource = typeof result === "string" ? result : "value" in result ? result.value : result;
                  return this.memory.newHeapCharPointer(moduleSource).value;
                } catch (error) {
                  (0, debug_1.debugLog)("cToHostLoadModule: caught error", error);
                  context.throw(error);
                  return 0;
                }
              }),
              normalizeModule: (0, asyncify_helpers_1.maybeAsyncFn)(this, function* (awaited, rt, ctx, baseModuleName, moduleNameRequest) {
                var _a2;
                const moduleNormalizer = this.moduleNormalizer;
                if (!moduleNormalizer) {
                  throw new Error("Runtime has no module normalizer");
                }
                if (rt !== this.rt.value) {
                  throw new Error("Runtime pointer mismatch");
                }
                const context = (_a2 = this.contextMap.get(ctx)) !== null && _a2 !== void 0 ? _a2 : this.newContext({
                  contextPointer: ctx
                });
                try {
                  const result = yield* awaited(moduleNormalizer(baseModuleName, moduleNameRequest, context));
                  if (typeof result === "object" && "error" in result && result.error) {
                    (0, debug_1.debugLog)("cToHostNormalizeModule: normalizer returned error", result.error);
                    throw result.error;
                  }
                  const name = typeof result === "string" ? result : result.value;
                  return context.getMemory(this.rt.value).newHeapCharPointer(name).value;
                } catch (error) {
                  (0, debug_1.debugLog)("normalizeModule: caught error", error);
                  context.throw(error);
                  return 0;
                }
              })
            };
            (_a = args.ownedLifetimes) === null || _a === void 0 ? void 0 : _a.forEach((lifetime) => this.scope.manage(lifetime));
            this.module = args.module;
            this.memory = new memory_1.ModuleMemory(this.module);
            this.ffi = args.ffi;
            this.rt = args.rt;
            this.callbacks = args.callbacks;
            this.scope.manage(this.rt);
            this.callbacks.setRuntimeCallbacks(this.rt.value, this.cToHostCallbacks);
            this.executePendingJobs = this.executePendingJobs.bind(this);
          }
          get alive() {
            return this.scope.alive;
          }
          dispose() {
            return this.scope.dispose();
          }
          newContext(options = {}) {
            if (options.intrinsics && options.intrinsics !== types_1.DefaultIntrinsics) {
              throw new Error("TODO: Custom intrinsics are not supported yet");
            }
            const ctx = new lifetime_1.Lifetime(options.contextPointer || this.ffi.QTS_NewContext(this.rt.value), void 0, (ctx_ptr) => {
              this.contextMap.delete(ctx_ptr);
              this.callbacks.deleteContext(ctx_ptr);
              this.ffi.QTS_FreeContext(ctx_ptr);
            });
            const context = new context_1.QuickJSContext({
              module: this.module,
              ctx,
              ffi: this.ffi,
              rt: this.rt,
              ownedLifetimes: options.ownedLifetimes,
              runtime: this,
              callbacks: this.callbacks
            });
            this.contextMap.set(ctx.value, context);
            return context;
          }
          setModuleLoader(moduleLoader, moduleNormalizer) {
            this.moduleLoader = moduleLoader;
            this.moduleNormalizer = moduleNormalizer;
            this.ffi.QTS_RuntimeEnableModuleLoader(this.rt.value, this.moduleNormalizer ? 1 : 0);
          }
          removeModuleLoader() {
            this.moduleLoader = void 0;
            this.ffi.QTS_RuntimeDisableModuleLoader(this.rt.value);
          }
          hasPendingJob() {
            return Boolean(this.ffi.QTS_IsJobPending(this.rt.value));
          }
          setInterruptHandler(cb) {
            const prevInterruptHandler = this.interruptHandler;
            this.interruptHandler = cb;
            if (!prevInterruptHandler) {
              this.ffi.QTS_RuntimeEnableInterruptHandler(this.rt.value);
            }
          }
          removeInterruptHandler() {
            if (this.interruptHandler) {
              this.ffi.QTS_RuntimeDisableInterruptHandler(this.rt.value);
              this.interruptHandler = void 0;
            }
          }
          executePendingJobs(maxJobsToExecute = -1) {
            var _a;
            const ctxPtrOut = this.memory.newMutablePointerArray(1);
            const valuePtr = this.ffi.QTS_ExecutePendingJob(this.rt.value, maxJobsToExecute !== null && maxJobsToExecute !== void 0 ? maxJobsToExecute : -1, ctxPtrOut.value.ptr);
            const ctxPtr = ctxPtrOut.value.typedArray[0];
            ctxPtrOut.dispose();
            if (ctxPtr === 0) {
              this.ffi.QTS_FreeValuePointerRuntime(this.rt.value, valuePtr);
              return { value: 0 };
            }
            const context = (_a = this.contextMap.get(ctxPtr)) !== null && _a !== void 0 ? _a : this.newContext({
              contextPointer: ctxPtr
            });
            const resultValue = context.getMemory(this.rt.value).heapValueHandle(valuePtr);
            const typeOfRet = context.typeof(resultValue);
            if (typeOfRet === "number") {
              const executedJobs = context.getNumber(resultValue);
              resultValue.dispose();
              return { value: executedJobs };
            } else {
              const error = Object.assign(resultValue, { context });
              return {
                error
              };
            }
          }
          setMemoryLimit(limitBytes) {
            if (limitBytes < 0 && limitBytes !== -1) {
              throw new Error("Cannot set memory limit to negative number. To unset, pass -1");
            }
            this.ffi.QTS_RuntimeSetMemoryLimit(this.rt.value, limitBytes);
          }
          computeMemoryUsage() {
            const serviceContextMemory = this.getSystemContext().getMemory(this.rt.value);
            return serviceContextMemory.heapValueHandle(this.ffi.QTS_RuntimeComputeMemoryUsage(this.rt.value, serviceContextMemory.ctx.value));
          }
          dumpMemoryUsage() {
            return this.memory.consumeHeapCharPointer(this.ffi.QTS_RuntimeDumpMemoryUsage(this.rt.value));
          }
          assertOwned(handle) {
            if (handle.owner && handle.owner.rt !== this.rt) {
              throw new errors_1.QuickJSWrongOwner(`Handle is not owned by this runtime: ${handle.owner.rt.value} != ${this.rt.value}`);
            }
          }
          getSystemContext() {
            if (!this.context) {
              this.context = this.scope.manage(this.newContext());
            }
            return this.context;
          }
        }
        exports3.QuickJSRuntime = QuickJSRuntime;
      }, { "./asyncify-helpers": 159, "./context": 161, "./debug": 162, "./errors": 164, "./lifetime": 174, "./memory": 175, "./types": 182 }], 181: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.EvalFlags = exports3.assertSync = void 0;
        function assertSync(fn) {
          return function mustBeSync(...args) {
            const result = fn(...args);
            if (result && typeof result === "object" && result instanceof Promise) {
              throw new Error("Function unexpectedly returned a Promise");
            }
            return result;
          };
        }
        exports3.assertSync = assertSync;
        exports3.EvalFlags = {
          JS_EVAL_TYPE_GLOBAL: 0 << 0,
          JS_EVAL_TYPE_MODULE: 1 << 0,
          JS_EVAL_TYPE_DIRECT: 2 << 0,
          JS_EVAL_TYPE_INDIRECT: 3 << 0,
          JS_EVAL_TYPE_MASK: 3 << 0,
          JS_EVAL_FLAG_STRICT: 1 << 3,
          JS_EVAL_FLAG_STRIP: 1 << 4,
          JS_EVAL_FLAG_COMPILE_ONLY: 1 << 5,
          JS_EVAL_FLAG_BACKTRACE_BARRIER: 1 << 6
        };
      }, {}], 182: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.concat = exports3.evalOptionsToFlags = exports3.DefaultIntrinsics = void 0;
        const types_ffi_1 = require2("./types-ffi");
        const UnstableSymbol = Symbol("Unstable");
        const DefaultIntrinsicsList = [
          "BaseObjects",
          "Date",
          "Eval",
          "StringNormalize",
          "RegExp",
          "JSON",
          "Proxy",
          "MapSet",
          "TypedArrays",
          "Promise"
        ];
        exports3.DefaultIntrinsics = Symbol("DefaultIntrinsics");
        function evalOptionsToFlags(evalOptions) {
          if (typeof evalOptions === "number") {
            return evalOptions;
          }
          if (evalOptions === void 0) {
            return 0;
          }
          const { type, strict, strip, compileOnly, backtraceBarrier } = evalOptions;
          let flags = 0;
          if (type === "global")
            flags |= types_ffi_1.EvalFlags.JS_EVAL_TYPE_GLOBAL;
          if (type === "module")
            flags |= types_ffi_1.EvalFlags.JS_EVAL_TYPE_MODULE;
          if (strict)
            flags |= types_ffi_1.EvalFlags.JS_EVAL_FLAG_STRICT;
          if (strip)
            flags |= types_ffi_1.EvalFlags.JS_EVAL_FLAG_STRIP;
          if (compileOnly)
            flags |= types_ffi_1.EvalFlags.JS_EVAL_FLAG_COMPILE_ONLY;
          if (backtraceBarrier)
            flags |= types_ffi_1.EvalFlags.JS_EVAL_FLAG_BACKTRACE_BARRIER;
          return flags;
        }
        exports3.evalOptionsToFlags = evalOptionsToFlags;
        function concat(...values) {
          let result = [];
          for (const value of values) {
            if (value !== void 0) {
              result = result.concat(value);
            }
          }
          return result;
        }
        exports3.concat = concat;
      }, { "./types-ffi": 181 }], 183: [function(require2, module3, exports3) {
        "use strict";
        var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        });
        var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        });
        var __importStar = this && this.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.RELEASE_ASYNC = exports3.DEBUG_ASYNC = exports3.RELEASE_SYNC = exports3.DEBUG_SYNC = exports3.memoizePromiseFactory = exports3.newQuickJSAsyncWASMModule = exports3.newQuickJSWASMModule = void 0;
        async function newQuickJSWASMModule(variant = exports3.RELEASE_SYNC) {
          const [wasmModuleLoader, QuickJSFFI, { QuickJSWASMModule }] = await Promise.all([
            variant.importModuleLoader(),
            variant.importFFI(),
            Promise.resolve().then(() => __importStar(require2("./module")))
          ]);
          const wasmModule = await wasmModuleLoader();
          wasmModule.type = "sync";
          const ffi = new QuickJSFFI(wasmModule);
          return new QuickJSWASMModule(wasmModule, ffi);
        }
        exports3.newQuickJSWASMModule = newQuickJSWASMModule;
        async function newQuickJSAsyncWASMModule(variant = exports3.RELEASE_ASYNC) {
          const [wasmModuleLoader, QuickJSAsyncFFI, { QuickJSAsyncWASMModule }] = await Promise.all([
            variant.importModuleLoader(),
            variant.importFFI(),
            Promise.resolve().then(() => __importStar(require2("./module-asyncify")))
          ]);
          const wasmModule = await wasmModuleLoader();
          wasmModule.type = "async";
          const ffi = new QuickJSAsyncFFI(wasmModule);
          return new QuickJSAsyncWASMModule(wasmModule, ffi);
        }
        exports3.newQuickJSAsyncWASMModule = newQuickJSAsyncWASMModule;
        function memoizePromiseFactory(fn) {
          let promise;
          return () => {
            return promise !== null && promise !== void 0 ? promise : promise = fn();
          };
        }
        exports3.memoizePromiseFactory = memoizePromiseFactory;
        exports3.DEBUG_SYNC = {
          type: "sync",
          async importFFI() {
            const { QuickJSFFI } = await Promise.resolve().then(() => __importStar(require2("./generated/ffi.WASM_DEBUG_SYNC")));
            return QuickJSFFI;
          },
          async importModuleLoader() {
            const { default: wasmModuleLoader } = await Promise.resolve().then(() => __importStar(require2("./generated/emscripten-module.WASM_DEBUG_SYNC")));
            return wasmModuleLoader;
          }
        };
        exports3.RELEASE_SYNC = {
          type: "sync",
          async importFFI() {
            const { QuickJSFFI } = await Promise.resolve().then(() => __importStar(require2("./generated/ffi.WASM_RELEASE_SYNC")));
            return QuickJSFFI;
          },
          async importModuleLoader() {
            const { default: wasmModuleLoader } = await Promise.resolve().then(() => __importStar(require2("./generated/emscripten-module.WASM_RELEASE_SYNC")));
            return wasmModuleLoader;
          }
        };
        exports3.DEBUG_ASYNC = {
          type: "async",
          async importFFI() {
            const { QuickJSAsyncFFI } = await Promise.resolve().then(() => __importStar(require2("./generated/ffi.WASM_DEBUG_ASYNCIFY")));
            return QuickJSAsyncFFI;
          },
          async importModuleLoader() {
            const { default: wasmModuleLoader } = await Promise.resolve().then(() => __importStar(require2("./generated/emscripten-module.WASM_DEBUG_ASYNCIFY")));
            return wasmModuleLoader;
          }
        };
        exports3.RELEASE_ASYNC = {
          type: "async",
          async importFFI() {
            const { QuickJSAsyncFFI } = await Promise.resolve().then(() => __importStar(require2("./generated/ffi.WASM_RELEASE_ASYNCIFY")));
            return QuickJSAsyncFFI;
          },
          async importModuleLoader() {
            const { default: wasmModuleLoader } = await Promise.resolve().then(() => __importStar(require2("./generated/emscripten-module.WASM_RELEASE_ASYNCIFY")));
            return wasmModuleLoader;
          }
        };
      }, { "./generated/emscripten-module.WASM_DEBUG_ASYNCIFY": 165, "./generated/emscripten-module.WASM_DEBUG_SYNC": 166, "./generated/emscripten-module.WASM_RELEASE_ASYNCIFY": 167, "./generated/emscripten-module.WASM_RELEASE_SYNC": 168, "./generated/ffi.WASM_DEBUG_ASYNCIFY": 169, "./generated/ffi.WASM_DEBUG_SYNC": 170, "./generated/ffi.WASM_RELEASE_ASYNCIFY": 171, "./generated/ffi.WASM_RELEASE_SYNC": 172, "./module": 178, "./module-asyncify": 176 }], 184: [function(require2, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        exports3.isFail = exports3.isSuccess = void 0;
        function isSuccess(successOrFail) {
          return "error" in successOrFail === false;
        }
        exports3.isSuccess = isSuccess;
        function isFail(successOrFail) {
          return "error" in successOrFail === true;
        }
        exports3.isFail = isFail;
      }, {}], 185: [function(require2, module3, exports3) {
        (function(process, global2) {
          (function() {
            "use strict";
            var MAX_BYTES = 65536;
            var MAX_UINT32 = 4294967295;
            function oldBrowser() {
              throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
            }
            var Buffer2 = require2("safe-buffer").Buffer;
            var crypto2 = global2.crypto || global2.msCrypto;
            if (crypto2 && crypto2.getRandomValues) {
              module3.exports = randomBytes;
            } else {
              module3.exports = oldBrowser;
            }
            function randomBytes(size, cb) {
              if (size > MAX_UINT32)
                throw new RangeError("requested too many random bytes");
              var bytes = Buffer2.allocUnsafe(size);
              if (size > 0) {
                if (size > MAX_BYTES) {
                  for (var generated = 0; generated < size; generated += MAX_BYTES) {
                    crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
                  }
                } else {
                  crypto2.getRandomValues(bytes);
                }
              }
              if (typeof cb === "function") {
                return process.nextTick(function() {
                  cb(null, bytes);
                });
              }
              return bytes;
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "_process": 151, "safe-buffer": 188 }], 186: [function(require2, module3, exports3) {
        (function(process, global2) {
          (function() {
            "use strict";
            function oldBrowser() {
              throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
            }
            var safeBuffer = require2("safe-buffer");
            var randombytes = require2("randombytes");
            var Buffer2 = safeBuffer.Buffer;
            var kBufferMaxLength = safeBuffer.kMaxLength;
            var crypto2 = global2.crypto || global2.msCrypto;
            var kMaxUint32 = Math.pow(2, 32) - 1;
            function assertOffset(offset, length) {
              if (typeof offset !== "number" || offset !== offset) {
                throw new TypeError("offset must be a number");
              }
              if (offset > kMaxUint32 || offset < 0) {
                throw new TypeError("offset must be a uint32");
              }
              if (offset > kBufferMaxLength || offset > length) {
                throw new RangeError("offset out of range");
              }
            }
            function assertSize(size, offset, length) {
              if (typeof size !== "number" || size !== size) {
                throw new TypeError("size must be a number");
              }
              if (size > kMaxUint32 || size < 0) {
                throw new TypeError("size must be a uint32");
              }
              if (size + offset > length || size > kBufferMaxLength) {
                throw new RangeError("buffer too small");
              }
            }
            if (crypto2 && crypto2.getRandomValues || !process.browser) {
              exports3.randomFill = randomFill;
              exports3.randomFillSync = randomFillSync;
            } else {
              exports3.randomFill = oldBrowser;
              exports3.randomFillSync = oldBrowser;
            }
            function randomFill(buf, offset, size, cb) {
              if (!Buffer2.isBuffer(buf) && !(buf instanceof global2.Uint8Array)) {
                throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
              }
              if (typeof offset === "function") {
                cb = offset;
                offset = 0;
                size = buf.length;
              } else if (typeof size === "function") {
                cb = size;
                size = buf.length - offset;
              } else if (typeof cb !== "function") {
                throw new TypeError('"cb" argument must be a function');
              }
              assertOffset(offset, buf.length);
              assertSize(size, offset, buf.length);
              return actualFill(buf, offset, size, cb);
            }
            function actualFill(buf, offset, size, cb) {
              if (process.browser) {
                var ourBuf = buf.buffer;
                var uint = new Uint8Array(ourBuf, offset, size);
                crypto2.getRandomValues(uint);
                if (cb) {
                  process.nextTick(function() {
                    cb(null, buf);
                  });
                  return;
                }
                return buf;
              }
              if (cb) {
                randombytes(size, function(err, bytes2) {
                  if (err) {
                    return cb(err);
                  }
                  bytes2.copy(buf, offset);
                  cb(null, buf);
                });
                return;
              }
              var bytes = randombytes(size);
              bytes.copy(buf, offset);
              return buf;
            }
            function randomFillSync(buf, offset, size) {
              if (typeof offset === "undefined") {
                offset = 0;
              }
              if (!Buffer2.isBuffer(buf) && !(buf instanceof global2.Uint8Array)) {
                throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
              }
              assertOffset(offset, buf.length);
              if (size === void 0)
                size = buf.length - offset;
              assertSize(size, offset, buf.length);
              return actualFill(buf, offset, size);
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "_process": 151, "randombytes": 185, "safe-buffer": 188 }], 187: [function(require2, module3, exports3) {
        "use strict";
        var Buffer2 = require2("buffer").Buffer;
        var inherits = require2("inherits");
        var HashBase = require2("hash-base");
        var ARRAY16 = new Array(16);
        var zl = [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ];
        var zr = [
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ];
        var sl = [
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ];
        var sr = [
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ];
        var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
        var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
        function RIPEMD160() {
          HashBase.call(this, 64);
          this._a = 1732584193;
          this._b = 4023233417;
          this._c = 2562383102;
          this._d = 271733878;
          this._e = 3285377520;
        }
        inherits(RIPEMD160, HashBase);
        RIPEMD160.prototype._update = function() {
          var words = ARRAY16;
          for (var j = 0; j < 16; ++j)
            words[j] = this._block.readInt32LE(j * 4);
          var al = this._a | 0;
          var bl = this._b | 0;
          var cl = this._c | 0;
          var dl = this._d | 0;
          var el = this._e | 0;
          var ar = this._a | 0;
          var br = this._b | 0;
          var cr = this._c | 0;
          var dr = this._d | 0;
          var er = this._e | 0;
          for (var i = 0; i < 80; i += 1) {
            var tl;
            var tr;
            if (i < 16) {
              tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
              tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
            } else if (i < 32) {
              tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
              tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
            } else if (i < 48) {
              tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
              tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
            } else if (i < 64) {
              tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
              tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
            } else {
              tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
              tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
            }
            al = el;
            el = dl;
            dl = rotl(cl, 10);
            cl = bl;
            bl = tl;
            ar = er;
            er = dr;
            dr = rotl(cr, 10);
            cr = br;
            br = tr;
          }
          var t = this._b + cl + dr | 0;
          this._b = this._c + dl + er | 0;
          this._c = this._d + el + ar | 0;
          this._d = this._e + al + br | 0;
          this._e = this._a + bl + cr | 0;
          this._a = t;
        };
        RIPEMD160.prototype._digest = function() {
          this._block[this._blockOffset++] = 128;
          if (this._blockOffset > 56) {
            this._block.fill(0, this._blockOffset, 64);
            this._update();
            this._blockOffset = 0;
          }
          this._block.fill(0, this._blockOffset, 56);
          this._block.writeUInt32LE(this._length[0], 56);
          this._block.writeUInt32LE(this._length[1], 60);
          this._update();
          var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
          buffer.writeInt32LE(this._a, 0);
          buffer.writeInt32LE(this._b, 4);
          buffer.writeInt32LE(this._c, 8);
          buffer.writeInt32LE(this._d, 12);
          buffer.writeInt32LE(this._e, 16);
          return buffer;
        };
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        function fn1(a, b, c, d, e, m, k, s) {
          return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
        }
        function fn2(a, b, c, d, e, m, k, s) {
          return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
        }
        function fn3(a, b, c, d, e, m, k, s) {
          return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
        }
        function fn4(a, b, c, d, e, m, k, s) {
          return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
        }
        function fn5(a, b, c, d, e, m, k, s) {
          return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
        }
        module3.exports = RIPEMD160;
      }, { "buffer": 63, "hash-base": 103, "inherits": 133 }], 188: [function(require2, module3, exports3) {
        /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
        var buffer = require2("buffer");
        var Buffer2 = buffer.Buffer;
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
          module3.exports = buffer;
        } else {
          copyProps(buffer, exports3);
          exports3.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer2(arg, encodingOrOffset, length);
        }
        SafeBuffer.prototype = Object.create(Buffer2.prototype);
        copyProps(Buffer2, SafeBuffer);
        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer2(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer2(size);
          if (fill !== void 0) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };
        SafeBuffer.allocUnsafe = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer2(size);
        };
        SafeBuffer.allocUnsafeSlow = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer.SlowBuffer(size);
        };
      }, { "buffer": 63 }], 189: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            "use strict";
            var buffer = require2("buffer");
            var Buffer2 = buffer.Buffer;
            var safer = {};
            var key;
            for (key in buffer) {
              if (!buffer.hasOwnProperty(key))
                continue;
              if (key === "SlowBuffer" || key === "Buffer")
                continue;
              safer[key] = buffer[key];
            }
            var Safer = safer.Buffer = {};
            for (key in Buffer2) {
              if (!Buffer2.hasOwnProperty(key))
                continue;
              if (key === "allocUnsafe" || key === "allocUnsafeSlow")
                continue;
              Safer[key] = Buffer2[key];
            }
            safer.Buffer.prototype = Buffer2.prototype;
            if (!Safer.from || Safer.from === Uint8Array.from) {
              Safer.from = function(value, encodingOrOffset, length) {
                if (typeof value === "number") {
                  throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
                }
                if (value && typeof value.length === "undefined") {
                  throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
                }
                return Buffer2(value, encodingOrOffset, length);
              };
            }
            if (!Safer.alloc) {
              Safer.alloc = function(size, fill, encoding) {
                if (typeof size !== "number") {
                  throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
                }
                if (size < 0 || size >= 2 * (1 << 30)) {
                  throw new RangeError('The value "' + size + '" is invalid for option "size"');
                }
                var buf = Buffer2(size);
                if (!fill || fill.length === 0) {
                  buf.fill(0);
                } else if (typeof encoding === "string") {
                  buf.fill(fill, encoding);
                } else {
                  buf.fill(fill);
                }
                return buf;
              };
            }
            if (!safer.kStringMaxLength) {
              try {
                safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
              } catch (e) {
              }
            }
            if (!safer.constants) {
              safer.constants = {
                MAX_LENGTH: safer.kMaxLength
              };
              if (safer.kStringMaxLength) {
                safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
              }
            }
            module3.exports = safer;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 151, "buffer": 63 }], 190: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        function Hash(blockSize, finalSize) {
          this._block = Buffer2.alloc(blockSize);
          this._finalSize = finalSize;
          this._blockSize = blockSize;
          this._len = 0;
        }
        Hash.prototype.update = function(data, enc) {
          if (typeof data === "string") {
            enc = enc || "utf8";
            data = Buffer2.from(data, enc);
          }
          var block = this._block;
          var blockSize = this._blockSize;
          var length = data.length;
          var accum = this._len;
          for (var offset = 0; offset < length; ) {
            var assigned = accum % blockSize;
            var remainder = Math.min(length - offset, blockSize - assigned);
            for (var i = 0; i < remainder; i++) {
              block[assigned + i] = data[offset + i];
            }
            accum += remainder;
            offset += remainder;
            if (accum % blockSize === 0) {
              this._update(block);
            }
          }
          this._len += length;
          return this;
        };
        Hash.prototype.digest = function(enc) {
          var rem = this._len % this._blockSize;
          this._block[rem] = 128;
          this._block.fill(0, rem + 1);
          if (rem >= this._finalSize) {
            this._update(this._block);
            this._block.fill(0);
          }
          var bits = this._len * 8;
          if (bits <= 4294967295) {
            this._block.writeUInt32BE(bits, this._blockSize - 4);
          } else {
            var lowBits = (bits & 4294967295) >>> 0;
            var highBits = (bits - lowBits) / 4294967296;
            this._block.writeUInt32BE(highBits, this._blockSize - 8);
            this._block.writeUInt32BE(lowBits, this._blockSize - 4);
          }
          this._update(this._block);
          var hash = this._hash();
          return enc ? hash.toString(enc) : hash;
        };
        Hash.prototype._update = function() {
          throw new Error("_update must be implemented by subclass");
        };
        module3.exports = Hash;
      }, { "safe-buffer": 188 }], 191: [function(require2, module3, exports3) {
        var exports3 = module3.exports = function SHA(algorithm) {
          algorithm = algorithm.toLowerCase();
          var Algorithm = exports3[algorithm];
          if (!Algorithm)
            throw new Error(algorithm + " is not supported (we accept pull requests)");
          return new Algorithm();
        };
        exports3.sha = require2("./sha");
        exports3.sha1 = require2("./sha1");
        exports3.sha224 = require2("./sha224");
        exports3.sha256 = require2("./sha256");
        exports3.sha384 = require2("./sha384");
        exports3.sha512 = require2("./sha512");
      }, { "./sha": 192, "./sha1": 193, "./sha224": 194, "./sha256": 195, "./sha384": 196, "./sha512": 197 }], 192: [function(require2, module3, exports3) {
        var inherits = require2("inherits");
        var Hash = require2("./hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        var K = [
          1518500249,
          1859775393,
          2400959708 | 0,
          3395469782 | 0
        ];
        var W = new Array(80);
        function Sha() {
          this.init();
          this._w = W;
          Hash.call(this, 64, 56);
        }
        inherits(Sha, Hash);
        Sha.prototype.init = function() {
          this._a = 1732584193;
          this._b = 4023233417;
          this._c = 2562383102;
          this._d = 271733878;
          this._e = 3285377520;
          return this;
        };
        function rotl5(num) {
          return num << 5 | num >>> 27;
        }
        function rotl30(num) {
          return num << 30 | num >>> 2;
        }
        function ft(s, b, c, d) {
          if (s === 0)
            return b & c | ~b & d;
          if (s === 2)
            return b & c | b & d | c & d;
          return b ^ c ^ d;
        }
        Sha.prototype._update = function(M) {
          var W2 = this._w;
          var a = this._a | 0;
          var b = this._b | 0;
          var c = this._c | 0;
          var d = this._d | 0;
          var e = this._e | 0;
          for (var i = 0; i < 16; ++i)
            W2[i] = M.readInt32BE(i * 4);
          for (; i < 80; ++i)
            W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
          for (var j = 0; j < 80; ++j) {
            var s = ~~(j / 20);
            var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
            e = d;
            d = c;
            c = rotl30(b);
            b = a;
            a = t;
          }
          this._a = a + this._a | 0;
          this._b = b + this._b | 0;
          this._c = c + this._c | 0;
          this._d = d + this._d | 0;
          this._e = e + this._e | 0;
        };
        Sha.prototype._hash = function() {
          var H = Buffer2.allocUnsafe(20);
          H.writeInt32BE(this._a | 0, 0);
          H.writeInt32BE(this._b | 0, 4);
          H.writeInt32BE(this._c | 0, 8);
          H.writeInt32BE(this._d | 0, 12);
          H.writeInt32BE(this._e | 0, 16);
          return H;
        };
        module3.exports = Sha;
      }, { "./hash": 190, "inherits": 133, "safe-buffer": 188 }], 193: [function(require2, module3, exports3) {
        var inherits = require2("inherits");
        var Hash = require2("./hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        var K = [
          1518500249,
          1859775393,
          2400959708 | 0,
          3395469782 | 0
        ];
        var W = new Array(80);
        function Sha1() {
          this.init();
          this._w = W;
          Hash.call(this, 64, 56);
        }
        inherits(Sha1, Hash);
        Sha1.prototype.init = function() {
          this._a = 1732584193;
          this._b = 4023233417;
          this._c = 2562383102;
          this._d = 271733878;
          this._e = 3285377520;
          return this;
        };
        function rotl1(num) {
          return num << 1 | num >>> 31;
        }
        function rotl5(num) {
          return num << 5 | num >>> 27;
        }
        function rotl30(num) {
          return num << 30 | num >>> 2;
        }
        function ft(s, b, c, d) {
          if (s === 0)
            return b & c | ~b & d;
          if (s === 2)
            return b & c | b & d | c & d;
          return b ^ c ^ d;
        }
        Sha1.prototype._update = function(M) {
          var W2 = this._w;
          var a = this._a | 0;
          var b = this._b | 0;
          var c = this._c | 0;
          var d = this._d | 0;
          var e = this._e | 0;
          for (var i = 0; i < 16; ++i)
            W2[i] = M.readInt32BE(i * 4);
          for (; i < 80; ++i)
            W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);
          for (var j = 0; j < 80; ++j) {
            var s = ~~(j / 20);
            var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
            e = d;
            d = c;
            c = rotl30(b);
            b = a;
            a = t;
          }
          this._a = a + this._a | 0;
          this._b = b + this._b | 0;
          this._c = c + this._c | 0;
          this._d = d + this._d | 0;
          this._e = e + this._e | 0;
        };
        Sha1.prototype._hash = function() {
          var H = Buffer2.allocUnsafe(20);
          H.writeInt32BE(this._a | 0, 0);
          H.writeInt32BE(this._b | 0, 4);
          H.writeInt32BE(this._c | 0, 8);
          H.writeInt32BE(this._d | 0, 12);
          H.writeInt32BE(this._e | 0, 16);
          return H;
        };
        module3.exports = Sha1;
      }, { "./hash": 190, "inherits": 133, "safe-buffer": 188 }], 194: [function(require2, module3, exports3) {
        var inherits = require2("inherits");
        var Sha256 = require2("./sha256");
        var Hash = require2("./hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        var W = new Array(64);
        function Sha224() {
          this.init();
          this._w = W;
          Hash.call(this, 64, 56);
        }
        inherits(Sha224, Sha256);
        Sha224.prototype.init = function() {
          this._a = 3238371032;
          this._b = 914150663;
          this._c = 812702999;
          this._d = 4144912697;
          this._e = 4290775857;
          this._f = 1750603025;
          this._g = 1694076839;
          this._h = 3204075428;
          return this;
        };
        Sha224.prototype._hash = function() {
          var H = Buffer2.allocUnsafe(28);
          H.writeInt32BE(this._a, 0);
          H.writeInt32BE(this._b, 4);
          H.writeInt32BE(this._c, 8);
          H.writeInt32BE(this._d, 12);
          H.writeInt32BE(this._e, 16);
          H.writeInt32BE(this._f, 20);
          H.writeInt32BE(this._g, 24);
          return H;
        };
        module3.exports = Sha224;
      }, { "./hash": 190, "./sha256": 195, "inherits": 133, "safe-buffer": 188 }], 195: [function(require2, module3, exports3) {
        var inherits = require2("inherits");
        var Hash = require2("./hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        var K = [
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ];
        var W = new Array(64);
        function Sha256() {
          this.init();
          this._w = W;
          Hash.call(this, 64, 56);
        }
        inherits(Sha256, Hash);
        Sha256.prototype.init = function() {
          this._a = 1779033703;
          this._b = 3144134277;
          this._c = 1013904242;
          this._d = 2773480762;
          this._e = 1359893119;
          this._f = 2600822924;
          this._g = 528734635;
          this._h = 1541459225;
          return this;
        };
        function ch(x, y, z) {
          return z ^ x & (y ^ z);
        }
        function maj(x, y, z) {
          return x & y | z & (x | y);
        }
        function sigma0(x) {
          return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
        }
        function sigma1(x) {
          return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
        }
        function gamma0(x) {
          return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
        }
        function gamma1(x) {
          return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
        }
        Sha256.prototype._update = function(M) {
          var W2 = this._w;
          var a = this._a | 0;
          var b = this._b | 0;
          var c = this._c | 0;
          var d = this._d | 0;
          var e = this._e | 0;
          var f = this._f | 0;
          var g = this._g | 0;
          var h = this._h | 0;
          for (var i = 0; i < 16; ++i)
            W2[i] = M.readInt32BE(i * 4);
          for (; i < 64; ++i)
            W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;
          for (var j = 0; j < 64; ++j) {
            var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W2[j] | 0;
            var T2 = sigma0(a) + maj(a, b, c) | 0;
            h = g;
            g = f;
            f = e;
            e = d + T1 | 0;
            d = c;
            c = b;
            b = a;
            a = T1 + T2 | 0;
          }
          this._a = a + this._a | 0;
          this._b = b + this._b | 0;
          this._c = c + this._c | 0;
          this._d = d + this._d | 0;
          this._e = e + this._e | 0;
          this._f = f + this._f | 0;
          this._g = g + this._g | 0;
          this._h = h + this._h | 0;
        };
        Sha256.prototype._hash = function() {
          var H = Buffer2.allocUnsafe(32);
          H.writeInt32BE(this._a, 0);
          H.writeInt32BE(this._b, 4);
          H.writeInt32BE(this._c, 8);
          H.writeInt32BE(this._d, 12);
          H.writeInt32BE(this._e, 16);
          H.writeInt32BE(this._f, 20);
          H.writeInt32BE(this._g, 24);
          H.writeInt32BE(this._h, 28);
          return H;
        };
        module3.exports = Sha256;
      }, { "./hash": 190, "inherits": 133, "safe-buffer": 188 }], 196: [function(require2, module3, exports3) {
        var inherits = require2("inherits");
        var SHA512 = require2("./sha512");
        var Hash = require2("./hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        var W = new Array(160);
        function Sha384() {
          this.init();
          this._w = W;
          Hash.call(this, 128, 112);
        }
        inherits(Sha384, SHA512);
        Sha384.prototype.init = function() {
          this._ah = 3418070365;
          this._bh = 1654270250;
          this._ch = 2438529370;
          this._dh = 355462360;
          this._eh = 1731405415;
          this._fh = 2394180231;
          this._gh = 3675008525;
          this._hh = 1203062813;
          this._al = 3238371032;
          this._bl = 914150663;
          this._cl = 812702999;
          this._dl = 4144912697;
          this._el = 4290775857;
          this._fl = 1750603025;
          this._gl = 1694076839;
          this._hl = 3204075428;
          return this;
        };
        Sha384.prototype._hash = function() {
          var H = Buffer2.allocUnsafe(48);
          function writeInt64BE(h, l, offset) {
            H.writeInt32BE(h, offset);
            H.writeInt32BE(l, offset + 4);
          }
          writeInt64BE(this._ah, this._al, 0);
          writeInt64BE(this._bh, this._bl, 8);
          writeInt64BE(this._ch, this._cl, 16);
          writeInt64BE(this._dh, this._dl, 24);
          writeInt64BE(this._eh, this._el, 32);
          writeInt64BE(this._fh, this._fl, 40);
          return H;
        };
        module3.exports = Sha384;
      }, { "./hash": 190, "./sha512": 197, "inherits": 133, "safe-buffer": 188 }], 197: [function(require2, module3, exports3) {
        var inherits = require2("inherits");
        var Hash = require2("./hash");
        var Buffer2 = require2("safe-buffer").Buffer;
        var K = [
          1116352408,
          3609767458,
          1899447441,
          602891725,
          3049323471,
          3964484399,
          3921009573,
          2173295548,
          961987163,
          4081628472,
          1508970993,
          3053834265,
          2453635748,
          2937671579,
          2870763221,
          3664609560,
          3624381080,
          2734883394,
          310598401,
          1164996542,
          607225278,
          1323610764,
          1426881987,
          3590304994,
          1925078388,
          4068182383,
          2162078206,
          991336113,
          2614888103,
          633803317,
          3248222580,
          3479774868,
          3835390401,
          2666613458,
          4022224774,
          944711139,
          264347078,
          2341262773,
          604807628,
          2007800933,
          770255983,
          1495990901,
          1249150122,
          1856431235,
          1555081692,
          3175218132,
          1996064986,
          2198950837,
          2554220882,
          3999719339,
          2821834349,
          766784016,
          2952996808,
          2566594879,
          3210313671,
          3203337956,
          3336571891,
          1034457026,
          3584528711,
          2466948901,
          113926993,
          3758326383,
          338241895,
          168717936,
          666307205,
          1188179964,
          773529912,
          1546045734,
          1294757372,
          1522805485,
          1396182291,
          2643833823,
          1695183700,
          2343527390,
          1986661051,
          1014477480,
          2177026350,
          1206759142,
          2456956037,
          344077627,
          2730485921,
          1290863460,
          2820302411,
          3158454273,
          3259730800,
          3505952657,
          3345764771,
          106217008,
          3516065817,
          3606008344,
          3600352804,
          1432725776,
          4094571909,
          1467031594,
          275423344,
          851169720,
          430227734,
          3100823752,
          506948616,
          1363258195,
          659060556,
          3750685593,
          883997877,
          3785050280,
          958139571,
          3318307427,
          1322822218,
          3812723403,
          1537002063,
          2003034995,
          1747873779,
          3602036899,
          1955562222,
          1575990012,
          2024104815,
          1125592928,
          2227730452,
          2716904306,
          2361852424,
          442776044,
          2428436474,
          593698344,
          2756734187,
          3733110249,
          3204031479,
          2999351573,
          3329325298,
          3815920427,
          3391569614,
          3928383900,
          3515267271,
          566280711,
          3940187606,
          3454069534,
          4118630271,
          4000239992,
          116418474,
          1914138554,
          174292421,
          2731055270,
          289380356,
          3203993006,
          460393269,
          320620315,
          685471733,
          587496836,
          852142971,
          1086792851,
          1017036298,
          365543100,
          1126000580,
          2618297676,
          1288033470,
          3409855158,
          1501505948,
          4234509866,
          1607167915,
          987167468,
          1816402316,
          1246189591
        ];
        var W = new Array(160);
        function Sha512() {
          this.init();
          this._w = W;
          Hash.call(this, 128, 112);
        }
        inherits(Sha512, Hash);
        Sha512.prototype.init = function() {
          this._ah = 1779033703;
          this._bh = 3144134277;
          this._ch = 1013904242;
          this._dh = 2773480762;
          this._eh = 1359893119;
          this._fh = 2600822924;
          this._gh = 528734635;
          this._hh = 1541459225;
          this._al = 4089235720;
          this._bl = 2227873595;
          this._cl = 4271175723;
          this._dl = 1595750129;
          this._el = 2917565137;
          this._fl = 725511199;
          this._gl = 4215389547;
          this._hl = 327033209;
          return this;
        };
        function Ch(x, y, z) {
          return z ^ x & (y ^ z);
        }
        function maj(x, y, z) {
          return x & y | z & (x | y);
        }
        function sigma0(x, xl) {
          return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
        }
        function sigma1(x, xl) {
          return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
        }
        function Gamma0(x, xl) {
          return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
        }
        function Gamma0l(x, xl) {
          return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
        }
        function Gamma1(x, xl) {
          return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
        }
        function Gamma1l(x, xl) {
          return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
        }
        function getCarry(a, b) {
          return a >>> 0 < b >>> 0 ? 1 : 0;
        }
        Sha512.prototype._update = function(M) {
          var W2 = this._w;
          var ah = this._ah | 0;
          var bh = this._bh | 0;
          var ch = this._ch | 0;
          var dh = this._dh | 0;
          var eh = this._eh | 0;
          var fh = this._fh | 0;
          var gh = this._gh | 0;
          var hh = this._hh | 0;
          var al = this._al | 0;
          var bl = this._bl | 0;
          var cl = this._cl | 0;
          var dl = this._dl | 0;
          var el = this._el | 0;
          var fl = this._fl | 0;
          var gl = this._gl | 0;
          var hl = this._hl | 0;
          for (var i = 0; i < 32; i += 2) {
            W2[i] = M.readInt32BE(i * 4);
            W2[i + 1] = M.readInt32BE(i * 4 + 4);
          }
          for (; i < 160; i += 2) {
            var xh = W2[i - 15 * 2];
            var xl = W2[i - 15 * 2 + 1];
            var gamma0 = Gamma0(xh, xl);
            var gamma0l = Gamma0l(xl, xh);
            xh = W2[i - 2 * 2];
            xl = W2[i - 2 * 2 + 1];
            var gamma1 = Gamma1(xh, xl);
            var gamma1l = Gamma1l(xl, xh);
            var Wi7h = W2[i - 7 * 2];
            var Wi7l = W2[i - 7 * 2 + 1];
            var Wi16h = W2[i - 16 * 2];
            var Wi16l = W2[i - 16 * 2 + 1];
            var Wil = gamma0l + Wi7l | 0;
            var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
            Wil = Wil + gamma1l | 0;
            Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
            Wil = Wil + Wi16l | 0;
            Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
            W2[i] = Wih;
            W2[i + 1] = Wil;
          }
          for (var j = 0; j < 160; j += 2) {
            Wih = W2[j];
            Wil = W2[j + 1];
            var majh = maj(ah, bh, ch);
            var majl = maj(al, bl, cl);
            var sigma0h = sigma0(ah, al);
            var sigma0l = sigma0(al, ah);
            var sigma1h = sigma1(eh, el);
            var sigma1l = sigma1(el, eh);
            var Kih = K[j];
            var Kil = K[j + 1];
            var chh = Ch(eh, fh, gh);
            var chl = Ch(el, fl, gl);
            var t1l = hl + sigma1l | 0;
            var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
            t1l = t1l + chl | 0;
            t1h = t1h + chh + getCarry(t1l, chl) | 0;
            t1l = t1l + Kil | 0;
            t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
            t1l = t1l + Wil | 0;
            t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
            var t2l = sigma0l + majl | 0;
            var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            el = dl + t1l | 0;
            eh = dh + t1h + getCarry(el, dl) | 0;
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            al = t1l + t2l | 0;
            ah = t1h + t2h + getCarry(al, t1l) | 0;
          }
          this._al = this._al + al | 0;
          this._bl = this._bl + bl | 0;
          this._cl = this._cl + cl | 0;
          this._dl = this._dl + dl | 0;
          this._el = this._el + el | 0;
          this._fl = this._fl + fl | 0;
          this._gl = this._gl + gl | 0;
          this._hl = this._hl + hl | 0;
          this._ah = this._ah + ah + getCarry(this._al, al) | 0;
          this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
          this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
          this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
          this._eh = this._eh + eh + getCarry(this._el, el) | 0;
          this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
          this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
          this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
        };
        Sha512.prototype._hash = function() {
          var H = Buffer2.allocUnsafe(64);
          function writeInt64BE(h, l, offset) {
            H.writeInt32BE(h, offset);
            H.writeInt32BE(l, offset + 4);
          }
          writeInt64BE(this._ah, this._al, 0);
          writeInt64BE(this._bh, this._bl, 8);
          writeInt64BE(this._ch, this._cl, 16);
          writeInt64BE(this._dh, this._dl, 24);
          writeInt64BE(this._eh, this._el, 32);
          writeInt64BE(this._fh, this._fl, 40);
          writeInt64BE(this._gh, this._gl, 48);
          writeInt64BE(this._hh, this._hl, 56);
          return H;
        };
        module3.exports = Sha512;
      }, { "./hash": 190, "inherits": 133, "safe-buffer": 188 }], 198: [function(require2, module3, exports3) {
        module3.exports = Stream;
        var EE = require2("events").EventEmitter;
        var inherits = require2("inherits");
        inherits(Stream, EE);
        Stream.Readable = require2("readable-stream/lib/_stream_readable.js");
        Stream.Writable = require2("readable-stream/lib/_stream_writable.js");
        Stream.Duplex = require2("readable-stream/lib/_stream_duplex.js");
        Stream.Transform = require2("readable-stream/lib/_stream_transform.js");
        Stream.PassThrough = require2("readable-stream/lib/_stream_passthrough.js");
        Stream.finished = require2("readable-stream/lib/internal/streams/end-of-stream.js");
        Stream.pipeline = require2("readable-stream/lib/internal/streams/pipeline.js");
        Stream.Stream = Stream;
        function Stream() {
          EE.call(this);
        }
        Stream.prototype.pipe = function(dest, options) {
          var source = this;
          function ondata(chunk) {
            if (dest.writable) {
              if (dest.write(chunk) === false && source.pause) {
                source.pause();
              }
            }
          }
          source.on("data", ondata);
          function ondrain() {
            if (source.readable && source.resume) {
              source.resume();
            }
          }
          dest.on("drain", ondrain);
          if (!dest._isStdio && (!options || options.end !== false)) {
            source.on("end", onend);
            source.on("close", onclose);
          }
          var didOnEnd = false;
          function onend() {
            if (didOnEnd)
              return;
            didOnEnd = true;
            dest.end();
          }
          function onclose() {
            if (didOnEnd)
              return;
            didOnEnd = true;
            if (typeof dest.destroy === "function")
              dest.destroy();
          }
          function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, "error") === 0) {
              throw er;
            }
          }
          source.on("error", onerror);
          dest.on("error", onerror);
          function cleanup() {
            source.removeListener("data", ondata);
            dest.removeListener("drain", ondrain);
            source.removeListener("end", onend);
            source.removeListener("close", onclose);
            source.removeListener("error", onerror);
            dest.removeListener("error", onerror);
            source.removeListener("end", cleanup);
            source.removeListener("close", cleanup);
            dest.removeListener("close", cleanup);
          }
          source.on("end", cleanup);
          source.on("close", cleanup);
          dest.on("close", cleanup);
          dest.emit("pipe", source);
          return dest;
        };
      }, { "events": 101, "inherits": 133, "readable-stream/lib/_stream_duplex.js": 200, "readable-stream/lib/_stream_passthrough.js": 201, "readable-stream/lib/_stream_readable.js": 202, "readable-stream/lib/_stream_transform.js": 203, "readable-stream/lib/_stream_writable.js": 204, "readable-stream/lib/internal/streams/end-of-stream.js": 208, "readable-stream/lib/internal/streams/pipeline.js": 210 }], 199: [function(require2, module3, exports3) {
        arguments[4][47][0].apply(exports3, arguments);
      }, { "dup": 47 }], 200: [function(require2, module3, exports3) {
        arguments[4][48][0].apply(exports3, arguments);
      }, { "./_stream_readable": 202, "./_stream_writable": 204, "_process": 151, "dup": 48, "inherits": 133 }], 201: [function(require2, module3, exports3) {
        arguments[4][49][0].apply(exports3, arguments);
      }, { "./_stream_transform": 203, "dup": 49, "inherits": 133 }], 202: [function(require2, module3, exports3) {
        arguments[4][50][0].apply(exports3, arguments);
      }, { "../errors": 199, "./_stream_duplex": 200, "./internal/streams/async_iterator": 205, "./internal/streams/buffer_list": 206, "./internal/streams/destroy": 207, "./internal/streams/from": 209, "./internal/streams/state": 211, "./internal/streams/stream": 212, "_process": 151, "buffer": 63, "dup": 50, "events": 101, "inherits": 133, "string_decoder/": 213, "util": 19 }], 203: [function(require2, module3, exports3) {
        arguments[4][51][0].apply(exports3, arguments);
      }, { "../errors": 199, "./_stream_duplex": 200, "dup": 51, "inherits": 133 }], 204: [function(require2, module3, exports3) {
        arguments[4][52][0].apply(exports3, arguments);
      }, { "../errors": 199, "./_stream_duplex": 200, "./internal/streams/destroy": 207, "./internal/streams/state": 211, "./internal/streams/stream": 212, "_process": 151, "buffer": 63, "dup": 52, "inherits": 133, "util-deprecate": 214 }], 205: [function(require2, module3, exports3) {
        arguments[4][53][0].apply(exports3, arguments);
      }, { "./end-of-stream": 208, "_process": 151, "dup": 53 }], 206: [function(require2, module3, exports3) {
        arguments[4][54][0].apply(exports3, arguments);
      }, { "buffer": 63, "dup": 54, "util": 19 }], 207: [function(require2, module3, exports3) {
        arguments[4][55][0].apply(exports3, arguments);
      }, { "_process": 151, "dup": 55 }], 208: [function(require2, module3, exports3) {
        arguments[4][56][0].apply(exports3, arguments);
      }, { "../../../errors": 199, "dup": 56 }], 209: [function(require2, module3, exports3) {
        arguments[4][57][0].apply(exports3, arguments);
      }, { "dup": 57 }], 210: [function(require2, module3, exports3) {
        arguments[4][58][0].apply(exports3, arguments);
      }, { "../../../errors": 199, "./end-of-stream": 208, "dup": 58 }], 211: [function(require2, module3, exports3) {
        arguments[4][59][0].apply(exports3, arguments);
      }, { "../../../errors": 199, "dup": 59 }], 212: [function(require2, module3, exports3) {
        arguments[4][60][0].apply(exports3, arguments);
      }, { "dup": 60, "events": 101 }], 213: [function(require2, module3, exports3) {
        "use strict";
        var Buffer2 = require2("safe-buffer").Buffer;
        var isEncoding = Buffer2.isEncoding || function(encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
        function _normalizeEncoding(enc) {
          if (!enc)
            return "utf8";
          var retried;
          while (true) {
            switch (enc) {
              case "utf8":
              case "utf-8":
                return "utf8";
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return "utf16le";
              case "latin1":
              case "binary":
                return "latin1";
              case "base64":
              case "ascii":
              case "hex":
                return enc;
              default:
                if (retried)
                  return;
                enc = ("" + enc).toLowerCase();
                retried = true;
            }
          }
        }
        ;
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
            throw new Error("Unknown encoding: " + enc);
          return nenc || enc;
        }
        exports3.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
            case "utf16le":
              this.text = utf16Text;
              this.end = utf16End;
              nb = 4;
              break;
            case "utf8":
              this.fillLast = utf8FillLast;
              nb = 4;
              break;
            case "base64":
              this.text = base64Text;
              this.end = base64End;
              nb = 3;
              break;
            default:
              this.write = simpleWrite;
              this.end = simpleEnd;
              return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = Buffer2.allocUnsafe(nb);
        }
        StringDecoder.prototype.write = function(buf) {
          if (buf.length === 0)
            return "";
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === void 0)
              return "";
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length)
            return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || "";
        };
        StringDecoder.prototype.end = utf8End;
        StringDecoder.prototype.text = utf8Text;
        StringDecoder.prototype.fillLast = function(buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };
        function utf8CheckByte(byte) {
          if (byte <= 127)
            return 0;
          else if (byte >> 5 === 6)
            return 2;
          else if (byte >> 4 === 14)
            return 3;
          else if (byte >> 3 === 30)
            return 4;
          return byte >> 6 === 2 ? -1 : -2;
        }
        function utf8CheckIncomplete(self2, buf, i) {
          var j = buf.length - 1;
          if (j < i)
            return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self2.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self2.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2)
                nb = 0;
              else
                self2.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }
        function utf8CheckExtraBytes(self2, buf, p) {
          if ((buf[0] & 192) !== 128) {
            self2.lastNeed = 0;
            return "\uFFFD";
          }
          if (self2.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 192) !== 128) {
              self2.lastNeed = 1;
              return "\uFFFD";
            }
            if (self2.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 192) !== 128) {
                self2.lastNeed = 2;
                return "\uFFFD";
              }
            }
          }
        }
        function utf8FillLast(buf) {
          var p = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf, p);
          if (r !== void 0)
            return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p, 0, buf.length);
          this.lastNeed -= buf.length;
        }
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed)
            return buf.toString("utf8", i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString("utf8", i, end);
        }
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + "\uFFFD";
          return r;
        }
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString("utf16le", i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString("utf16le", i, buf.length - 1);
        }
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString("utf16le", 0, end);
          }
          return r;
        }
        function base64Text(buf, i) {
          var n = (buf.length - i) % 3;
          if (n === 0)
            return buf.toString("base64", i);
          this.lastNeed = 3 - n;
          this.lastTotal = 3;
          if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString("base64", i, buf.length - n);
        }
        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
          return r;
        }
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }
        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : "";
        }
      }, { "safe-buffer": 188 }], 214: [function(require2, module3, exports3) {
        (function(global2) {
          (function() {
            module3.exports = deprecate;
            function deprecate(fn, msg) {
              if (config("noDeprecation")) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (config("throwDeprecation")) {
                    throw new Error(msg);
                  } else if (config("traceDeprecation")) {
                    console.trace(msg);
                  } else {
                    console.warn(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            }
            function config(name) {
              try {
                if (!global2.localStorage)
                  return false;
              } catch (_) {
                return false;
              }
              var val = global2.localStorage[name];
              if (val == null)
                return false;
              return String(val).toLowerCase() === "true";
            }
          }).call(this);
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 215: [function(require2, module3, exports3) {
        module3.exports = require2("quickjs-emscripten");
      }, { "quickjs-emscripten": 173 }] }, {}, [215])(215);
    });
  }
});
export default require_quickjs_browser();
